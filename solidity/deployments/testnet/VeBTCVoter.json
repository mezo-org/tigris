{
  "address": "0x72F8dd7F44fFa19E45955aa20A5486E8EB255738",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyVotedOrDeposited",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DistributeWindow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FactoryPathNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GaugeAlreadyKilled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GaugeAlreadyRevived",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "GaugeDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GaugeExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "GaugeNotAlive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveManagedNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaximumVotingNumberTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonZeroVotes",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEmergencyCouncil",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSplitter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistedNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelistedToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SpecialVotingWindow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyPools",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnequalLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Abstained",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "bribeVotingReward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeVotingReward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "GaugeCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        }
      ],
      "name": "GaugeRevived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NotifyReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "WhitelistNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "whitelister",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "WhitelistToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_bribes",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimBribes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_fees",
          "type": "address[]"
        },
        {
          "internalType": "address[][]",
          "name": "_tokens",
          "type": "address[][]"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "createGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        }
      ],
      "name": "depositManaged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_finish",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyCouncil",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochGovernor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochVoteEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "epochVoteStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeToBribe",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeToFees",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gauges",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_splitter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAlive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isGauge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isWhitelistedNFT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isWhitelistedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "killGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastVoted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "length",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxVotingNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "poke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolForGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolVote",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "reviveGauge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_council",
          "type": "address"
        }
      ],
      "name": "setEmergencyCouncil",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_epochGovernor",
          "type": "address"
        }
      ],
      "name": "setEpochGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "setGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxVotingNum",
          "type": "uint256"
        }
      ],
      "name": "setMaxVotingNum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        }
      ],
      "name": "updateFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "usedWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_poolVote",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "whitelistNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "whitelistToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawManaged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd05cd19c493b0fc81be6613e2721e9bf9204484f2e3e082cb410104cd2ad97d6",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0x72F8dd7F44fFa19E45955aa20A5486E8EB255738",
    "transactionIndex": 0,
    "gasUsed": "3776737",
    "logsBloom": "0x
    "blockHash": "0x1a83853af22571fc58340648ef412b6c5235b9eeb71025b94aaaac80b342f2df",
    "transactionHash": "0xd05cd19c493b0fc81be6613e2721e9bf9204484f2e3e082cb410104cd2ad97d6",
    "logs": [],
    "blockNumber": 6312442,
    "cumulativeGasUsed": "3776737",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5fA3D34F6c1537A0393098F0e124064B66cE8E24",
    "0xB63fcCd03521Cf21907627bd7fA465C129479231",
    "0x1Ecd87C8D510A7390a561AE0Ac54FBe7e5125BcF"
  ],
  "numDeployments": 1,
  "solcInputHash": "ba27fe5e205cd6b887b14614de0cce2b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVotedOrDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FactoryPathNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GaugeAlreadyKilled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GaugeAlreadyRevived\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"GaugeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GaugeExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"GaugeNotAlive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveManagedNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumVotingNumberTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonZeroVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmergencyCouncil\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSplitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistedNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistedToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SpecialVotingWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribeVotingReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeVotingReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"GaugeCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"}],\"name\":\"GaugeRevived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"}],\"name\":\"depositManaged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_finish\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyCouncil\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochGovernor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeToBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeToFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gauges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_splitter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAlive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isGauge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isWhitelistedNFT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"killGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVotingNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"reviveGauge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_council\",\"type\":\"address\"}],\"name\":\"setEmergencyCouncil\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_epochGovernor\",\"type\":\"address\"}],\"name\":\"setEpochGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVotingNum\",\"type\":\"uint256\"}],\"name\":\"setMaxVotingNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"}],\"name\":\"updateFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_poolVote\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawManaged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"velodrome.finance, @figs999, @pegahcarter\",\"kind\":\"dev\",\"methods\":{\"claimBribes(address[],address[][],uint256)\":{\"details\":\"Utility to help batch bribe claims.\",\"params\":{\"_bribes\":\"Array of BribeVotingReward contracts to collect from.\",\"_tokenId\":\"Id of veNFT that you wish to claim bribes for.\",\"_tokens\":\"Array of tokens that are used as bribes.\"}},\"claimFees(address[],address[][],uint256)\":{\"details\":\"Utility to help batch fee claims.\",\"params\":{\"_fees\":\"Array of FeesVotingReward contracts to collect from.\",\"_tokenId\":\"Id of veNFT that you wish to claim fees for.\",\"_tokens\":\"Array of tokens that are used as fees.\"}},\"claimRewards(address[])\":{\"params\":{\"_gauges\":\"Array of gauges to collect emissions from.\"}},\"createGauge(address,address)\":{\"details\":\"Governor can create a new gauge for a pool with any address.\",\"params\":{\"_pool\":\".\",\"_poolFactory\":\".\"}},\"depositManaged(uint256,uint256)\":{\"details\":\"Throws if not approved or owner.      Throws if managed NFT is inactive.      Throws if depositing within privileged window (one hour prior to epoch flip).\"},\"distribute(address[])\":{\"details\":\"Utility to distribute to gauges of pools in array.\",\"params\":{\"_gauges\":\"Array of gauges to distribute to.\"}},\"distribute(uint256,uint256)\":{\"details\":\"Utility to distribute to gauges of pools in range _start to _finish.\",\"params\":{\"_finish\":\"Ending index of gauges to distribute to.\",\"_start\":\"Starting index of gauges to distribute to.\"}},\"initialize(address[],address)\":{\"details\":\"requires initialization with at least rewardToken\"},\"killGauge(address)\":{\"details\":\"Throws if not called by emergency council.      Throws if gauge already killed.\",\"params\":{\"_gauge\":\".\"}},\"notifyRewardAmount(uint256)\":{\"details\":\"Assumes totalWeight != 0 (Will never be zero as long as users are voting).      Throws if not called by splitter.\",\"params\":{\"_amount\":\"Amount of rewards to distribute.\"}},\"poke(uint256)\":{\"params\":{\"_tokenId\":\"Id of veNFT whose balance you wish to update.\"}},\"reset(uint256)\":{\"params\":{\"_tokenId\":\"Id of veNFT you are reseting.\"}},\"reviveGauge(address)\":{\"details\":\"Throws if not called by emergency council.      Throws if gauge is not killed.\",\"params\":{\"_gauge\":\".\"}},\"setEmergencyCouncil(address)\":{\"details\":\"Throws if not called by emergency council.\",\"params\":{\"_emergencyCouncil\":\".\"}},\"setEpochGovernor(address)\":{\"details\":\"Throws if not called by governor.\",\"params\":{\"_epochGovernor\":\".\"}},\"setGovernor(address)\":{\"details\":\"Throws if not called by governor.\",\"params\":{\"_governor\":\".\"}},\"setMaxVotingNum(uint256)\":{\"details\":\"Throws if not called by governor.      Throws if _maxVotingNum is too low.      Throws if the values are the same.\",\"params\":{\"_maxVotingNum\":\".\"}},\"updateFor(address)\":{\"details\":\"Update claims to emissions for single gauge\",\"params\":{\"_gauge\":\".\"}},\"updateFor(address[])\":{\"details\":\"Update claims to emissions for an array of gauges.\",\"params\":{\"_gauges\":\"Array of gauges to update emissions for.\"}},\"updateFor(uint256,uint256)\":{\"details\":\"Update claims to emissions for gauges based on their pool id as stored in Voter.\",\"params\":{\"_end\":\"Ending index of pools.\",\"_start\":\"Starting index of pools.\"}},\"vote(uint256,address[],uint256[])\":{\"details\":\"Weights are distributed proportional to the sum of the weights in the array.      Throws if length of _poolVote and _weights do not match.\",\"params\":{\"_poolVote\":\"Array of pools you are voting for.\",\"_tokenId\":\"Id of veNFT you are voting with.\",\"_weights\":\"Weights of pools.\"}},\"whitelistNFT(uint256,bool)\":{\"details\":\"Throws if not called by governor.      Throws if already whitelisted.\",\"params\":{\"_bool\":\".\",\"_tokenId\":\".\"}},\"whitelistToken(address,bool)\":{\"details\":\"Throws if not called by governor.\",\"params\":{\"_bool\":\".\",\"_token\":\".\"}}},\"stateVariables\":{\"claimable\":{\"details\":\"Gauge => Amount claimable\"},\"gaugeToBribe\":{\"details\":\"Gauge => Bribes Voting Reward\"},\"gaugeToFees\":{\"details\":\"Gauge => Fees Voting Reward\"},\"gauges\":{\"details\":\"Pool => Gauge\"},\"index\":{\"details\":\"Accumulated distributions per vote\"},\"isAlive\":{\"details\":\"Gauge => Liveness status\"},\"isGauge\":{\"details\":\"Address => Gauge\"},\"isWhitelistedNFT\":{\"details\":\"TokenId => Whitelisted status\"},\"isWhitelistedToken\":{\"details\":\"Token => Whitelisted status\"},\"lastVoted\":{\"details\":\"Nft => Timestamp of last vote (ensures single vote per epoch)\"},\"maxVotingNum\":{\"details\":\"Most number of pools one voter can vote for at once\"},\"poolForGauge\":{\"details\":\"Gauge => Pool\"},\"poolVote\":{\"details\":\"NFT => List of pools voted for by NFT\"},\"pools\":{\"details\":\"All pools viable for incentives\"},\"supplyIndex\":{\"details\":\"Gauge => Accumulated gauge distributions\"},\"totalWeight\":{\"details\":\"Total Voting Weights\"},\"usedWeights\":{\"details\":\"NFT => Total voting weight of NFT\"},\"votes\":{\"details\":\"NFT => Pool => Votes\"},\"weights\":{\"details\":\"Pool => Weights\"}},\"title\":\"Protocol Voter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimBribes(address[],address[][],uint256)\":{\"notice\":\"Claim bribes for a given NFT.\"},\"claimFees(address[],address[][],uint256)\":{\"notice\":\"Claim fees for a given NFT.\"},\"claimRewards(address[])\":{\"notice\":\"Claim emissions from gauges.\"},\"createGauge(address,address)\":{\"notice\":\"Create a new gauge (unpermissioned).\"},\"depositManaged(uint256,uint256)\":{\"notice\":\"Called by users to deposit into a managed NFT.         Can only vote or deposit into a managed NFT once per epoch.         Note that NFTs deposited into a managed NFT will be re-locked         to the maximum lock time on withdrawal.\"},\"emergencyCouncil()\":{\"notice\":\"credibly neutral party similar to Curve's Emergency DAO\"},\"epochGovernor()\":{\"notice\":\"Custom Epoch Governor using ve for vote weights.\"},\"factoryRegistry()\":{\"notice\":\"Factory registry for valid pool / gauge / rewards factories\"},\"forwarder()\":{\"notice\":\"Store trusted forwarder address to pass into factories\"},\"governor()\":{\"notice\":\"Standard OZ IGovernor using ve for vote weights.\"},\"killGauge(address)\":{\"notice\":\"Kills a gauge. The gauge will not receive any new emissions and cannot be deposited into.         Can still withdraw from gauge.\"},\"length()\":{\"notice\":\"Number of pools with a Gauge\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"Called by Splitter to distribute weekly emissions rewards for disbursement amongst gauges.\"},\"poke(uint256)\":{\"notice\":\"Called by users to update voting balances in voting rewards contracts.\"},\"reset(uint256)\":{\"notice\":\"Called by users to reset voting state. Required if you wish to make changes to         veNFT state (e.g. merge, split, deposit into managed etc).         Cannot reset in the same epoch that you voted in.         Can vote or deposit into a managed NFT again after reset.\"},\"reviveGauge(address)\":{\"notice\":\"Revives a killed gauge. Gauge will can receive emissions and deposits again.\"},\"setEmergencyCouncil(address)\":{\"notice\":\"Set new emergency council.\"},\"setEpochGovernor(address)\":{\"notice\":\"Set new epoch based governor.\"},\"setGovernor(address)\":{\"notice\":\"Set new governor.\"},\"setMaxVotingNum(uint256)\":{\"notice\":\"Set maximum number of gauges that can be voted for.\"},\"splitter()\":{\"notice\":\"Address of a splitter contract\"},\"ve()\":{\"notice\":\"The ve token that governs these contracts\"},\"vote(uint256,address[],uint256[])\":{\"notice\":\"Called by users to vote for pools. Votes distributed proportionally based on weights.         Can only vote or deposit into a managed NFT once per epoch.         Can only vote for gauges that have not been killed.\"},\"whitelistNFT(uint256,bool)\":{\"notice\":\"Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\"},\"whitelistToken(address,bool)\":{\"notice\":\"Whitelist (or unwhitelist) token for use in bribes.\"},\"withdrawManaged(uint256)\":{\"notice\":\"Called by users to withdraw from a managed NFT.         Cannot do it in the same epoch that you deposited into a managed NFT.         Can vote or deposit into a managed NFT again after withdrawing.         Note that the NFT withdrawn is re-locked to the maximum lock time.\"}},\"notice\":\"Manage votes, emission distribution, and gauge creation within the Protocol's ecosystem.         Also provides support for depositing and withdrawing from managed veNFTs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voter.sol\":\"Voter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/Voter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IVotingRewardsFactory} from \\\"./interfaces/factories/IVotingRewardsFactory.sol\\\";\\nimport {IGauge} from \\\"./interfaces/IGauge.sol\\\";\\nimport {IGaugeFactory} from \\\"./interfaces/factories/IGaugeFactory.sol\\\";\\nimport {ISplitter} from \\\"./interfaces/ISplitter.sol\\\";\\nimport {IPool} from \\\"./interfaces/IPool.sol\\\";\\nimport {IPoolFactory} from \\\"./interfaces/factories/IPoolFactory.sol\\\";\\nimport {IReward} from \\\"./interfaces/IReward.sol\\\";\\nimport {IVoter} from \\\"./interfaces/IVoter.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IFactoryRegistry} from \\\"./interfaces/factories/IFactoryRegistry.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {ProtocolTimeLibrary} from \\\"./libraries/ProtocolTimeLibrary.sol\\\";\\n\\n/// @title Protocol Voter\\n/// @author velodrome.finance, @figs999, @pegahcarter\\n/// @notice Manage votes, emission distribution, and gauge creation within the Protocol's ecosystem.\\n///         Also provides support for depositing and withdrawing from managed veNFTs.\\ncontract Voter is IVoter, ERC2771Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    /// @inheritdoc IVoter\\n    address public immutable forwarder;\\n    /// @inheritdoc IVoter\\n    address public immutable ve;\\n    /// @inheritdoc IVoter\\n    address public immutable factoryRegistry;\\n    /// @notice Base token of ve contract\\n    address internal immutable rewardToken;\\n    /// @notice Rewards are released over 7 days\\n    uint256 internal constant DURATION = 7 days;\\n    /// @inheritdoc IVoter\\n    address public splitter;\\n    /// @inheritdoc IVoter\\n    address public governor;\\n    /// @inheritdoc IVoter\\n    address public epochGovernor;\\n    /// @inheritdoc IVoter\\n    address public emergencyCouncil;\\n\\n    /// @inheritdoc IVoter\\n    uint256 public totalWeight;\\n    /// @inheritdoc IVoter\\n    uint256 public maxVotingNum;\\n    uint256 internal constant MIN_MAXVOTINGNUM = 10;\\n\\n    /// @dev All pools viable for incentives\\n    address[] public pools;\\n    /// @inheritdoc IVoter\\n    mapping(address => address) public gauges;\\n    /// @inheritdoc IVoter\\n    mapping(address => address) public poolForGauge;\\n    /// @inheritdoc IVoter\\n    mapping(address => address) public gaugeToFees;\\n    /// @inheritdoc IVoter\\n    mapping(address => address) public gaugeToBribe;\\n    /// @inheritdoc IVoter\\n    mapping(address => uint256) public weights;\\n    /// @inheritdoc IVoter\\n    mapping(uint256 => mapping(address => uint256)) public votes;\\n    /// @dev NFT => List of pools voted for by NFT\\n    mapping(uint256 => address[]) public poolVote;\\n    /// @inheritdoc IVoter\\n    mapping(uint256 => uint256) public usedWeights;\\n    /// @inheritdoc IVoter\\n    mapping(uint256 => uint256) public lastVoted;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public isGauge;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public isWhitelistedToken;\\n    /// @inheritdoc IVoter\\n    mapping(uint256 => bool) public isWhitelistedNFT;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public isAlive;\\n    /// @dev Accumulated distributions per vote\\n    uint256 internal index;\\n    /// @dev Gauge => Accumulated gauge distributions\\n    mapping(address => uint256) internal supplyIndex;\\n    /// @inheritdoc IVoter\\n    mapping(address => uint256) public claimable;\\n\\n    constructor(\\n        address _forwarder,\\n        address _ve,\\n        address _factoryRegistry\\n    ) ERC2771Context(_forwarder) {\\n        forwarder = _forwarder;\\n        ve = _ve;\\n        factoryRegistry = _factoryRegistry;\\n        rewardToken = IVotingEscrow(_ve).token();\\n        address _sender = _msgSender();\\n        splitter = _sender;\\n        governor = _sender;\\n        epochGovernor = _sender;\\n        emergencyCouncil = _sender;\\n        maxVotingNum = 30;\\n    }\\n\\n    modifier onlyNewEpoch(uint256 _tokenId) {\\n        // ensure new epoch since last vote\\n        if (\\n            ProtocolTimeLibrary.epochStart(block.timestamp) <=\\n            lastVoted[_tokenId]\\n        ) revert AlreadyVotedOrDeposited();\\n        if (\\n            block.timestamp <=\\n            ProtocolTimeLibrary.epochVoteStart(block.timestamp)\\n        ) revert DistributeWindow();\\n        _;\\n    }\\n\\n    function epochStart(uint256 _timestamp) external pure returns (uint256) {\\n        return ProtocolTimeLibrary.epochStart(_timestamp);\\n    }\\n\\n    function epochNext(uint256 _timestamp) external pure returns (uint256) {\\n        return ProtocolTimeLibrary.epochNext(_timestamp);\\n    }\\n\\n    function epochVoteStart(\\n        uint256 _timestamp\\n    ) external pure returns (uint256) {\\n        return ProtocolTimeLibrary.epochVoteStart(_timestamp);\\n    }\\n\\n    function epochVoteEnd(uint256 _timestamp) external pure returns (uint256) {\\n        return ProtocolTimeLibrary.epochVoteEnd(_timestamp);\\n    }\\n\\n    /// @dev requires initialization with at least rewardToken\\n    function initialize(\\n        address[] calldata _tokens,\\n        address _splitter\\n    ) external {\\n        if (_msgSender() != splitter) revert NotSplitter();\\n        uint256 _length = _tokens.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            _whitelistToken(_tokens[i], true);\\n        }\\n        splitter = _splitter;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setGovernor(address _governor) public {\\n        if (_msgSender() != governor) revert NotGovernor();\\n        if (_governor == address(0)) revert ZeroAddress();\\n        governor = _governor;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setEpochGovernor(address _epochGovernor) public {\\n        if (_msgSender() != governor) revert NotGovernor();\\n        if (_epochGovernor == address(0)) revert ZeroAddress();\\n        epochGovernor = _epochGovernor;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setEmergencyCouncil(address _council) public {\\n        if (_msgSender() != emergencyCouncil) revert NotEmergencyCouncil();\\n        if (_council == address(0)) revert ZeroAddress();\\n        emergencyCouncil = _council;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setMaxVotingNum(uint256 _maxVotingNum) external {\\n        if (_msgSender() != governor) revert NotGovernor();\\n        if (_maxVotingNum < MIN_MAXVOTINGNUM)\\n            revert MaximumVotingNumberTooLow();\\n        if (_maxVotingNum == maxVotingNum) revert SameValue();\\n        maxVotingNum = _maxVotingNum;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function reset(\\n        uint256 _tokenId\\n    ) external onlyNewEpoch(_tokenId) nonReentrant {\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(msg.sender, _tokenId))\\n            revert NotApprovedOrOwner();\\n        _reset(_tokenId);\\n    }\\n\\n    function _reset(uint256 _tokenId) internal {\\n        address[] storage _poolVote = poolVote[_tokenId];\\n        uint256 _poolVoteCnt = _poolVote.length;\\n        uint256 _totalWeight = 0;\\n\\n        for (uint256 i = 0; i < _poolVoteCnt; i++) {\\n            address _pool = _poolVote[i];\\n            uint256 _votes = votes[_tokenId][_pool];\\n\\n            if (_votes != 0) {\\n                _updateFor(gauges[_pool]);\\n                weights[_pool] -= _votes;\\n                delete votes[_tokenId][_pool];\\n                IReward(gaugeToFees[gauges[_pool]])._withdraw(_votes, _tokenId);\\n                IReward(gaugeToBribe[gauges[_pool]])._withdraw(\\n                    _votes,\\n                    _tokenId\\n                );\\n                _totalWeight += _votes;\\n                emit Abstained(\\n                    _msgSender(),\\n                    _pool,\\n                    _tokenId,\\n                    _votes,\\n                    weights[_pool],\\n                    block.timestamp\\n                );\\n            }\\n        }\\n        IVotingEscrow(ve).voting(_tokenId, false);\\n        totalWeight -= _totalWeight;\\n        usedWeights[_tokenId] = 0;\\n        delete poolVote[_tokenId];\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function poke(uint256 _tokenId) external nonReentrant {\\n        if (\\n            block.timestamp <=\\n            ProtocolTimeLibrary.epochVoteStart(block.timestamp)\\n        ) revert DistributeWindow();\\n        uint256 _weight = IVotingEscrow(ve).balanceOfNFT(_tokenId);\\n        _poke(_tokenId, _weight);\\n    }\\n\\n    function _poke(uint256 _tokenId, uint256 _weight) internal {\\n        address[] memory _poolVote = poolVote[_tokenId];\\n        uint256 _poolCnt = _poolVote.length;\\n        uint256[] memory _weights = new uint256[](_poolCnt);\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            _weights[i] = votes[_tokenId][_poolVote[i]];\\n        }\\n        _vote(_tokenId, _weight, _poolVote, _weights);\\n    }\\n\\n    function _vote(\\n        uint256 _tokenId,\\n        uint256 _weight,\\n        address[] memory _poolVote,\\n        uint256[] memory _weights\\n    ) internal {\\n        _reset(_tokenId);\\n        uint256 _poolCnt = _poolVote.length;\\n        uint256 _totalVoteWeight = 0;\\n        uint256 _totalWeight = 0;\\n        uint256 _usedWeight = 0;\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            _totalVoteWeight += _weights[i];\\n        }\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            address _pool = _poolVote[i];\\n            address _gauge = gauges[_pool];\\n            if (_gauge == address(0)) revert GaugeDoesNotExist(_pool);\\n            if (!isAlive[_gauge]) revert GaugeNotAlive(_gauge);\\n\\n            if (isGauge[_gauge]) {\\n                uint256 _poolWeight = (_weights[i] * _weight) /\\n                    _totalVoteWeight;\\n                if (votes[_tokenId][_pool] != 0) revert NonZeroVotes();\\n                if (_poolWeight == 0) revert ZeroBalance();\\n                _updateFor(_gauge);\\n\\n                poolVote[_tokenId].push(_pool);\\n\\n                weights[_pool] += _poolWeight;\\n                votes[_tokenId][_pool] += _poolWeight;\\n                IReward(gaugeToFees[_gauge])._deposit(_poolWeight, _tokenId);\\n                IReward(gaugeToBribe[_gauge])._deposit(_poolWeight, _tokenId);\\n                _usedWeight += _poolWeight;\\n                _totalWeight += _poolWeight;\\n                emit Voted(\\n                    _msgSender(),\\n                    _pool,\\n                    _tokenId,\\n                    _poolWeight,\\n                    weights[_pool],\\n                    block.timestamp\\n                );\\n            }\\n        }\\n        if (_usedWeight > 0) IVotingEscrow(ve).voting(_tokenId, true);\\n        totalWeight += _totalWeight;\\n        usedWeights[_tokenId] = _usedWeight;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function vote(\\n        uint256 _tokenId,\\n        address[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external onlyNewEpoch(_tokenId) nonReentrant {\\n        address _sender = _msgSender();\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(_sender, _tokenId))\\n            revert NotApprovedOrOwner();\\n        if (_poolVote.length != _weights.length) revert UnequalLengths();\\n        if (_poolVote.length > maxVotingNum) revert TooManyPools();\\n        if (IVotingEscrow(ve).deactivated(_tokenId))\\n            revert InactiveManagedNFT();\\n        uint256 _timestamp = block.timestamp;\\n        if (\\n            (_timestamp > ProtocolTimeLibrary.epochVoteEnd(_timestamp)) &&\\n            !isWhitelistedNFT[_tokenId]\\n        ) revert NotWhitelistedNFT();\\n        lastVoted[_tokenId] = _timestamp;\\n        uint256 _weight = IVotingEscrow(ve).balanceOfNFT(_tokenId);\\n        _vote(_tokenId, _weight, _poolVote, _weights);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function depositManaged(\\n        uint256 _tokenId,\\n        uint256 _mTokenId\\n    ) external nonReentrant onlyNewEpoch(_tokenId) {\\n        address _sender = _msgSender();\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(_sender, _tokenId))\\n            revert NotApprovedOrOwner();\\n        if (IVotingEscrow(ve).deactivated(_mTokenId))\\n            revert InactiveManagedNFT();\\n        uint256 _timestamp = block.timestamp;\\n        if (_timestamp > ProtocolTimeLibrary.epochVoteEnd(_timestamp))\\n            revert SpecialVotingWindow();\\n        lastVoted[_tokenId] = _timestamp;\\n        IVotingEscrow(ve).depositManaged(_tokenId, _mTokenId);\\n        uint256 _weight = IVotingEscrow(ve).balanceOfNFTAt(\\n            _mTokenId,\\n            block.timestamp\\n        );\\n        _poke(_mTokenId, _weight);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function withdrawManaged(\\n        uint256 _tokenId\\n    ) external nonReentrant onlyNewEpoch(_tokenId) {\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(_msgSender(), _tokenId))\\n            revert NotApprovedOrOwner();\\n        uint256 _mTokenId = IVotingEscrow(ve).idToManaged(_tokenId);\\n        IVotingEscrow(ve).withdrawManaged(_tokenId);\\n        // If the NORMAL veNFT was the last tokenId locked into _mTokenId, reset vote as there is\\n        // no longer voting power available to the _mTokenId.  Otherwise, updating voting power to accurately\\n        // reflect the withdrawn voting power.\\n        uint256 _weight = IVotingEscrow(ve).balanceOfNFTAt(\\n            _mTokenId,\\n            block.timestamp\\n        );\\n        if (_weight == 0) {\\n            _reset(_mTokenId);\\n            // clear out lastVoted to allow re-voting in the current epoch\\n            delete lastVoted[_mTokenId];\\n        } else {\\n            _poke(_mTokenId, _weight);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function whitelistToken(address _token, bool _bool) external {\\n        if (_msgSender() != governor) revert NotGovernor();\\n        _whitelistToken(_token, _bool);\\n    }\\n\\n    function _whitelistToken(address _token, bool _bool) internal {\\n        isWhitelistedToken[_token] = _bool;\\n        emit WhitelistToken(_msgSender(), _token, _bool);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function whitelistNFT(uint256 _tokenId, bool _bool) external {\\n        address _sender = _msgSender();\\n        if (_sender != governor) revert NotGovernor();\\n        isWhitelistedNFT[_tokenId] = _bool;\\n        emit WhitelistNFT(_sender, _tokenId, _bool);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function createGauge(\\n        address _poolFactory,\\n        address _pool\\n    ) external nonReentrant returns (address) {\\n        address sender = _msgSender();\\n        if (\\n            !IFactoryRegistry(factoryRegistry).isPoolFactoryApproved(\\n                _poolFactory\\n            )\\n        ) revert FactoryPathNotApproved();\\n        if (gauges[_pool] != address(0)) revert GaugeExists();\\n\\n        (address votingRewardsFactory, address gaugeFactory) = IFactoryRegistry(\\n            factoryRegistry\\n        ).factoriesToPoolFactory(_poolFactory);\\n        address[] memory rewards = new address[](2);\\n        bool isPool = IPoolFactory(_poolFactory).isPool(_pool);\\n        {\\n            // stack too deep\\n            address token0;\\n            address token1;\\n            if (isPool) {\\n                token0 = IPool(_pool).token0();\\n                token1 = IPool(_pool).token1();\\n                rewards[0] = token0;\\n                rewards[1] = token1;\\n            }\\n\\n            if (sender != governor) {\\n                if (!isPool) revert NotAPool();\\n                if (!isWhitelistedToken[token0] || !isWhitelistedToken[token1])\\n                    revert NotWhitelistedToken();\\n            }\\n        }\\n\\n        (\\n            address _feeVotingReward,\\n            address _bribeVotingReward\\n        ) = IVotingRewardsFactory(votingRewardsFactory).createRewards(\\n                forwarder,\\n                rewards\\n            );\\n\\n        address _gauge = IGaugeFactory(gaugeFactory).createGauge(\\n            forwarder,\\n            _pool,\\n            _feeVotingReward,\\n            rewardToken,\\n            isPool\\n        );\\n\\n        gaugeToFees[_gauge] = _feeVotingReward;\\n        gaugeToBribe[_gauge] = _bribeVotingReward;\\n        gauges[_pool] = _gauge;\\n        poolForGauge[_gauge] = _pool;\\n        isGauge[_gauge] = true;\\n        isAlive[_gauge] = true;\\n        _updateFor(_gauge);\\n        pools.push(_pool);\\n\\n        emit GaugeCreated(\\n            _poolFactory,\\n            votingRewardsFactory,\\n            gaugeFactory,\\n            _pool,\\n            _bribeVotingReward,\\n            _feeVotingReward,\\n            _gauge,\\n            sender\\n        );\\n        return _gauge;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function killGauge(address _gauge) external {\\n        if (_msgSender() != emergencyCouncil) revert NotEmergencyCouncil();\\n        if (!isAlive[_gauge]) revert GaugeAlreadyKilled();\\n        // Return claimable back to splitter\\n        uint256 _claimable = claimable[_gauge];\\n        if (_claimable > 0) {\\n            IERC20(rewardToken).safeTransfer(splitter, _claimable);\\n            delete claimable[_gauge];\\n        }\\n        isAlive[_gauge] = false;\\n        emit GaugeKilled(_gauge);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function reviveGauge(address _gauge) external {\\n        if (_msgSender() != emergencyCouncil) revert NotEmergencyCouncil();\\n        if (isAlive[_gauge]) revert GaugeAlreadyRevived();\\n        isAlive[_gauge] = true;\\n        emit GaugeRevived(_gauge);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function length() external view returns (uint256) {\\n        return pools.length;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function notifyRewardAmount(uint256 _amount) external {\\n        address sender = _msgSender();\\n        if (sender != splitter) revert NotSplitter();\\n        IERC20(rewardToken).safeTransferFrom(sender, address(this), _amount); // transfer the distribution in\\n        uint256 _ratio = (_amount * 1e18) / Math.max(totalWeight, 1); // 1e18 adjustment is removed during claim\\n        if (_ratio > 0) {\\n            index += _ratio;\\n        }\\n        emit NotifyReward(sender, rewardToken, _amount);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function updateFor(address[] memory _gauges) external {\\n        uint256 _length = _gauges.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            _updateFor(_gauges[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function updateFor(uint256 start, uint256 end) external {\\n        for (uint256 i = start; i < end; i++) {\\n            _updateFor(gauges[pools[i]]);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function updateFor(address _gauge) external {\\n        _updateFor(_gauge);\\n    }\\n\\n    function _updateFor(address _gauge) internal {\\n        address _pool = poolForGauge[_gauge];\\n        uint256 _supplied = weights[_pool];\\n        if (_supplied > 0) {\\n            uint256 _supplyIndex = supplyIndex[_gauge];\\n            uint256 _index = index; // get global index0 for accumulated distribution\\n            supplyIndex[_gauge] = _index; // update _gauge current position to global position\\n            uint256 _delta = _index - _supplyIndex; // see if there is any difference that need to be accrued\\n            if (_delta > 0) {\\n                uint256 _share = (_supplied * _delta) / 1e18; // add accrued difference for each supplied token\\n                if (isAlive[_gauge]) {\\n                    claimable[_gauge] += _share;\\n                } else {\\n                    IERC20(rewardToken).safeTransfer(splitter, _share); // send rewards back to Splitter so they're not stuck in Voter\\n                }\\n            }\\n        } else {\\n            supplyIndex[_gauge] = index; // new users are set to the default global state\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function claimRewards(address[] memory _gauges) external {\\n        uint256 _length = _gauges.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IGauge(_gauges[i]).getReward(_msgSender());\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external {\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(_msgSender(), _tokenId))\\n            revert NotApprovedOrOwner();\\n        uint256 _length = _bribes.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IReward(_bribes[i]).getReward(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function claimFees(\\n        address[] memory _fees,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external {\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(_msgSender(), _tokenId))\\n            revert NotApprovedOrOwner();\\n        uint256 _length = _fees.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IReward(_fees[i]).getReward(_tokenId, _tokens[i]);\\n        }\\n    }\\n\\n    function _distribute(address _gauge) internal {\\n        _updateFor(_gauge); // should set claimable to 0 if killed\\n        uint256 _claimable = claimable[_gauge];\\n        if (_claimable > IGauge(_gauge).left() && _claimable > DURATION) {\\n            claimable[_gauge] = 0;\\n            IERC20(rewardToken).safeApprove(_gauge, _claimable);\\n            IGauge(_gauge).notifyRewardAmount(_claimable);\\n            IERC20(rewardToken).safeApprove(_gauge, 0);\\n            emit DistributeReward(_msgSender(), _gauge, _claimable);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function distribute(uint256 _start, uint256 _finish) external nonReentrant {\\n        ISplitter(splitter).updatePeriod();\\n        for (uint256 x = _start; x < _finish; x++) {\\n            _distribute(gauges[pools[x]]);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function distribute(address[] memory _gauges) external nonReentrant {\\n        ISplitter(splitter).updatePeriod();\\n        uint256 _length = _gauges.length;\\n        for (uint256 x = 0; x < _length; x++) {\\n            _distribute(_gauges[x]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3cf002cc34a8c9202e85a241bb5150a13761aadf14cc57a779f1fcd73733e34\",\"license\":\"BUSL-1.1\"},\"contracts/governance/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/// Modified IVotes interface for tokenId based voting\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 indexed fromDelegate,\\n        uint256 indexed toDelegate\\n    );\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @dev Returns the amount of votes that `tokenId` had at a specific moment in the past.\\n     *      If the account passed in is not the owner, returns 0.\\n     */\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `tokenId` has chosen. Can never be equal to the delegator's `tokenId`.\\n     *      Returns 0 if not delegated.\\n     */\\n    function delegates(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from `delegator` to `delegatee`. Signer must own `delegator`.\\n     */\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9d443ede6b412305137804890806312f30351178fd3781b3a9417bfd3eea558c\",\"license\":\"MIT\"},\"contracts/interfaces/IGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IGauge {\\n    error NotAlive();\\n    error NotAuthorized();\\n    error NotVoter();\\n    error NotTeam();\\n    error RewardRateTooHigh();\\n    error ZeroAmount();\\n    error ZeroRewardRate();\\n\\n    event Deposit(address indexed from, address indexed to, uint256 amount);\\n    event Withdraw(address indexed from, uint256 amount);\\n    event NotifyReward(address indexed from, uint256 amount);\\n    event ClaimFees(address indexed from, uint256 claimed0, uint256 claimed1);\\n    event ClaimRewards(address indexed from, uint256 amount);\\n\\n    /// @notice Address of the pool LP token which is deposited (staked) for rewards\\n    function stakingToken() external view returns (address);\\n\\n    /// @notice Address of the token rewarded to stakers\\n    function rewardToken() external view returns (address);\\n\\n    /// @notice Address of the FeesVotingReward contract linked to the gauge\\n    function feesVotingReward() external view returns (address);\\n\\n    /// @notice Address of Protocol Voter\\n    function voter() external view returns (address);\\n\\n    /// @notice Address of Protocol Voting Escrow\\n    function ve() external view returns (address);\\n\\n    /// @notice Returns if gauge is linked to a legitimate Protocol pool\\n    function isPool() external view returns (bool);\\n\\n    /// @notice Timestamp end of current rewards period\\n    function periodFinish() external view returns (uint256);\\n\\n    /// @notice Current reward rate of rewardToken to distribute per second\\n    function rewardRate() external view returns (uint256);\\n\\n    /// @notice Most recent timestamp contract has updated state\\n    function lastUpdateTime() external view returns (uint256);\\n\\n    /// @notice Most recent stored value of rewardPerToken\\n    function rewardPerTokenStored() external view returns (uint256);\\n\\n    /// @notice Amount of stakingToken deposited for rewards\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Get the amount of stakingToken deposited by an account\\n    function balanceOf(address) external view returns (uint256);\\n\\n    /// @notice Cached rewardPerTokenStored for an account based on their most recent action\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n\\n    /// @notice Cached amount of rewardToken earned for an account\\n    function rewards(address) external view returns (uint256);\\n\\n    /// @notice View to see the rewardRate given the timestamp of the start of the epoch\\n    function rewardRateByEpoch(uint256) external view returns (uint256);\\n\\n    /// @notice Cached amount of fees generated from the Pool linked to the Gauge of token0\\n    function fees0() external view returns (uint256);\\n\\n    /// @notice Cached amount of fees generated from the Pool linked to the Gauge of token1\\n    function fees1() external view returns (uint256);\\n\\n    /// @notice Get the current reward rate per unit of stakingToken deposited\\n    function rewardPerToken() external view returns (uint256 _rewardPerToken);\\n\\n    /// @notice Returns the last time the reward was modified or periodFinish if the reward has ended\\n    function lastTimeRewardApplicable() external view returns (uint256 _time);\\n\\n    /// @notice Returns accrued balance to date from last claim / first deposit.\\n    function earned(address _account) external view returns (uint256 _earned);\\n\\n    /// @notice Total amount of rewardToken to distribute for the current rewards period\\n    function left() external view returns (uint256 _left);\\n\\n    /// @notice Retrieve rewards for an address.\\n    /// @dev Throws if not called by same address or voter.\\n    /// @param _account .\\n    function getReward(address _account) external;\\n\\n    /// @notice Deposit LP tokens into gauge for msg.sender\\n    /// @param _amount .\\n    function deposit(uint256 _amount) external;\\n\\n    /// @notice Deposit LP tokens into gauge for any user\\n    /// @param _amount .\\n    /// @param _recipient Recipient to give balance to\\n    function deposit(uint256 _amount, address _recipient) external;\\n\\n    /// @notice Withdraw LP tokens for user\\n    /// @param _amount .\\n    function withdraw(uint256 _amount) external;\\n\\n    /// @dev Notifies gauge of gauge rewards. Assumes gauge reward tokens is 18 decimals.\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\n    function notifyRewardAmount(uint256 amount) external;\\n\\n    /// @dev Notifies gauge of gauge rewards without distributing its fees.\\n    ///      Assumes gauge reward tokens is 18 decimals.\\n    ///      If not 18 decimals, rewardRate may have rounding issues.\\n    function notifyRewardWithoutClaim(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x5bc4e66bae475f9b52fc957e200e10e4c6183bd1fb0b1e6607565a8b44574dd1\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IPool {\\n    error DepositsNotEqual();\\n    error BelowMinimumK();\\n    error FactoryAlreadySet();\\n    error InsufficientLiquidity();\\n    error InsufficientLiquidityMinted();\\n    error InsufficientLiquidityBurned();\\n    error InsufficientOutputAmount();\\n    error InsufficientInputAmount();\\n    error IsPaused();\\n    error InvalidTo();\\n    error K();\\n    error NotEmergencyCouncil();\\n\\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out\\n    );\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n    event Claim(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    // Struct to capture time period observations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 reserve0Cumulative;\\n        uint256 reserve1Cumulative;\\n    }\\n\\n    /// @notice Returns the decimal (dec), reserves (r), stable (st), and tokens (t) of token0 and token1\\n    function metadata()\\n        external\\n        view\\n        returns (\\n            uint256 dec0,\\n            uint256 dec1,\\n            uint256 r0,\\n            uint256 r1,\\n            bool st,\\n            address t0,\\n            address t1\\n        );\\n\\n    /// @notice Claim accumulated but unclaimed fees (claimable0 and claimable1)\\n    function claimFees() external returns (uint256, uint256);\\n\\n    /// @notice Returns [token0, token1]\\n    function tokens() external view returns (address, address);\\n\\n    /// @notice Address of token in the pool with the lower address value\\n    function token0() external view returns (address);\\n\\n    /// @notice Address of token in the pool with the higher address value\\n    function token1() external view returns (address);\\n\\n    /// @notice Address of linked PoolFees.sol\\n    function poolFees() external view returns (address);\\n\\n    /// @notice Address of PoolFactory that created this contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Capture oracle reading every 30 minutes (1800 seconds)\\n    function periodSize() external view returns (uint256);\\n\\n    /// @notice Amount of token0 in pool\\n    function reserve0() external view returns (uint256);\\n\\n    /// @notice Amount of token1 in pool\\n    function reserve1() external view returns (uint256);\\n\\n    /// @notice Timestamp of last update to pool\\n    function blockTimestampLast() external view returns (uint256);\\n\\n    /// @notice Cumulative of reserve0 factoring in time elapsed\\n    function reserve0CumulativeLast() external view returns (uint256);\\n\\n    /// @notice Cumulative of reserve1 factoring in time elapsed\\n    function reserve1CumulativeLast() external view returns (uint256);\\n\\n    /// @notice Accumulated fees of token0 (global)\\n    function index0() external view returns (uint256);\\n\\n    /// @notice Accumulated fees of token1 (global)\\n    function index1() external view returns (uint256);\\n\\n    /// @notice Get an LP's relative index0 to index0\\n    function supplyIndex0(address) external view returns (uint256);\\n\\n    /// @notice Get an LP's relative index1 to index1\\n    function supplyIndex1(address) external view returns (uint256);\\n\\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token0 for an LP\\n    function claimable0(address) external view returns (uint256);\\n\\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token1 for an LP\\n    function claimable1(address) external view returns (uint256);\\n\\n    /// @notice Returns the value of K in the Pool, based on its reserves.\\n    function getK() external returns (uint256);\\n\\n    /// @notice Set pool name\\n    ///         Only callable by Voter.emergencyCouncil()\\n    /// @param __name String of new name\\n    function setName(string calldata __name) external;\\n\\n    /// @notice Set pool symbol\\n    ///         Only callable by Voter.emergencyCouncil()\\n    /// @param __symbol String of new symbol\\n    function setSymbol(string calldata __symbol) external;\\n\\n    /// @notice Get the number of observations recorded\\n    function observationLength() external view returns (uint256);\\n\\n    /// @notice Get the value of the most recent observation\\n    function lastObservation() external view returns (Observation memory);\\n\\n    /// @notice True if pool is stable, false if volatile\\n    function stable() external view returns (bool);\\n\\n    /// @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices()\\n        external\\n        view\\n        returns (\\n            uint256 reserve0Cumulative,\\n            uint256 reserve1Cumulative,\\n            uint256 blockTimestamp\\n        );\\n\\n    /// @notice Provides twap price with user configured granularity, up to the full window size\\n    /// @param tokenIn .\\n    /// @param amountIn .\\n    /// @param granularity .\\n    /// @return amountOut .\\n    function quote(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 granularity\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns a memory set of TWAP prices\\n    ///         Same as calling sample(tokenIn, amountIn, points, 1)\\n    /// @param tokenIn .\\n    /// @param amountIn .\\n    /// @param points Number of points to return\\n    /// @return Array of TWAP prices\\n    function prices(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 points\\n    ) external view returns (uint256[] memory);\\n\\n    /// @notice Same as prices with with an additional window argument.\\n    ///         Window = 2 means 2 * 30min (or 1 hr) between observations\\n    /// @param tokenIn .\\n    /// @param amountIn .\\n    /// @param points .\\n    /// @param window .\\n    /// @return Array of TWAP prices\\n    function sample(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 points,\\n        uint256 window\\n    ) external view returns (uint256[] memory);\\n\\n    /// @notice This low-level function should be called from a contract which performs important safety checks\\n    /// @param amount0Out   Amount of token0 to send to `to`\\n    /// @param amount1Out   Amount of token1 to send to `to`\\n    /// @param to           Address to receive the swapped output\\n    /// @param data         Additional calldata for flashloans\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice This low-level function should be called from a contract which performs important safety checks\\n    ///         standard uniswap v2 implementation\\n    /// @param to Address to receive token0 and token1 from burning the pool token\\n    /// @return amount0 Amount of token0 returned\\n    /// @return amount1 Amount of token1 returned\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice This low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\\n    ///         standard uniswap v2 implementation\\n    /// @param to           Address to receive the minted LP token\\n    /// @return liquidity   Amount of LP token minted\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    /// @notice Update reserves and, on the first call per block, price accumulators\\n    /// @return _reserve0 .\\n    /// @return _reserve1 .\\n    /// @return _blockTimestampLast .\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint256 _reserve0,\\n            uint256 _reserve1,\\n            uint256 _blockTimestampLast\\n        );\\n\\n    /// @notice Get the amount of tokenOut given the amount of tokenIn\\n    /// @param amountIn Amount of token in\\n    /// @param tokenIn  Address of token\\n    /// @return Amount out\\n    function getAmountOut(\\n        uint256 amountIn,\\n        address tokenIn\\n    ) external view returns (uint256);\\n\\n    /// @notice Force balances to match reserves\\n    /// @param to Address to receive any skimmed rewards\\n    function skim(address to) external;\\n\\n    /// @notice Force reserves to match balances\\n    function sync() external;\\n\\n    /// @notice Called on pool creation by PoolFactory\\n    /// @param _token0 Address of token0\\n    /// @param _token1 Address of token1\\n    /// @param _stable True if stable, false if volatile\\n    function initialize(\\n        address _token0,\\n        address _token1,\\n        bool _stable\\n    ) external;\\n}\\n\",\"keccak256\":\"0xab6106cba22c97814b1d929daac67a6d3f261ee38fdc8edb040892ef4daae752\",\"license\":\"MIT\"},\"contracts/interfaces/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IReward {\\n    error InvalidReward();\\n    error NotAuthorized();\\n    error NotGauge();\\n    error NotEscrowToken();\\n    error NotSingleToken();\\n    error NotVotingEscrow();\\n    error NotWhitelisted();\\n    error ZeroAmount();\\n\\n    event Deposit(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 indexed epoch,\\n        uint256 amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint256 timestamp;\\n        uint256 supply;\\n    }\\n\\n    /// @notice Epoch duration constant (7 days)\\n    function duration() external pure returns (uint256);\\n\\n    /// @notice Address of Voter.sol\\n    function voter() external view returns (address);\\n\\n    /// @notice Address of VotingEscrow.sol\\n    function ve() external view returns (address);\\n\\n    /// @dev Address which has permission to externally call _deposit() & _withdraw()\\n    function authorized() external view returns (address);\\n\\n    /// @notice Total amount currently deposited via _deposit()\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Current amount deposited by tokenId\\n    function balanceOf(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice Amount of tokens to reward depositors for a given epoch\\n    /// @param token Address of token to reward\\n    /// @param epochStart Startime of rewards epoch\\n    /// @return Amount of token\\n    function tokenRewardsPerEpoch(\\n        address token,\\n        uint256 epochStart\\n    ) external view returns (uint256);\\n\\n    /// @notice Most recent timestamp a veNFT has claimed their rewards\\n    /// @param  token Address of token rewarded\\n    /// @param tokenId veNFT unique identifier\\n    /// @return Timestamp\\n    function lastEarn(\\n        address token,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n\\n    /// @notice True if a token is or has been an active reward token, else false\\n    function isReward(address token) external view returns (bool);\\n\\n    /// @notice The number of checkpoints for each tokenId deposited\\n    function numCheckpoints(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice The total number of checkpoints\\n    function supplyNumCheckpoints() external view returns (uint256);\\n\\n    /// @notice Deposit an amount into the rewards contract to earn future rewards associated to a veNFT\\n    /// @dev Internal notation used as only callable internally by `authorized`.\\n    /// @param amount   Amount deposited for the veNFT\\n    /// @param tokenId  Unique identifier of the veNFT\\n    function _deposit(uint256 amount, uint256 tokenId) external;\\n\\n    /// @notice Withdraw an amount from the rewards contract associated to a veNFT\\n    /// @dev Internal notation used as only callable internally by `authorized`.\\n    /// @param amount   Amount deposited for the veNFT\\n    /// @param tokenId  Unique identifier of the veNFT\\n    function _withdraw(uint256 amount, uint256 tokenId) external;\\n\\n    /// @notice Claim the rewards earned by a veNFT staker\\n    /// @param tokenId  Unique identifier of the veNFT\\n    /// @param tokens   Array of tokens to claim rewards of\\n    function getReward(uint256 tokenId, address[] memory tokens) external;\\n\\n    /// @notice Add rewards for stakers to earn\\n    /// @param token    Address of token to reward\\n    /// @param amount   Amount of token to transfer to rewards\\n    function notifyRewardAmount(address token, uint256 amount) external;\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param tokenId      The token of the NFT to check\\n    /// @param timestamp    The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function getPriorBalanceIndex(\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @notice Determine the prior index of supply staked by of a timestamp\\n    /// @dev Timestamp must be <= current timestamp\\n    /// @param timestamp The timestamp to get the index at\\n    /// @return Index of supply checkpoint\\n    function getPriorSupplyIndex(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @notice Get number of rewards tokens\\n    function rewardsListLength() external view returns (uint256);\\n\\n    /// @notice Calculate how much in rewards are earned for a specific token and veNFT\\n    /// @param token Address of token to fetch rewards of\\n    /// @param tokenId Unique identifier of the veNFT\\n    /// @return Amount of token earned in rewards\\n    function earned(\\n        address token,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2daaf8189e7ab1050182908664ab0fb7607838ec59c02511febd73584db3bb8\",\"license\":\"MIT\"},\"contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface ISplitter {\\n    error AlreadyNudged();\\n    error NotEpochGovernor();\\n\\n    event Nudge(uint256 indexed _period, uint256 _oldRate, uint256 _newRate);\\n\\n    /// @notice Allows epoch governor to modify the fee splitter by at most 1 basis\\n    ///         tick per epoch on a scale to a maximum of 100 or to a minimum of 1.\\n    /// @dev Throws if not epoch governor.\\n    ///      Throws if already nudged this epoch.\\n    ///      Throws if nudging above maximum rate.\\n    ///      Throws if nudging below minimum rate.\\n    ///      This contract is coupled to EpochGovernor as it requires three option\\n    ///      simple majority voting.\\n    function nudge() external;\\n\\n    /// @notice Processes emissions and rebases. Callable once per epoch.\\n    /// @return _period Start of current epoch.\\n    function updatePeriod() external returns (uint256 _period);\\n\\n    /// @notice Timestamp of start of epoch that updatePeriod was last called in\\n    function activePeriod() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xeed68ad6fc141bd7eaba92b465b716d4f8ea7db3ae2edc534b2fc2878cc08c54\",\"license\":\"MIT\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IVoter {\\n    error AlreadyVotedOrDeposited();\\n    error DistributeWindow();\\n    error FactoryPathNotApproved();\\n    error GaugeAlreadyKilled();\\n    error GaugeAlreadyRevived();\\n    error GaugeExists();\\n    error GaugeDoesNotExist(address _pool);\\n    error GaugeNotAlive(address _gauge);\\n    error InactiveManagedNFT();\\n    error MaximumVotingNumberTooLow();\\n    error NonZeroVotes();\\n    error NotAPool();\\n    error NotApprovedOrOwner();\\n    error NotGovernor();\\n    error NotEmergencyCouncil();\\n    error NotSplitter();\\n    error NotWhitelistedNFT();\\n    error NotWhitelistedToken();\\n    error SameValue();\\n    error SpecialVotingWindow();\\n    error TooManyPools();\\n    error UnequalLengths();\\n    error ZeroBalance();\\n    error ZeroAddress();\\n\\n    event GaugeCreated(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory,\\n        address pool,\\n        address bribeVotingReward,\\n        address feeVotingReward,\\n        address gauge,\\n        address creator\\n    );\\n    event GaugeKilled(address indexed gauge);\\n    event GaugeRevived(address indexed gauge);\\n    event Voted(\\n        address indexed voter,\\n        address indexed pool,\\n        uint256 indexed tokenId,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event Abstained(\\n        address indexed voter,\\n        address indexed pool,\\n        uint256 indexed tokenId,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event NotifyReward(\\n        address indexed sender,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed gauge,\\n        uint256 amount\\n    );\\n    event WhitelistToken(\\n        address indexed whitelister,\\n        address indexed token,\\n        bool indexed _bool\\n    );\\n    event WhitelistNFT(\\n        address indexed whitelister,\\n        uint256 indexed tokenId,\\n        bool indexed _bool\\n    );\\n\\n    /// @notice Store trusted forwarder address to pass into factories\\n    function forwarder() external view returns (address);\\n\\n    /// @notice The ve token that governs these contracts\\n    function ve() external view returns (address);\\n\\n    /// @notice Factory registry for valid pool / gauge / rewards factories\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of a splitter contract\\n    function splitter() external view returns (address);\\n\\n    /// @notice Standard OZ IGovernor using ve for vote weights.\\n    function governor() external view returns (address);\\n\\n    /// @notice Custom Epoch Governor using ve for vote weights.\\n    function epochGovernor() external view returns (address);\\n\\n    /// @notice credibly neutral party similar to Curve's Emergency DAO\\n    function emergencyCouncil() external view returns (address);\\n\\n    /// @dev Total Voting Weights\\n    function totalWeight() external view returns (uint256);\\n\\n    /// @dev Most number of pools one voter can vote for at once\\n    function maxVotingNum() external view returns (uint256);\\n\\n    // mappings\\n    /// @dev Pool => Gauge\\n    function gauges(address pool) external view returns (address);\\n\\n    /// @dev Gauge => Pool\\n    function poolForGauge(address gauge) external view returns (address);\\n\\n    /// @dev Gauge => Fees Voting Reward\\n    function gaugeToFees(address gauge) external view returns (address);\\n\\n    /// @dev Gauge => Bribes Voting Reward\\n    function gaugeToBribe(address gauge) external view returns (address);\\n\\n    /// @dev Pool => Weights\\n    function weights(address pool) external view returns (uint256);\\n\\n    /// @dev NFT => Pool => Votes\\n    function votes(\\n        uint256 tokenId,\\n        address pool\\n    ) external view returns (uint256);\\n\\n    /// @dev NFT => Total voting weight of NFT\\n    function usedWeights(uint256 tokenId) external view returns (uint256);\\n\\n    /// @dev Nft => Timestamp of last vote (ensures single vote per epoch)\\n    function lastVoted(uint256 tokenId) external view returns (uint256);\\n\\n    /// @dev Address => Gauge\\n    function isGauge(address) external view returns (bool);\\n\\n    /// @dev Token => Whitelisted status\\n    function isWhitelistedToken(address token) external view returns (bool);\\n\\n    /// @dev TokenId => Whitelisted status\\n    function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\n\\n    /// @dev Gauge => Liveness status\\n    function isAlive(address gauge) external view returns (bool);\\n\\n    /// @dev Gauge => Amount claimable\\n    function claimable(address gauge) external view returns (uint256);\\n\\n    /// @notice Number of pools with a Gauge\\n    function length() external view returns (uint256);\\n\\n    /// @notice Called by Splitter to distribute weekly emissions rewards for disbursement amongst gauges.\\n    /// @dev Assumes totalWeight != 0 (Will never be zero as long as users are voting).\\n    ///      Throws if not called by splitter.\\n    /// @param _amount Amount of rewards to distribute.\\n    function notifyRewardAmount(uint256 _amount) external;\\n\\n    /// @dev Utility to distribute to gauges of pools in range _start to _finish.\\n    /// @param _start   Starting index of gauges to distribute to.\\n    /// @param _finish  Ending index of gauges to distribute to.\\n    function distribute(uint256 _start, uint256 _finish) external;\\n\\n    /// @dev Utility to distribute to gauges of pools in array.\\n    /// @param _gauges Array of gauges to distribute to.\\n    function distribute(address[] memory _gauges) external;\\n\\n    /// @notice Called by users to update voting balances in voting rewards contracts.\\n    /// @param _tokenId Id of veNFT whose balance you wish to update.\\n    function poke(uint256 _tokenId) external;\\n\\n    /// @notice Called by users to vote for pools. Votes distributed proportionally based on weights.\\n    ///         Can only vote or deposit into a managed NFT once per epoch.\\n    ///         Can only vote for gauges that have not been killed.\\n    /// @dev Weights are distributed proportional to the sum of the weights in the array.\\n    ///      Throws if length of _poolVote and _weights do not match.\\n    /// @param _tokenId     Id of veNFT you are voting with.\\n    /// @param _poolVote    Array of pools you are voting for.\\n    /// @param _weights     Weights of pools.\\n    function vote(\\n        uint256 _tokenId,\\n        address[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external;\\n\\n    /// @notice Called by users to reset voting state. Required if you wish to make changes to\\n    ///         veNFT state (e.g. merge, split, deposit into managed etc).\\n    ///         Cannot reset in the same epoch that you voted in.\\n    ///         Can vote or deposit into a managed NFT again after reset.\\n    /// @param _tokenId Id of veNFT you are reseting.\\n    function reset(uint256 _tokenId) external;\\n\\n    /// @notice Called by users to deposit into a managed NFT.\\n    ///         Can only vote or deposit into a managed NFT once per epoch.\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    /// @dev Throws if not approved or owner.\\n    ///      Throws if managed NFT is inactive.\\n    ///      Throws if depositing within privileged window (one hour prior to epoch flip).\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Called by users to withdraw from a managed NFT.\\n    ///         Cannot do it in the same epoch that you deposited into a managed NFT.\\n    ///         Can vote or deposit into a managed NFT again after withdrawing.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Claim emissions from gauges.\\n    /// @param _gauges Array of gauges to collect emissions from.\\n    function claimRewards(address[] memory _gauges) external;\\n\\n    /// @notice Claim bribes for a given NFT.\\n    /// @dev Utility to help batch bribe claims.\\n    /// @param _bribes  Array of BribeVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as bribes.\\n    /// @param _tokenId Id of veNFT that you wish to claim bribes for.\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Claim fees for a given NFT.\\n    /// @dev Utility to help batch fee claims.\\n    /// @param _fees    Array of FeesVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as fees.\\n    /// @param _tokenId Id of veNFT that you wish to claim fees for.\\n    function claimFees(\\n        address[] memory _fees,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Set new governor.\\n    /// @dev Throws if not called by governor.\\n    /// @param _governor .\\n    function setGovernor(address _governor) external;\\n\\n    /// @notice Set new epoch based governor.\\n    /// @dev Throws if not called by governor.\\n    /// @param _epochGovernor .\\n    function setEpochGovernor(address _epochGovernor) external;\\n\\n    /// @notice Set new emergency council.\\n    /// @dev Throws if not called by emergency council.\\n    /// @param _emergencyCouncil .\\n    function setEmergencyCouncil(address _emergencyCouncil) external;\\n\\n    /// @notice Set maximum number of gauges that can be voted for.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _maxVotingNum is too low.\\n    ///      Throws if the values are the same.\\n    /// @param _maxVotingNum .\\n    function setMaxVotingNum(uint256 _maxVotingNum) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token for use in bribes.\\n    /// @dev Throws if not called by governor.\\n    /// @param _token .\\n    /// @param _bool .\\n    function whitelistToken(address _token, bool _bool) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if already whitelisted.\\n    /// @param _tokenId .\\n    /// @param _bool .\\n    function whitelistNFT(uint256 _tokenId, bool _bool) external;\\n\\n    /// @notice Create a new gauge (unpermissioned).\\n    /// @dev Governor can create a new gauge for a pool with any address.\\n    /// @param _poolFactory .\\n    /// @param _pool .\\n    function createGauge(\\n        address _poolFactory,\\n        address _pool\\n    ) external returns (address);\\n\\n    /// @notice Kills a gauge. The gauge will not receive any new emissions and cannot be deposited into.\\n    ///         Can still withdraw from gauge.\\n    /// @dev Throws if not called by emergency council.\\n    ///      Throws if gauge already killed.\\n    /// @param _gauge .\\n    function killGauge(address _gauge) external;\\n\\n    /// @notice Revives a killed gauge. Gauge will can receive emissions and deposits again.\\n    /// @dev Throws if not called by emergency council.\\n    ///      Throws if gauge is not killed.\\n    /// @param _gauge .\\n    function reviveGauge(address _gauge) external;\\n\\n    /// @dev Update claims to emissions for an array of gauges.\\n    /// @param _gauges Array of gauges to update emissions for.\\n    function updateFor(address[] memory _gauges) external;\\n\\n    /// @dev Update claims to emissions for gauges based on their pool id as stored in Voter.\\n    /// @param _start   Starting index of pools.\\n    /// @param _end     Ending index of pools.\\n    function updateFor(uint256 _start, uint256 _end) external;\\n\\n    /// @dev Update claims to emissions for single gauge\\n    /// @param _gauge .\\n    function updateFor(address _gauge) external;\\n}\\n\",\"keccak256\":\"0x2e6fbbc743a0d76d0ecb2041eabf9a5f5b0375f34af34f3d03f4c0e61a18734d\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC165, IERC721, IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC6372} from \\\"@openzeppelin/contracts/interfaces/IERC6372.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IVotes} from \\\"../governance/IVotes.sol\\\";\\n\\ninterface IVotingEscrow is IVotes, IERC4906, IERC6372, IERC721Metadata {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n        bool isPermanent;\\n    }\\n\\n    struct UserPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanent;\\n    }\\n\\n    struct GlobalPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanentLockBalance;\\n    }\\n\\n    /// @notice A checkpoint for recorded delegated voting weights at a certain timestamp\\n    struct Checkpoint {\\n        uint256 fromTimestamp;\\n        address owner;\\n        uint256 delegatedBalance;\\n        uint256 delegatee;\\n    }\\n\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    /// @dev Different types of veNFTs:\\n    /// NORMAL  - typical veNFT\\n    /// LOCKED  - veNFT which is locked into a MANAGED veNFT\\n    /// MANAGED - veNFT which can accept the deposit of NORMAL veNFTs\\n    enum EscrowType {\\n        NORMAL,\\n        LOCKED,\\n        MANAGED\\n    }\\n\\n    error AlreadyVoted();\\n    error AmountTooBig();\\n    error ERC721ReceiverRejectedTokens();\\n    error ERC721TransferToNonERC721ReceiverImplementer();\\n    error InvalidNonce();\\n    error InvalidSignature();\\n    error InvalidSignatureS();\\n    error InvalidManagedNFTId();\\n    error LockDurationNotInFuture();\\n    error LockDurationTooLong();\\n    error LockExpired();\\n    error LockNotExpired();\\n    error NoLockFound();\\n    error NonExistentToken();\\n    error NotApprovedOrOwner();\\n    error NotDistributor();\\n    error NotEmergencyCouncilOrGovernor();\\n    error NotGovernor();\\n    error NotGovernorOrManager();\\n    error NotManagedNFT();\\n    error NotManagedOrNormalNFT();\\n    error NotLockedNFT();\\n    error NotNormalNFT();\\n    error NotPermanentLock();\\n    error NotOwner();\\n    error NotTeam();\\n    error NotVoter();\\n    error OwnershipChange();\\n    error PermanentLock();\\n    error SameAddress();\\n    error SameNFT();\\n    error SameState();\\n    error SplitNoOwner();\\n    error SplitNotAllowed();\\n    error SignatureExpired();\\n    error TooManyTokenIDs();\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error ZeroBalance();\\n    error NotGrantManager();\\n    error UnvestedGrantNFT();\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        DepositType indexed depositType,\\n        uint256 value,\\n        uint256 locktime,\\n        uint256 ts\\n    );\\n    event Withdraw(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        uint256 ts\\n    );\\n    event LockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event UnlockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event Supply(uint256 prevSupply, uint256 supply);\\n    event Merge(\\n        address indexed _sender,\\n        uint256 indexed _from,\\n        uint256 indexed _to,\\n        uint256 _amountFrom,\\n        uint256 _amountTo,\\n        uint256 _amountFinal,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event Split(\\n        uint256 indexed _from,\\n        uint256 indexed _tokenId1,\\n        uint256 indexed _tokenId2,\\n        address _sender,\\n        uint256 _splitAmount1,\\n        uint256 _splitAmount2,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event CreateManaged(\\n        address indexed _to,\\n        uint256 indexed _mTokenId,\\n        address indexed _from,\\n        address _lockedManagedReward,\\n        address _freeManagedReward\\n    );\\n    event DepositManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event WithdrawManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event SetAllowedManager(address indexed _allowedManager);\\n    event CreateGrant(\\n        uint256 indexed _tokenId,\\n        address _grantee,\\n        address _grantManager,\\n        uint256 _vestingEnd\\n    );\\n    event SetGrantManager(address indexed _grantManager);\\n\\n    // State variables\\n    /// @notice Address of Meta-tx Forwarder\\n    function forwarder() external view returns (address);\\n\\n    /// @notice Address of FactoryRegistry.sol\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of token used to create a veNFT\\n    function token() external view returns (address);\\n\\n    /// @notice Address of RewardsDistributor.sol\\n    function distributor() external view returns (address);\\n\\n    /// @notice Address of Voter.sol\\n    function voter() external view returns (address);\\n\\n    /// @notice Address of Protocol Team multisig\\n    function team() external view returns (address);\\n\\n    /// @dev address which can create managed NFTs\\n    function allowedManager() external view returns (address);\\n\\n    /// @dev Current count of token\\n    function tokenId() external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping of token id to escrow type\\n    ///      Takes advantage of the fact default value is EscrowType.NORMAL\\n    function escrowType(uint256 tokenId) external view returns (EscrowType);\\n\\n    /// @dev Mapping of token id to managed id\\n    function idToManaged(\\n        uint256 tokenId\\n    ) external view returns (uint256 managedTokenId);\\n\\n    /// @dev Mapping of user token id to managed token id to weight of token id\\n    function weights(\\n        uint256 tokenId,\\n        uint256 managedTokenId\\n    ) external view returns (uint256 weight);\\n\\n    /// @dev Mapping of managed id to deactivated state\\n    function deactivated(uint256 tokenId) external view returns (bool inactive);\\n\\n    /// @dev Mapping from managed nft id to locked managed rewards\\n    ///      `token` denominated rewards (rebases/rewards) stored in locked managed rewards contract\\n    ///      to prevent co-mingling of assets\\n    function managedToLocked(uint256 tokenId) external view returns (address);\\n\\n    /// @dev Mapping from managed nft id to free managed rewards contract\\n    ///      these rewards can be freely withdrawn by users\\n    function managedToFree(uint256 tokenId) external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Create managed NFT (a permanent lock) for use within ecosystem.\\n    /// @dev Throws if address already owns a managed NFT.\\n    /// @return _mTokenId managed token id.\\n    function createManagedLockFor(\\n        address _to\\n    ) external returns (uint256 _mTokenId);\\n\\n    /// @notice Delegates balance to managed nft\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    ///         Permanent locks that are deposited will automatically unlock.\\n    /// @dev Managed nft will remain max-locked as long as there is at least one\\n    ///      deposit or withdrawal per week.\\n    ///      Throws if deposit nft is managed.\\n    ///      Throws if recipient nft is not managed.\\n    ///      Throws if deposit nft is already locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited\\n    /// @param _mTokenId tokenId of managed NFT that will receive the deposit\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Retrieves locked rewards and withdraws balance from managed nft.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    /// @dev Throws if NFT not locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Permit one address to call createManagedLockFor() that is not Voter.governor()\\n    function setAllowedManager(address _allowedManager) external;\\n\\n    /// @notice Set Managed NFT state. Inactive NFTs cannot be deposited into.\\n    /// @param _mTokenId managed nft state to set\\n    /// @param _state true => inactive, false => active\\n    function setManagedState(uint256 _mTokenId, bool _state) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function version() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setTeam(address _team) external;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenId\\n    function ownerToNFTokenIdList(\\n        address _owner,\\n        uint256 _index\\n    ) external view returns (uint256 _tokenId);\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(\\n        uint256 _tokenId\\n    ) external view returns (address operator);\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /// @notice Check whether spender is owner or an approved user for a given veNFT\\n    /// @param _spender .\\n    /// @param _tokenId .\\n    function isApprovedOrOwner(\\n        address _spender,\\n        uint256 _tokenId\\n    ) external returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 _interfaceID\\n    ) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ESCROW STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Total count of epochs witnessed since contract creation\\n    function epoch() external view returns (uint256);\\n\\n    /// @notice Total amount of token() deposited\\n    function supply() external view returns (uint256);\\n\\n    /// @notice Aggregate permanent locked balances\\n    function permanentLockBalance() external view returns (uint256);\\n\\n    function userPointEpoch(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _epoch);\\n\\n    /// @notice time -> signed slope change\\n    function slopeChanges(uint256 _timestamp) external view returns (int128);\\n\\n    /// @notice account -> can split\\n    function canSplit(address _account) external view returns (bool);\\n\\n    /// @notice Global point history at a given index\\n    function pointHistory(\\n        uint256 _loc\\n    ) external view returns (GlobalPoint memory);\\n\\n    /// @notice Get the LockedBalance (amount, end) of a _tokenId\\n    /// @param _tokenId .\\n    /// @return LockedBalance of _tokenId\\n    function locked(\\n        uint256 _tokenId\\n    ) external view returns (LockedBalance memory);\\n\\n    /// @notice User -> UserPoint[userEpoch]\\n    function userPointHistory(\\n        uint256 _tokenId,\\n        uint256 _loc\\n    ) external view returns (UserPoint memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ESCROW LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external;\\n\\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _tokenId lock NFT\\n    /// @param _value Amount to add to user's lock\\n    function depositFor(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @return TokenId of created veNFT\\n    function createLock(\\n        uint256 _value,\\n        uint256 _lockDuration\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    /// @return TokenId of created veNFT\\n    function createLockFor(\\n        uint256 _value,\\n        uint256 _lockDuration,\\n        address _to\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increaseAmount(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Extend the unlock time for `_tokenId`\\n    ///         Cannot extend lock time of permanent locks\\n    /// @param _lockDuration New number of seconds until tokens unlock\\n    function increaseUnlockTime(\\n        uint256 _tokenId,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    /// @notice Withdraw all tokens for `_tokenId`\\n    /// @dev Only possible if the lock is both expired and not permanent\\n    ///      This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///      will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    function withdraw(uint256 _tokenId) external;\\n\\n    /// @notice Merges `_from` into `_to`.\\n    /// @dev Cannot merge `_from` locks that are permanent or have already voted this epoch.\\n    ///      Cannot merge `_to` locks that have already expired.\\n    ///      Cannot merge if either `_from` or `_to` is veNFT created for\\n    ///      a grant that has not fully vested yet.\\n    ///      This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///      will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    /// @param _from VeNFT to merge from.\\n    /// @param _to VeNFT to merge into.\\n    function merge(uint256 _from, uint256 _to) external;\\n\\n    /// @notice Splits veNFT into two new veNFTS - one with oldLocked.amount - `_amount`, and the second with `_amount`\\n    /// @dev    This burns the tokenId of the target veNFT\\n    ///         Callable by approved or owner\\n    ///         If this is called by approved, approved will not have permissions to manipulate the newly created veNFTs\\n    ///         Returns the two new split veNFTs to owner\\n    ///         If `from` is permanent, will automatically dedelegate.\\n    ///         This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///         will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    /// @param _from VeNFT to split.\\n    /// @param _amount Amount to split from veNFT.\\n    /// @return _tokenId1 Return tokenId of veNFT with oldLocked.amount - `_amount`.\\n    /// @return _tokenId2 Return tokenId of veNFT with `_amount`.\\n    function split(\\n        uint256 _from,\\n        uint256 _amount\\n    ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\n\\n    /// @notice Toggle split for a specific address.\\n    /// @dev Toggle split for address(0) to enable or disable for all.\\n    /// @param _account Address to toggle split permissions\\n    /// @param _bool True to allow, false to disallow\\n    function toggleSplit(address _account, bool _bool) external;\\n\\n    /// @notice Permanently lock a veNFT. Voting power will be equal to\\n    ///         `LockedBalance.amount` with no decay. Required to delegate.\\n    /// @dev Only callable by unlocked normal veNFTs.\\n    /// @param _tokenId tokenId to lock.\\n    function lockPermanent(uint256 _tokenId) external;\\n\\n    /// @notice Unlock a permanently locked veNFT. Voting power will decay.\\n    ///         Will automatically dedelegate if delegated.\\n    /// @dev Only callable by permanently locked veNFTs.\\n    ///      Cannot unlock if already voted this epoch.\\n    /// @param _tokenId tokenId to unlock.\\n    function unlockPermanent(uint256 _tokenId) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           GAUGE VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Get the voting power for _tokenId at the current timestamp\\n    /// @dev Returns 0 if called in the same block as a transfer.\\n    /// @param _tokenId .\\n    /// @return Voting power\\n    function balanceOfNFT(uint256 _tokenId) external view returns (uint256);\\n\\n    /// @notice Get the voting power for _tokenId at a given timestamp\\n    /// @param _tokenId .\\n    /// @param _t Timestamp to query voting power\\n    /// @return Voting power\\n    function balanceOfNFTAt(\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at current timestamp\\n    /// @return Total voting power at current timestamp\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at a given timestamp\\n    /// @param _t Timestamp to query total voting power\\n    /// @return Total voting power at given timestamp\\n    function totalSupplyAt(uint256 _t) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            GAUGE VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice See if a queried _tokenId has actively voted\\n    /// @param _tokenId .\\n    /// @return True if voted, else false\\n    function voted(uint256 _tokenId) external view returns (bool);\\n\\n    /// @notice Set the global state voter and distributor\\n    /// @dev This is only called once, at setup\\n    function setVoterAndDistributor(\\n        address _voter,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Set `voted` for _tokenId to true or false\\n    /// @dev Only callable by voter\\n    /// @param _tokenId .\\n    /// @param _voted .\\n    function voting(uint256 _tokenId, bool _voted) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            DAO VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The number of checkpoints for each tokenId\\n    function numCheckpoints(uint256 tokenId) external view returns (uint48);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    function nonces(address account) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function delegates(uint256 delegator) external view returns (uint256);\\n\\n    /// @notice A record of delegated token checkpoints for each account, by index\\n    /// @param tokenId .\\n    /// @param index .\\n    /// @return Checkpoint\\n    function checkpoints(\\n        uint256 tokenId,\\n        uint48 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @inheritdoc IVotes\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function getPastTotalSupply(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             DAO VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotes\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /// @inheritdoc IVotes\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6372 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC6372\\n    function clock() external view returns (uint48);\\n\\n    /// @inheritdoc IERC6372\\n    function CLOCK_MODE() external view returns (string memory);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                TOKEN GRANT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Deposit `_value` of tokens as a grant and lock for `_vestingEnd`\\n    ///         with the provided `_grantManager`.\\n    /// @param _value Amount to deposit\\n    /// @param _grantee The grantee's address\\n    /// @param _grantManager The grant manager who can revoke the grant\\n    /// @param _vestingEnd The end of the vesting schedule. The lock will be\\n    ///        rounded down to nearest week but the original vesting end is\\n    ///        recorded in the contract.\\n    /// @return TokenId of created veNFT\\n    function createGrantLockFor(\\n        uint256 _value,\\n        address _grantee,\\n        address _grantManager,\\n        uint256 _vestingEnd\\n    ) external returns (uint256);\\n\\n    /// @notice Allows the existing grant manager to set a new grant manager\\n    ///         address.\\n    /// @param _tokenId tokenId of the veNFT\\n    /// @param _newGrantManager The new grant manager address\\n    function setGrantManager(\\n        uint256 _tokenId,\\n        address _newGrantManager\\n    ) external;\\n\\n    /// @notice Returns the grant manager address for the given veNFT\\n    /// @param _tokenId tokenId of the veNFT\\n    function grantManager(uint256 _tokenId) external view returns (address);\\n\\n    /// @notice Returns the vesting schedule end for the given veNFT.\\n    ///         Zero if the veNFT was not created as a grant.\\n    /// @param _tokenId tokenId of the veNFT\\n    function vestingEnd(uint256 _tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x12fc409f27c9e659dffeedb14c460d993d1cde4df6918f7ec26ec21bbe989845\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IFactoryRegistry {\\n    error FallbackFactory();\\n    error InvalidFactoriesToPoolFactory();\\n    error PathAlreadyApproved();\\n    error PathNotApproved();\\n    error SameAddress();\\n    error ZeroAddress();\\n\\n    event Approve(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event Unapprove(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event SetManagedRewardsFactory(address indexed _newRewardsFactory);\\n\\n    /// @notice Approve a set of factories used in the Protocol.\\n    ///         Router.sol is able to swap any poolFactories currently approved.\\n    ///         Cannot approve address(0) factories.\\n    ///         Cannot aprove path that is already approved.\\n    ///         Each poolFactory has one unique set and maintains state.  In the case a poolFactory is unapproved\\n    ///             and then re-approved, the same set of factories must be used.  In other words, you cannot overwrite\\n    ///             the factories tied to a poolFactory address.\\n    ///         VotingRewardsFactories and GaugeFactories may use the same address across multiple poolFactories.\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    function approve(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external;\\n\\n    /// @notice Unapprove a set of factories used in the Protocol.\\n    ///         While a poolFactory is unapproved, Router.sol cannot swap with pools made from the corresponding factory\\n    ///         Can only unapprove an approved path.\\n    ///         Cannot unapprove the fallback path (core v2 factories).\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    function unapprove(address poolFactory) external;\\n\\n    /// @notice Factory to create free and locked rewards for a managed veNFT\\n    function managedRewardsFactory() external view returns (address);\\n\\n    /// @notice Set the rewards factory address\\n    /// @dev Callable by onlyOwner\\n    /// @param _newManagedRewardsFactory address of new managedRewardsFactory\\n    function setManagedRewardsFactory(\\n        address _newManagedRewardsFactory\\n    ) external;\\n\\n    /// @notice Get the factories correlated to a poolFactory.\\n    ///         Once set, this can never be modified.\\n    ///         Returns the correlated factories even after an approved poolFactory is unapproved.\\n    function factoriesToPoolFactory(\\n        address poolFactory\\n    )\\n        external\\n        view\\n        returns (address votingRewardsFactory, address gaugeFactory);\\n\\n    /// @notice Get all PoolFactories approved by the registry\\n    /// @dev The same PoolFactory address cannot be used twice\\n    /// @return Array of PoolFactory addresses\\n    function poolFactories() external view returns (address[] memory);\\n\\n    /// @notice Check if a PoolFactory is approved within the factory registry.  Router uses this method to\\n    ///         ensure a pool swapped from is approved.\\n    /// @param poolFactory .\\n    /// @return True if PoolFactory is approved, else false\\n    function isPoolFactoryApproved(\\n        address poolFactory\\n    ) external view returns (bool);\\n\\n    /// @notice Get the length of the poolFactories array\\n    function poolFactoriesLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x28761ac1316b1b722d0d2664fc24def4269bd4adad13770f12b283f207e45bca\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IGaugeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IGaugeFactory {\\n    function createGauge(\\n        address _forwarder,\\n        address _pool,\\n        address _feesVotingReward,\\n        address _ve,\\n        bool isPool\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0xe92b80235c7fc2203aa2720d28d5d55b53846ca2cd05d8b704673530f72f7d56\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IPoolFactory {\\n    event SetFeeManager(address feeManager);\\n    event SetPauser(address pauser);\\n    event SetPauseState(bool state);\\n    event SetVoter(address voter);\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        bool indexed stable,\\n        address pool,\\n        uint256\\n    );\\n    event SetCustomFee(address indexed pool, uint256 fee);\\n\\n    error FeeInvalid();\\n    error FeeTooHigh();\\n    error InvalidPool();\\n    error NotFeeManager();\\n    error NotPauser();\\n    error NotVoter();\\n    error PoolAlreadyExists();\\n    error SameAddress();\\n    error ZeroFee();\\n    error ZeroAddress();\\n\\n    /// @notice returns the number of pools created from this factory\\n    function allPoolsLength() external view returns (uint256);\\n\\n    /// @notice Is a valid pool created by this factory.\\n    /// @param .\\n    function isPool(address pool) external view returns (bool);\\n\\n    /// @notice Return address of pool created by this factory\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param stable True if stable, false if volatile\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external view returns (address);\\n\\n    /// @notice Support for v3-style pools which wraps around getPool(tokenA,tokenB,stable)\\n    /// @dev fee is converted to stable boolean.\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param fee  1 if stable, 0 if volatile, else returns address(0)\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address);\\n\\n    /// @dev Only called once to set to Voter.sol - Voter does not have a function\\n    ///      to call this contract method, so once set it's immutable.\\n    ///      This also follows convention of setVoterAndDistributor() in VotingEscrow.sol\\n    /// @param _voter .\\n    function setVoter(address _voter) external;\\n\\n    function setPauser(address _pauser) external;\\n\\n    function setPauseState(bool _state) external;\\n\\n    function setFeeManager(address _feeManager) external;\\n\\n    /// @notice Set default fee for stable and volatile pools.\\n    /// @dev Throws if higher than maximum fee.\\n    ///      Throws if fee is zero.\\n    /// @param _stable Stable or volatile pool.\\n    /// @param _fee .\\n    function setFee(bool _stable, uint256 _fee) external;\\n\\n    /// @notice Set overriding fee for a pool from the default\\n    /// @dev A custom fee of zero means the default fee will be used.\\n    function setCustomFee(address _pool, uint256 _fee) external;\\n\\n    /// @notice Returns fee for a pool, as custom fees are possible.\\n    function getFee(\\n        address _pool,\\n        bool _stable\\n    ) external view returns (uint256);\\n\\n    /// @notice Create a pool given two tokens and if they're stable/volatile\\n    /// @dev token order does not matter\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param stable .\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        bool stable\\n    ) external returns (address pool);\\n\\n    /// @notice Support for v3-style pools which wraps around createPool(tokena,tokenB,stable)\\n    /// @dev fee is converted to stable boolean\\n    /// @dev token order does not matter\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param fee 1 if stable, 0 if volatile, else revert\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function voter() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xea49aa44929840f624d1c24ae46d43923251c6b763222d030f2d6be43c82125d\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IVotingRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IVotingRewardsFactory {\\n    /// @notice creates a BribeVotingReward and a FeesVotingReward contract for a gauge\\n    /// @param _forwarder            Address of trusted forwarder\\n    /// @param _rewards             Addresses of pool tokens to be used as valid rewards tokens\\n    /// @return feesVotingReward    Address of FeesVotingReward contract created\\n    /// @return bribeVotingReward   Address of BribeVotingReward contract created\\n    function createRewards(\\n        address _forwarder,\\n        address[] memory _rewards\\n    ) external returns (address feesVotingReward, address bribeVotingReward);\\n}\\n\",\"keccak256\":\"0x64cb52af144152b4d528b5dd422c6b6181b243c3d3935d29eb7e36c1da4ed744\",\"license\":\"MIT\"},\"contracts/libraries/ProtocolTimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nlibrary ProtocolTimeLibrary {\\n    uint256 internal constant WEEK = 7 days;\\n\\n    /// @dev Returns start of epoch based on current timestamp\\n    function epochStart(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK);\\n        }\\n    }\\n\\n    /// @dev Returns start of next epoch / end of current epoch\\n    function epochNext(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + WEEK;\\n        }\\n    }\\n\\n    /// @dev Returns start of voting window\\n    function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + 1 hours;\\n        }\\n    }\\n\\n    /// @dev Returns end of voting window / beginning of unrestricted voting window\\n    function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + WEEK - 1 hours;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb23231ad1a9b1d7aece513cbae2d471d4ac106212945f8c08d4ad9c975f53188\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200439638038062004396833981016040819052620000359162000169565b6001600160a01b038084166080819052600160005560a05282811660c081905290821660e05260408051637e062a3560e11b8152905163fc0c546a916004808201926020929091908290030181865afa15801562000097573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000bd9190620001b3565b6001600160a01b0316610100526000620000d662000124565b600180546001600160a01b039092166001600160a01b031992831681179091556002805483168217905560038054831682179055600480549092161790555050601e60065550620001d89050565b6080516000906001600160a01b0316330362000147575060131936013560601c90565b503390565b80516001600160a01b03811681146200016457600080fd5b919050565b6000806000606084860312156200017f57600080fd5b6200018a846200014c565b92506200019a602085016200014c565b9150620001aa604085016200014c565b90509250925092565b600060208284031215620001c657600080fd5b620001d1826200014c565b9392505050565b60805160a05160c05160e051610100516140bc620002da60003960008181610e5f01528181610ed4015281816119e801528181612113015281816129dd015281816130b0015261313e0152600081816104440152818161154301526116140152600081816103ab0152818161097f01528181610a7701528181610b7601528181610c4201528181610cce01528181610d5001528181611167015281816113b701528181611d7501528181611e6501528181611f65015281816124990152818161254601528181612633015281816126b501528181612d9101526135cf0152600081816107e70152818161191a01526119b001526000610fec01526140bc6000f3fe608060405234801561001057600080fd5b50600436106102e25760003560e01c80637ac09bf711610188578063c42cf535116100e4578063e0c11f9a11610092578063e0c11f9a14610780578063e2819d5c14610793578063e586875f146107a6578063e8b3fd57146107b9578063f3594be0146107c2578063f645d4f9146107e2578063f9f031df1461080957600080fd5b8063c42cf535146106bd578063c4f08165146106d0578063c9ff6f4d146106f9578063d23254b41461070c578063d4e2616f14610737578063d560b0d71461075a578063d58b15d41461076d57600080fd5b8063a7cac84611610141578063a7cac846146105f5578063a86a366d14610615578063aa79979b14610628578063aa9354a31461064b578063ab37f4861461065e578063ac4afa3814610681578063b9a09fd51461069457600080fd5b80637ac09bf714610577578063880e36fc1461058a578063929c8dcd1461059d57806396c82e57146105c6578063992a7933146105cf5780639f06247b146105e257600080fd5b80633bf0c9fb116102425780636138889b116101f05780636138889b146104e5578063666256aa146104f85780637625391a1461050b5780637715ee751461051e5780637778960e14610531578063794cea3c1461054457806379e938241461055757600080fd5b80633bf0c9fb1461043f5780633c6b16ab146104665780633cd8045e14610479578063402914f51461048c578063462d0b2e146104ac578063572b6c05146104bf578063598d521b146104d257600080fd5b80631f8507161161029f5780631f850716146103a657806330331b2f146103cd578063310bd74b146103e057806332145f90146103f3578063370fb5fa1461040657806339e9f3b6146104195780633aae971f1461042c57600080fd5b806306d6a1b2146102e75780630c340a24146103265780630e0a5968146103395780630ffb1d8b1461034e5780631703e5f9146103615780631f7b6d3214610394575b600080fd5b6103106102f5366004613a35565b6009602052600090815260409020546001600160a01b031681565b60405161031d9190613a52565b60405180910390f35b600254610310906001600160a01b031681565b61034c610347366004613a35565b61081c565b005b61034c61035c366004613a74565b610828565b61038461036f366004613a35565b60146020526000908152604090205460ff1681565b604051901515815260200161031d565b6007545b60405190815260200161031d565b6103107f000000000000000000000000000000000000000000000000000000000000000081565b61034c6103db366004613aad565b610871565b61034c6103ee366004613aad565b6108f5565b61034c610401366004613aad565b610a29565b61034c610414366004613aad565b610b01565b610398610427366004613aad565b610e02565b600354610310906001600160a01b031681565b6103107f000000000000000000000000000000000000000000000000000000000000000081565b61034c610474366004613aad565b610e17565b600154610310906001600160a01b031681565b61039861049a366004613a35565b60176020526000908152604090205481565b61034c6104ba366004613b11565b610f44565b6103846104cd366004613a35565b610fea565b61034c6104e0366004613a35565b61101c565b61034c6104f3366004613c48565b6110a0565b61034c610506366004613c7c565b611165565b61034c610519366004613d58565b6112cc565b61034c61052c366004613c7c565b6113b5565b600454610310906001600160a01b031681565b610310610552366004613d7a565b611515565b610398610565366004613aad565b600f6020526000908152604090205481565b61034c610585366004613da8565b611cde565b610398610598366004613aad565b61205e565b6103106105ab366004613a35565b600b602052600090815260409020546001600160a01b031681565b61039860055481565b61034c6105dd366004613a35565b61206f565b61034c6105f0366004613a35565b6121a0565b610398610603366004613a35565b600c6020526000908152604090205481565b610310610623366004613d58565b612261565b610384610636366004613a35565b60116020526000908152604090205460ff1681565b610398610659366004613aad565b612299565b61038461066c366004613a35565b60126020526000908152604090205460ff1681565b61031061068f366004613aad565b6122a8565b6103106106a2366004613a35565b6008602052600090815260409020546001600160a01b031681565b61034c6106cb366004613a35565b6122d2565b6103106106de366004613a35565b600a602052600090815260409020546001600160a01b031681565b61034c610707366004613d58565b612356565b61039861071a366004613e21565b600d60209081526000928352604080842090915290825290205481565b610384610745366004613aad565b60136020526000908152604090205460ff1681565b61034c610768366004613c48565b6123b7565b61039861077b366004613aad565b6123ee565b61034c61078e366004613d58565b612402565b61034c6107a1366004613e46565b612743565b61034c6107b4366004613a35565b6127d5565b61039860065481565b6103986107d0366004613aad565b60106020526000908152604090205481565b6103107f000000000000000000000000000000000000000000000000000000000000000081565b61034c610817366004613c48565b612859565b610825816128f0565b50565b6002546001600160a01b031661083c612a30565b6001600160a01b03161461086357604051633b8d9d7560e21b815260040160405180910390fd5b61086d8282612a52565b5050565b6002546001600160a01b0316610885612a30565b6001600160a01b0316146108ac57604051633b8d9d7560e21b815260040160405180910390fd5b600a8110156108ce57604051632db4ddc160e11b815260040160405180910390fd5b60065481036108f05760405163c23f6ccb60e01b815260040160405180910390fd5b600655565b60008181526010602052604090205481906109154262093a808106900390565b116109335760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161096057604051635a780bad60e01b815260040160405180910390fd5b610968612abb565b60405163430c208160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906109b69033908690600401613e6b565b6020604051808303816000875af11580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190613e84565b610a165760405163390cdd9b60e21b815260040160405180910390fd5b610a1f82612b19565b61086d6001600055565b610a31612abb565b62093a80429081069003610e10014211610a5e57604051635a780bad60e01b815260040160405180910390fd5b6040516339f890b560e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190613ea1565b9050610af68282612e36565b506108256001600055565b610b09612abb565b6000818152601060205260409020548190610b294262093a808106900390565b11610b475760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211610b7457604051635a780bad60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c2081610bab612a30565b846040518363ffffffff1660e01b8152600401610bc9929190613e6b565b6020604051808303816000875af1158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190613e84565b610c295760405163390cdd9b60e21b815260040160405180910390fd5b6040516319a0a9d560e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906319a0a9d590602401602060405180830381865afa158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190613ea1565b604051631b87dafd60e11b8152600481018590529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063370fb5fa90602401600060405180830381600087803b158015610d1a57600080fd5b505af1158015610d2e573d6000803e3d6000fd5b5050604051637028a55d60e11b815260048101849052426024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063e0514aba90604401602060405180830381865afa158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc49190613ea1565b905080600003610deb57610dd782612b19565b600082815260106020526040812055610df5565b610df58282612e36565b5050506108256001600055565b600062093a8082068203610e10015b92915050565b6000610e21612a30565b6001549091506001600160a01b03808316911614610e525760405163e5eca0d160e01b815260040160405180910390fd5b610e876001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016823085612f76565b6000610e966005546001612fe1565b610ea884670de0b6b3a7640000613ed0565b610eb29190613ee7565b90508015610ed2578060156000828254610ecc9190613f09565b90915550505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03167ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf5082685604051610f3791815260200190565b60405180910390a3505050565b6001546001600160a01b0316610f58612a30565b6001600160a01b031614610f7f5760405163e5eca0d160e01b815260040160405180910390fd5b8160005b81811015610fc457610fbc858583818110610fa057610fa0613f1c565b9050602002016020810190610fb59190613a35565b6001612a52565b600101610f83565b5050600180546001600160a01b0319166001600160a01b03929092169190911790555050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6002546001600160a01b0316611030612a30565b6001600160a01b03161461105757604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b03811661107e5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6110a8612abb565b600160009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190613ea1565b50805160005b818110156111595761115183828151811061114457611144613f1c565b6020026020010151612ff9565b600101611127565b50506108256001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c208161119c612a30565b836040518363ffffffff1660e01b81526004016111ba929190613e6b565b6020604051808303816000875af11580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190613e84565b61121a5760405163390cdd9b60e21b815260040160405180910390fd5b825160005b818110156112c55784818151811061123957611239613f1c565b60200260200101516001600160a01b031663f5f8d3658486848151811061126257611262613f1c565b60200260200101516040518363ffffffff1660e01b8152600401611287929190613f77565b600060405180830381600087803b1580156112a157600080fd5b505af11580156112b5573d6000803e3d6000fd5b50506001909201915061121f9050565b5050505050565b6112d4612abb565b600160009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190613ea1565b50815b818110156113aa576113a2600860006007848154811061137257611372613f1c565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612ff9565b600101611350565b5061086d6001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c20816113ec612a30565b836040518363ffffffff1660e01b815260040161140a929190613e6b565b6020604051808303816000875af1158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190613e84565b61146a5760405163390cdd9b60e21b815260040160405180910390fd5b825160005b818110156112c55784818151811061148957611489613f1c565b60200260200101516001600160a01b031663f5f8d365848684815181106114b2576114b2613f1c565b60200260200101516040518363ffffffff1660e01b81526004016114d7929190613f77565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b50506001909201915061146f9050565b600061151f612abb565b6000611529612a30565b60405163d1ea0a1d60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d1ea0a1d90611578908790600401613a52565b602060405180830381865afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b99190613e84565b6115d657604051634fe2017f60e01b815260040160405180910390fd5b6001600160a01b03838116600090815260086020526040902054161561160f576040516348fe415b60e11b815260040160405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631217afdb876040518263ffffffff1660e01b815260040161165e9190613a52565b6040805180830381865afa15801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e9190613f90565b604080516002808252606082018352939550919350600092906020830190803683375050604051635b16ebb760e01b81529192506000916001600160a01b038a169150635b16ebb7906116f5908a90600401613a52565b602060405180830381865afa158015611712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117369190613e84565b9050600080821561187257886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a39190613fbf565b9150886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118079190613fbf565b9050818460008151811061181d5761181d613f1c565b60200260200101906001600160a01b031690816001600160a01b031681525050808460018151811061185157611851613f1c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6002546001600160a01b0388811691161461190457826118a557604051632bab424160e01b815260040160405180910390fd5b6001600160a01b03821660009081526012602052604090205460ff1615806118e657506001600160a01b03811660009081526012602052604090205460ff16155b15611904576040516365a9cebb60e01b815260040160405180910390fd5b5050600080856001600160a01b0316634c455a977f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b8152600401611957929190613fdc565b60408051808303816000875af1158015611975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119999190613f90565b6040516322a60f9560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528c8116602483015283811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301528615156084830152929450909250600091871690638a983e549060a4016020604051808303816000875af1158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190613fbf565b905082600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600b6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600860008c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508960096000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160116000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160146000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550611c1d816128f0565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038c811691821790925560408051918252848316602083015285831690820152828216606082015289821660808201528782169189811691908e16907fef9f7d1ffff3b249c6b9bf2528499e935f7d96bb6d6ec4e7da504d1d3c6279e19060a00160405180910390a4975050505050505050610e116001600055565b6000858152601060205260409020548590611cfe4262093a808106900390565b11611d1c5760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211611d4957604051635a780bad60e01b815260040160405180910390fd5b611d51612abb565b6000611d5b612a30565b60405163430c208160e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c208190611dac9084908b90600401613e6b565b6020604051808303816000875af1158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def9190613e84565b611e0c5760405163390cdd9b60e21b815260040160405180910390fd5b848314611e2c5760405163332ac86360e21b815260040160405180910390fd5b600654851115611e4f5760405163ebcfae4b60e01b815260040160405180910390fd5b604051632a266cdb60e21b8152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a899b36c90602401602060405180830381865afa158015611eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed89190613e84565b15611ef6576040516308910b2560e01b815260040160405180910390fd5b4262093a808106810362092c700181118015611f21575060008881526013602052604090205460ff16155b15611f3f57604051630392978d60e41b815260040160405180910390fd5b600088815260106020526040808220839055516339f890b560e21b8152600481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd89190613ea1565b905061204989828a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152506131c092505050565b5050506120566001600055565b505050505050565b600062093a80808306830301610e11565b6004546001600160a01b0316612083612a30565b6001600160a01b0316146120aa5760405163c560129360e01b815260040160405180910390fd5b6001600160a01b03811660009081526014602052604090205460ff166120e357604051633f88da5160e21b815260040160405180910390fd5b6001600160a01b03811660009081526017602052604090205480156121565760015461213c906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613666565b6001600160a01b0382166000908152601760205260408120555b6001600160a01b038216600081815260146020526040808220805460ff19169055517f04a5d3f5d80d22d9345acc80618f4a4e7e663cf9e1aed23b57d975acec002ba79190a25050565b6004546001600160a01b03166121b4612a30565b6001600160a01b0316146121db5760405163c560129360e01b815260040160405180910390fd5b6001600160a01b03811660009081526014602052604090205460ff161561221557604051635f5a482960e11b815260040160405180910390fd5b6001600160a01b038116600081815260146020526040808220805460ff19166001179055517fed18e9faa3dccfd8aa45f69c4de40546b2ca9cccc4538a2323531656516db1aa9190a250565b600e602052816000526040600020818154811061227d57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600062093a8082068203610e11565b600781815481106122b857600080fd5b6000918252602090912001546001600160a01b0316905081565b6002546001600160a01b03166122e6612a30565b6001600160a01b03161461230d57604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b0381166123345760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b815b818110156123b2576123aa600860006007848154811061237a5761237a613f1c565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054166128f0565b600101612358565b505050565b805160005b818110156123b2576123e68382815181106123d9576123d9613f1c565b60200260200101516128f0565b6001016123bc565b600062093a808206820362092c7001610e11565b61240a612abb565b600082815260106020526040902054829061242a4262093a808106900390565b116124485760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161247557604051635a780bad60e01b815260040160405180910390fd5b600061247f612a30565b60405163430c208160e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906124d09084908890600401613e6b565b6020604051808303816000875af11580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125139190613e84565b6125305760405163390cdd9b60e21b815260040160405180910390fd5b604051632a266cdb60e21b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a899b36c90602401602060405180830381865afa158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190613e84565b156125d7576040516308910b2560e01b815260040160405180910390fd5b4262093a808106810362092c700181111561260557604051631f3ecf5b60e21b815260040160405180910390fd5b60008581526010602052604090819020829055516370608fcd60e11b815260048101869052602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e0c11f9a90604401600060405180830381600087803b15801561267f57600080fd5b505af1158015612693573d6000803e3d6000fd5b5050604051637028a55d60e11b815260048101879052426024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063e0514aba90604401602060405180830381865afa158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190613ea1565b90506127358582612e36565b5050505061086d6001600055565b600061274d612a30565b6002549091506001600160a01b0380831691161461277e57604051633b8d9d7560e21b815260040160405180910390fd5b600083815260136020526040808220805460ff19168515159081179091559051909185916001600160a01b038516917f8a6ff732c8641e1e34d771e1f8b1673e988c1abdfb694ebdf6c910a5e3d0d85391a4505050565b6004546001600160a01b03166127e9612a30565b6001600160a01b0316146128105760405163c560129360e01b815260040160405180910390fd5b6001600160a01b0381166128375760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b805160005b818110156123b25782818151811061287857612878613f1c565b60200260200101516001600160a01b031663c00007b0612896612a30565b6040518263ffffffff1660e01b81526004016128b29190613a52565b600060405180830381600087803b1580156128cc57600080fd5b505af11580156128e0573d6000803e3d6000fd5b50506001909201915061285e9050565b6001600160a01b03808216600090815260096020908152604080832054909316808352600c909152919020548015612a0f576001600160a01b03831660009081526016602052604081208054601554918290559161294e8383614000565b90508015612056576000670de0b6b3a764000061296b8387613ed0565b6129759190613ee7565b6001600160a01b03881660009081526014602052604090205490915060ff16156129cc576001600160a01b038716600090815260176020526040812080548392906129c1908490613f09565b90915550612a069050565b600154612a06906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613666565b50505050505050565b6015546001600160a01b038416600090815260166020526040902055505050565b6000612a3b33610fea565b15612a4d575060131936013560601c90565b503390565b6001600160a01b0382166000818152601260205260409020805460ff191683151590811790915590612a82612a30565b6001600160a01b03167f44948130cf88523dbc150908a47dd6332c33a01a3869d7f2fa78e51d5a5f9c5760405160405180910390a45050565b600260005403612b125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6000818152600e6020526040812080549091805b82811015612d73576000848281548110612b4957612b49613f1c565b6000918252602080832090910154888352600d825260408084206001600160a01b03909216808552919092529120549091508015612d69576001600160a01b03808316600090815260086020526040902054612ba591166128f0565b6001600160a01b0382166000908152600c602052604081208054839290612bcd908490614000565b90915550506000878152600d602090815260408083206001600160a01b038681168552908352818420849055600883528184205481168452600a9092529182902054915163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b158015612c4f57600080fd5b505af1158015612c63573d6000803e3d6000fd5b505050506001600160a01b0382811660009081526008602090815260408083205484168352600b9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b158015612cd257600080fd5b505af1158015612ce6573d6000803e3d6000fd5b505050508084612cf69190613f09565b935086826001600160a01b0316612d0b612a30565b6001600160a01b038581166000908152600c6020908152604091829020548251888152918201524281830152905192909116917fadab630928b1d46214641293704a312ee7ad87e03ae14a7fd95e7308b93998df9181900360600190a45b5050600101612b2d565b50604051632d27a2cd60e11b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635a4f459a90604401600060405180830381600087803b158015612ddd57600080fd5b505af1158015612df1573d6000803e3d6000fd5b505050508060056000828254612e079190614000565b90915550506000848152600f60209081526040808320839055600e9091528120612e30916139ee565b50505050565b6000828152600e6020908152604080832080548251818502810185019093528083529192909190830182828015612e9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e78575b505050505090506000815190506000816001600160401b03811115612ebd57612ebd613b67565b604051908082528060200260200182016040528015612ee6578160200160208202803683370190505b50905060005b82811015612f6957600d60008781526020019081526020016000206000858381518110612f1b57612f1b613f1c565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110612f5657612f56613f1c565b6020908102919091010152600101612eec565b506112c5858585846131c0565b6040516001600160a01b0380851660248301528316604482015260648101829052612e309085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613685565b6000818311612ff05781612ff2565b825b9392505050565b613002816128f0565b6001600160a01b0381166000818152601760209081526040918290205482516302dcc80960e31b815292519093926316e640489260048083019391928290030181865afa158015613057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307b9190613ea1565b8111801561308b575062093a8081115b1561086d576001600160a01b038083166000908152601760205260408120556130d7907f000000000000000000000000000000000000000000000000000000000000000016838361375a565b604051633c6b16ab60e01b8152600481018290526001600160a01b03831690633c6b16ab90602401600060405180830381600087803b15801561311957600080fd5b505af115801561312d573d6000803e3d6000fd5b506131689250506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016905083600061375a565b816001600160a01b031661317a612a30565b6001600160a01b03167f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b17836040516131b491815260200190565b60405180910390a35050565b6131c984612b19565b815160008080805b84811015613208578581815181106131eb576131eb613f1c565b6020026020010151846131fe9190613f09565b93506001016131d1565b5060005b848110156135ab57600087828151811061322857613228613f1c565b6020908102919091018101516001600160a01b038082166000908152600890935260409092205490925016806132735781604051634c89018560e01b8152600401612b099190613a52565b6001600160a01b03811660009081526014602052604090205460ff166132ae57806040516302b0b9ed60e61b8152600401612b099190613a52565b6001600160a01b03811660009081526011602052604090205460ff16156135a1576000868b8a86815181106132e5576132e5613f1c565b60200260200101516132f79190613ed0565b6133019190613ee7565b60008d8152600d602090815260408083206001600160a01b0388168452909152902054909150156133455760405163315f6a3d60e01b815260040160405180910390fd5b806000036133665760405163334ab3f560e11b815260040160405180910390fd5b61336f826128f0565b60008c8152600e6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600c909152812080548392906133c4908490613f09565b909155505060008c8152600d602090815260408083206001600160a01b0387168452909152812080548392906133fb908490613f09565b90915550506001600160a01b038083166000908152600a60205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b15801561345c57600080fd5b505af1158015613470573d6000803e3d6000fd5b50505050600b6000836001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663f3207723828e6040518363ffffffff1660e01b81526004016134e3929190918252602082015260400190565b600060405180830381600087803b1580156134fd57600080fd5b505af1158015613511573d6000803e3d6000fd5b5050505080856135219190613f09565b945061352d8187613f09565b95508b836001600160a01b0316613542612a30565b6001600160a01b038681166000908152600c6020908152604091829020548251888152918201524281830152905192909116917f452d440efc30dfa14a0ef803ccb55936af860ec6a6960ed27f129bef913f296a9181900360600190a4505b505060010161320c565b50801561363457604051632d27a2cd60e11b815260048101899052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635a4f459a90604401600060405180830381600087803b15801561361b57600080fd5b505af115801561362f573d6000803e3d6000fd5b505050505b81600560008282546136469190613f09565b90915550506000978852600f602052604090972096909655505050505050565b6123b28363a9059cbb60e01b8484604051602401612faa929190613e6b565b60006136da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661385e9092919063ffffffff16565b90508051600014806136fb5750808060200190518101906136fb9190613e84565b6123b25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401612b09565b8015806137d45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156137ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d29190613ea1565b155b61383f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401612b09565b6123b28363095ea7b360e01b8484604051602401612faa929190613e6b565b606061386d8484600085613875565b949350505050565b6060824710156138d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401612b09565b600080866001600160a01b031685876040516138f29190614037565b60006040518083038185875af1925050503d806000811461392f576040519150601f19603f3d011682016040523d82523d6000602084013e613934565b606091505b509150915061394587838387613950565b979650505050505050565b606083156139bf5782516000036139b8576001600160a01b0385163b6139b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401612b09565b508161386d565b61386d83838151156139d45781518083602001fd5b8060405162461bcd60e51b8152600401612b099190614053565b508054600082559060005260206000209081019061082591905b80821115613a1c5760008155600101613a08565b5090565b6001600160a01b038116811461082557600080fd5b600060208284031215613a4757600080fd5b8135612ff281613a20565b6001600160a01b0391909116815260200190565b801515811461082557600080fd5b60008060408385031215613a8757600080fd5b8235613a9281613a20565b91506020830135613aa281613a66565b809150509250929050565b600060208284031215613abf57600080fd5b5035919050565b60008083601f840112613ad857600080fd5b5081356001600160401b03811115613aef57600080fd5b6020830191508360208260051b8501011115613b0a57600080fd5b9250929050565b600080600060408486031215613b2657600080fd5b83356001600160401b03811115613b3c57600080fd5b613b4886828701613ac6565b9094509250506020840135613b5c81613a20565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613ba557613ba5613b67565b604052919050565b60006001600160401b03821115613bc657613bc6613b67565b5060051b60200190565b600082601f830112613be157600080fd5b81356020613bf6613bf183613bad565b613b7d565b8083825260208201915060208460051b870101935086841115613c1857600080fd5b602086015b84811015613c3d578035613c3081613a20565b8352918301918301613c1d565b509695505050505050565b600060208284031215613c5a57600080fd5b81356001600160401b03811115613c7057600080fd5b61386d84828501613bd0565b600080600060608486031215613c9157600080fd5b83356001600160401b0380821115613ca857600080fd5b613cb487838801613bd0565b9450602091508186013581811115613ccb57600080fd5b8601601f81018813613cdc57600080fd5b8035613cea613bf182613bad565b81815260059190911b8201840190848101908a831115613d0957600080fd5b8584015b83811015613d4157803586811115613d255760008081fd5b613d338d8983890101613bd0565b845250918601918601613d0d565b50979a979950505050604095909501359450505050565b60008060408385031215613d6b57600080fd5b50508035926020909101359150565b60008060408385031215613d8d57600080fd5b8235613d9881613a20565b91506020830135613aa281613a20565b600080600080600060608688031215613dc057600080fd5b8535945060208601356001600160401b0380821115613dde57600080fd5b613dea89838a01613ac6565b90965094506040880135915080821115613e0357600080fd5b50613e1088828901613ac6565b969995985093965092949392505050565b60008060408385031215613e3457600080fd5b823591506020830135613aa281613a20565b60008060408385031215613e5957600080fd5b823591506020830135613aa281613a66565b6001600160a01b03929092168252602082015260400190565b600060208284031215613e9657600080fd5b8151612ff281613a66565b600060208284031215613eb357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e1157610e11613eba565b600082613f0457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610e1157610e11613eba565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b83811015613f6c5781516001600160a01b031687529582019590820190600101613f47565b509495945050505050565b82815260406020820152600061386d6040830184613f32565b60008060408385031215613fa357600080fd5b8251613fae81613a20565b6020840151909250613aa281613a20565b600060208284031215613fd157600080fd5b8151612ff281613a20565b6001600160a01b038316815260406020820181905260009061386d90830184613f32565b81810381811115610e1157610e11613eba565b60005b8381101561402e578181015183820152602001614016565b50506000910152565b60008251614049818460208701614013565b9190910192915050565b6020815260008251806020840152614072816040850160208701614013565b601f01601f1916919091016040019291505056fea2646970667358221220f34d43889e6b28a77bed06da9450f1da1a0fa82c2127de9d48de1d5ec6bebc7a64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e25760003560e01c80637ac09bf711610188578063c42cf535116100e4578063e0c11f9a11610092578063e0c11f9a14610780578063e2819d5c14610793578063e586875f146107a6578063e8b3fd57146107b9578063f3594be0146107c2578063f645d4f9146107e2578063f9f031df1461080957600080fd5b8063c42cf535146106bd578063c4f08165146106d0578063c9ff6f4d146106f9578063d23254b41461070c578063d4e2616f14610737578063d560b0d71461075a578063d58b15d41461076d57600080fd5b8063a7cac84611610141578063a7cac846146105f5578063a86a366d14610615578063aa79979b14610628578063aa9354a31461064b578063ab37f4861461065e578063ac4afa3814610681578063b9a09fd51461069457600080fd5b80637ac09bf714610577578063880e36fc1461058a578063929c8dcd1461059d57806396c82e57146105c6578063992a7933146105cf5780639f06247b146105e257600080fd5b80633bf0c9fb116102425780636138889b116101f05780636138889b146104e5578063666256aa146104f85780637625391a1461050b5780637715ee751461051e5780637778960e14610531578063794cea3c1461054457806379e938241461055757600080fd5b80633bf0c9fb1461043f5780633c6b16ab146104665780633cd8045e14610479578063402914f51461048c578063462d0b2e146104ac578063572b6c05146104bf578063598d521b146104d257600080fd5b80631f8507161161029f5780631f850716146103a657806330331b2f146103cd578063310bd74b146103e057806332145f90146103f3578063370fb5fa1461040657806339e9f3b6146104195780633aae971f1461042c57600080fd5b806306d6a1b2146102e75780630c340a24146103265780630e0a5968146103395780630ffb1d8b1461034e5780631703e5f9146103615780631f7b6d3214610394575b600080fd5b6103106102f5366004613a35565b6009602052600090815260409020546001600160a01b031681565b60405161031d9190613a52565b60405180910390f35b600254610310906001600160a01b031681565b61034c610347366004613a35565b61081c565b005b61034c61035c366004613a74565b610828565b61038461036f366004613a35565b60146020526000908152604090205460ff1681565b604051901515815260200161031d565b6007545b60405190815260200161031d565b6103107f000000000000000000000000000000000000000000000000000000000000000081565b61034c6103db366004613aad565b610871565b61034c6103ee366004613aad565b6108f5565b61034c610401366004613aad565b610a29565b61034c610414366004613aad565b610b01565b610398610427366004613aad565b610e02565b600354610310906001600160a01b031681565b6103107f000000000000000000000000000000000000000000000000000000000000000081565b61034c610474366004613aad565b610e17565b600154610310906001600160a01b031681565b61039861049a366004613a35565b60176020526000908152604090205481565b61034c6104ba366004613b11565b610f44565b6103846104cd366004613a35565b610fea565b61034c6104e0366004613a35565b61101c565b61034c6104f3366004613c48565b6110a0565b61034c610506366004613c7c565b611165565b61034c610519366004613d58565b6112cc565b61034c61052c366004613c7c565b6113b5565b600454610310906001600160a01b031681565b610310610552366004613d7a565b611515565b610398610565366004613aad565b600f6020526000908152604090205481565b61034c610585366004613da8565b611cde565b610398610598366004613aad565b61205e565b6103106105ab366004613a35565b600b602052600090815260409020546001600160a01b031681565b61039860055481565b61034c6105dd366004613a35565b61206f565b61034c6105f0366004613a35565b6121a0565b610398610603366004613a35565b600c6020526000908152604090205481565b610310610623366004613d58565b612261565b610384610636366004613a35565b60116020526000908152604090205460ff1681565b610398610659366004613aad565b612299565b61038461066c366004613a35565b60126020526000908152604090205460ff1681565b61031061068f366004613aad565b6122a8565b6103106106a2366004613a35565b6008602052600090815260409020546001600160a01b031681565b61034c6106cb366004613a35565b6122d2565b6103106106de366004613a35565b600a602052600090815260409020546001600160a01b031681565b61034c610707366004613d58565b612356565b61039861071a366004613e21565b600d60209081526000928352604080842090915290825290205481565b610384610745366004613aad565b60136020526000908152604090205460ff1681565b61034c610768366004613c48565b6123b7565b61039861077b366004613aad565b6123ee565b61034c61078e366004613d58565b612402565b61034c6107a1366004613e46565b612743565b61034c6107b4366004613a35565b6127d5565b61039860065481565b6103986107d0366004613aad565b60106020526000908152604090205481565b6103107f000000000000000000000000000000000000000000000000000000000000000081565b61034c610817366004613c48565b612859565b610825816128f0565b50565b6002546001600160a01b031661083c612a30565b6001600160a01b03161461086357604051633b8d9d7560e21b815260040160405180910390fd5b61086d8282612a52565b5050565b6002546001600160a01b0316610885612a30565b6001600160a01b0316146108ac57604051633b8d9d7560e21b815260040160405180910390fd5b600a8110156108ce57604051632db4ddc160e11b815260040160405180910390fd5b60065481036108f05760405163c23f6ccb60e01b815260040160405180910390fd5b600655565b60008181526010602052604090205481906109154262093a808106900390565b116109335760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161096057604051635a780bad60e01b815260040160405180910390fd5b610968612abb565b60405163430c208160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906109b69033908690600401613e6b565b6020604051808303816000875af11580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190613e84565b610a165760405163390cdd9b60e21b815260040160405180910390fd5b610a1f82612b19565b61086d6001600055565b610a31612abb565b62093a80429081069003610e10014211610a5e57604051635a780bad60e01b815260040160405180910390fd5b6040516339f890b560e21b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190613ea1565b9050610af68282612e36565b506108256001600055565b610b09612abb565b6000818152601060205260409020548190610b294262093a808106900390565b11610b475760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211610b7457604051635a780bad60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c2081610bab612a30565b846040518363ffffffff1660e01b8152600401610bc9929190613e6b565b6020604051808303816000875af1158015610be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0c9190613e84565b610c295760405163390cdd9b60e21b815260040160405180910390fd5b6040516319a0a9d560e01b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906319a0a9d590602401602060405180830381865afa158015610c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb59190613ea1565b604051631b87dafd60e11b8152600481018590529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063370fb5fa90602401600060405180830381600087803b158015610d1a57600080fd5b505af1158015610d2e573d6000803e3d6000fd5b5050604051637028a55d60e11b815260048101849052426024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063e0514aba90604401602060405180830381865afa158015610da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc49190613ea1565b905080600003610deb57610dd782612b19565b600082815260106020526040812055610df5565b610df58282612e36565b5050506108256001600055565b600062093a8082068203610e10015b92915050565b6000610e21612a30565b6001549091506001600160a01b03808316911614610e525760405163e5eca0d160e01b815260040160405180910390fd5b610e876001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016823085612f76565b6000610e966005546001612fe1565b610ea884670de0b6b3a7640000613ed0565b610eb29190613ee7565b90508015610ed2578060156000828254610ecc9190613f09565b90915550505b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03167ff70d5c697de7ea828df48e5c4573cb2194c659f1901f70110c52b066dcf5082685604051610f3791815260200190565b60405180910390a3505050565b6001546001600160a01b0316610f58612a30565b6001600160a01b031614610f7f5760405163e5eca0d160e01b815260040160405180910390fd5b8160005b81811015610fc457610fbc858583818110610fa057610fa0613f1c565b9050602002016020810190610fb59190613a35565b6001612a52565b600101610f83565b5050600180546001600160a01b0319166001600160a01b03929092169190911790555050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6002546001600160a01b0316611030612a30565b6001600160a01b03161461105757604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b03811661107e5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6110a8612abb565b600160009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156110fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111219190613ea1565b50805160005b818110156111595761115183828151811061114457611144613f1c565b6020026020010151612ff9565b600101611127565b50506108256001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c208161119c612a30565b836040518363ffffffff1660e01b81526004016111ba929190613e6b565b6020604051808303816000875af11580156111d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fd9190613e84565b61121a5760405163390cdd9b60e21b815260040160405180910390fd5b825160005b818110156112c55784818151811061123957611239613f1c565b60200260200101516001600160a01b031663f5f8d3658486848151811061126257611262613f1c565b60200260200101516040518363ffffffff1660e01b8152600401611287929190613f77565b600060405180830381600087803b1580156112a157600080fd5b505af11580156112b5573d6000803e3d6000fd5b50506001909201915061121f9050565b5050505050565b6112d4612abb565b600160009054906101000a90046001600160a01b03166001600160a01b031663a83627de6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611329573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134d9190613ea1565b50815b818110156113aa576113a2600860006007848154811061137257611372613f1c565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190205416612ff9565b600101611350565b5061086d6001600055565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c20816113ec612a30565b836040518363ffffffff1660e01b815260040161140a929190613e6b565b6020604051808303816000875af1158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190613e84565b61146a5760405163390cdd9b60e21b815260040160405180910390fd5b825160005b818110156112c55784818151811061148957611489613f1c565b60200260200101516001600160a01b031663f5f8d365848684815181106114b2576114b2613f1c565b60200260200101516040518363ffffffff1660e01b81526004016114d7929190613f77565b600060405180830381600087803b1580156114f157600080fd5b505af1158015611505573d6000803e3d6000fd5b50506001909201915061146f9050565b600061151f612abb565b6000611529612a30565b60405163d1ea0a1d60e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d1ea0a1d90611578908790600401613a52565b602060405180830381865afa158015611595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b99190613e84565b6115d657604051634fe2017f60e01b815260040160405180910390fd5b6001600160a01b03838116600090815260086020526040902054161561160f576040516348fe415b60e11b815260040160405180910390fd5b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631217afdb876040518263ffffffff1660e01b815260040161165e9190613a52565b6040805180830381865afa15801561167a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169e9190613f90565b604080516002808252606082018352939550919350600092906020830190803683375050604051635b16ebb760e01b81529192506000916001600160a01b038a169150635b16ebb7906116f5908a90600401613a52565b602060405180830381865afa158015611712573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117369190613e84565b9050600080821561187257886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a39190613fbf565b9150886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118079190613fbf565b9050818460008151811061181d5761181d613f1c565b60200260200101906001600160a01b031690816001600160a01b031681525050808460018151811061185157611851613f1c565b60200260200101906001600160a01b031690816001600160a01b0316815250505b6002546001600160a01b0388811691161461190457826118a557604051632bab424160e01b815260040160405180910390fd5b6001600160a01b03821660009081526012602052604090205460ff1615806118e657506001600160a01b03811660009081526012602052604090205460ff16155b15611904576040516365a9cebb60e01b815260040160405180910390fd5b5050600080856001600160a01b0316634c455a977f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b8152600401611957929190613fdc565b60408051808303816000875af1158015611975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119999190613f90565b6040516322a60f9560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301528c8116602483015283811660448301527f0000000000000000000000000000000000000000000000000000000000000000811660648301528615156084830152929450909250600091871690638a983e549060a4016020604051808303816000875af1158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190613fbf565b905082600a6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600b6000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600860008c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508960096000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600160116000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160146000836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550611c1d816128f0565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180546001600160a01b0319166001600160a01b038c811691821790925560408051918252848316602083015285831690820152828216606082015289821660808201528782169189811691908e16907fef9f7d1ffff3b249c6b9bf2528499e935f7d96bb6d6ec4e7da504d1d3c6279e19060a00160405180910390a4975050505050505050610e116001600055565b6000858152601060205260409020548590611cfe4262093a808106900390565b11611d1c5760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e10014211611d4957604051635a780bad60e01b815260040160405180910390fd5b611d51612abb565b6000611d5b612a30565b60405163430c208160e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c208190611dac9084908b90600401613e6b565b6020604051808303816000875af1158015611dcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611def9190613e84565b611e0c5760405163390cdd9b60e21b815260040160405180910390fd5b848314611e2c5760405163332ac86360e21b815260040160405180910390fd5b600654851115611e4f5760405163ebcfae4b60e01b815260040160405180910390fd5b604051632a266cdb60e21b8152600481018890527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a899b36c90602401602060405180830381865afa158015611eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed89190613e84565b15611ef6576040516308910b2560e01b815260040160405180910390fd5b4262093a808106810362092c700181118015611f21575060008881526013602052604090205460ff16155b15611f3f57604051630392978d60e41b815260040160405180910390fd5b600088815260106020526040808220839055516339f890b560e21b8152600481018a90527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e7e242d490602401602060405180830381865afa158015611fb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd89190613ea1565b905061204989828a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c9182918501908490808284376000920191909152506131c092505050565b5050506120566001600055565b505050505050565b600062093a80808306830301610e11565b6004546001600160a01b0316612083612a30565b6001600160a01b0316146120aa5760405163c560129360e01b815260040160405180910390fd5b6001600160a01b03811660009081526014602052604090205460ff166120e357604051633f88da5160e21b815260040160405180910390fd5b6001600160a01b03811660009081526017602052604090205480156121565760015461213c906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613666565b6001600160a01b0382166000908152601760205260408120555b6001600160a01b038216600081815260146020526040808220805460ff19169055517f04a5d3f5d80d22d9345acc80618f4a4e7e663cf9e1aed23b57d975acec002ba79190a25050565b6004546001600160a01b03166121b4612a30565b6001600160a01b0316146121db5760405163c560129360e01b815260040160405180910390fd5b6001600160a01b03811660009081526014602052604090205460ff161561221557604051635f5a482960e11b815260040160405180910390fd5b6001600160a01b038116600081815260146020526040808220805460ff19166001179055517fed18e9faa3dccfd8aa45f69c4de40546b2ca9cccc4538a2323531656516db1aa9190a250565b600e602052816000526040600020818154811061227d57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600062093a8082068203610e11565b600781815481106122b857600080fd5b6000918252602090912001546001600160a01b0316905081565b6002546001600160a01b03166122e6612a30565b6001600160a01b03161461230d57604051633b8d9d7560e21b815260040160405180910390fd5b6001600160a01b0381166123345760405163d92e233d60e01b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0392909216919091179055565b815b818110156123b2576123aa600860006007848154811061237a5761237a613f1c565b60009182526020808320909101546001600160a01b039081168452908301939093526040909101902054166128f0565b600101612358565b505050565b805160005b818110156123b2576123e68382815181106123d9576123d9613f1c565b60200260200101516128f0565b6001016123bc565b600062093a808206820362092c7001610e11565b61240a612abb565b600082815260106020526040902054829061242a4262093a808106900390565b116124485760405163cade311f60e01b815260040160405180910390fd5b62093a80429081069003610e1001421161247557604051635a780bad60e01b815260040160405180910390fd5b600061247f612a30565b60405163430c208160e01b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063430c2081906124d09084908890600401613e6b565b6020604051808303816000875af11580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125139190613e84565b6125305760405163390cdd9b60e21b815260040160405180910390fd5b604051632a266cdb60e21b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a899b36c90602401602060405180830381865afa158015612595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b99190613e84565b156125d7576040516308910b2560e01b815260040160405180910390fd5b4262093a808106810362092c700181111561260557604051631f3ecf5b60e21b815260040160405180910390fd5b60008581526010602052604090819020829055516370608fcd60e11b815260048101869052602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e0c11f9a90604401600060405180830381600087803b15801561267f57600080fd5b505af1158015612693573d6000803e3d6000fd5b5050604051637028a55d60e11b815260048101879052426024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063e0514aba90604401602060405180830381865afa158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190613ea1565b90506127358582612e36565b5050505061086d6001600055565b600061274d612a30565b6002549091506001600160a01b0380831691161461277e57604051633b8d9d7560e21b815260040160405180910390fd5b600083815260136020526040808220805460ff19168515159081179091559051909185916001600160a01b038516917f8a6ff732c8641e1e34d771e1f8b1673e988c1abdfb694ebdf6c910a5e3d0d85391a4505050565b6004546001600160a01b03166127e9612a30565b6001600160a01b0316146128105760405163c560129360e01b815260040160405180910390fd5b6001600160a01b0381166128375760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b805160005b818110156123b25782818151811061287857612878613f1c565b60200260200101516001600160a01b031663c00007b0612896612a30565b6040518263ffffffff1660e01b81526004016128b29190613a52565b600060405180830381600087803b1580156128cc57600080fd5b505af11580156128e0573d6000803e3d6000fd5b50506001909201915061285e9050565b6001600160a01b03808216600090815260096020908152604080832054909316808352600c909152919020548015612a0f576001600160a01b03831660009081526016602052604081208054601554918290559161294e8383614000565b90508015612056576000670de0b6b3a764000061296b8387613ed0565b6129759190613ee7565b6001600160a01b03881660009081526014602052604090205490915060ff16156129cc576001600160a01b038716600090815260176020526040812080548392906129c1908490613f09565b90915550612a069050565b600154612a06906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911683613666565b50505050505050565b6015546001600160a01b038416600090815260166020526040902055505050565b6000612a3b33610fea565b15612a4d575060131936013560601c90565b503390565b6001600160a01b0382166000818152601260205260409020805460ff191683151590811790915590612a82612a30565b6001600160a01b03167f44948130cf88523dbc150908a47dd6332c33a01a3869d7f2fa78e51d5a5f9c5760405160405180910390a45050565b600260005403612b125760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b6000818152600e6020526040812080549091805b82811015612d73576000848281548110612b4957612b49613f1c565b6000918252602080832090910154888352600d825260408084206001600160a01b03909216808552919092529120549091508015612d69576001600160a01b03808316600090815260086020526040902054612ba591166128f0565b6001600160a01b0382166000908152600c602052604081208054839290612bcd908490614000565b90915550506000878152600d602090815260408083206001600160a01b038681168552908352818420849055600883528184205481168452600a9092529182902054915163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b158015612c4f57600080fd5b505af1158015612c63573d6000803e3d6000fd5b505050506001600160a01b0382811660009081526008602090815260408083205484168352600b9091529081902054905163278afc8b60e21b815260048101849052602481018a9052911690639e2bf22c90604401600060405180830381600087803b158015612cd257600080fd5b505af1158015612ce6573d6000803e3d6000fd5b505050508084612cf69190613f09565b935086826001600160a01b0316612d0b612a30565b6001600160a01b038581166000908152600c6020908152604091829020548251888152918201524281830152905192909116917fadab630928b1d46214641293704a312ee7ad87e03ae14a7fd95e7308b93998df9181900360600190a45b5050600101612b2d565b50604051632d27a2cd60e11b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635a4f459a90604401600060405180830381600087803b158015612ddd57600080fd5b505af1158015612df1573d6000803e3d6000fd5b505050508060056000828254612e079190614000565b90915550506000848152600f60209081526040808320839055600e9091528120612e30916139ee565b50505050565b6000828152600e6020908152604080832080548251818502810185019093528083529192909190830182828015612e9657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612e78575b505050505090506000815190506000816001600160401b03811115612ebd57612ebd613b67565b604051908082528060200260200182016040528015612ee6578160200160208202803683370190505b50905060005b82811015612f6957600d60008781526020019081526020016000206000858381518110612f1b57612f1b613f1c565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054828281518110612f5657612f56613f1c565b6020908102919091010152600101612eec565b506112c5858585846131c0565b6040516001600160a01b0380851660248301528316604482015260648101829052612e309085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613685565b6000818311612ff05781612ff2565b825b9392505050565b613002816128f0565b6001600160a01b0381166000818152601760209081526040918290205482516302dcc80960e31b815292519093926316e640489260048083019391928290030181865afa158015613057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307b9190613ea1565b8111801561308b575062093a8081115b1561086d576001600160a01b038083166000908152601760205260408120556130d7907f000000000000000000000000000000000000000000000000000000000000000016838361375a565b604051633c6b16ab60e01b8152600481018290526001600160a01b03831690633c6b16ab90602401600060405180830381600087803b15801561311957600080fd5b505af115801561312d573d6000803e3d6000fd5b506131689250506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016905083600061375a565b816001600160a01b031661317a612a30565b6001600160a01b03167f4fa9693cae526341d334e2862ca2413b2e503f1266255f9e0869fb36e6d89b17836040516131b491815260200190565b60405180910390a35050565b6131c984612b19565b815160008080805b84811015613208578581815181106131eb576131eb613f1c565b6020026020010151846131fe9190613f09565b93506001016131d1565b5060005b848110156135ab57600087828151811061322857613228613f1c565b6020908102919091018101516001600160a01b038082166000908152600890935260409092205490925016806132735781604051634c89018560e01b8152600401612b099190613a52565b6001600160a01b03811660009081526014602052604090205460ff166132ae57806040516302b0b9ed60e61b8152600401612b099190613a52565b6001600160a01b03811660009081526011602052604090205460ff16156135a1576000868b8a86815181106132e5576132e5613f1c565b60200260200101516132f79190613ed0565b6133019190613ee7565b60008d8152600d602090815260408083206001600160a01b0388168452909152902054909150156133455760405163315f6a3d60e01b815260040160405180910390fd5b806000036133665760405163334ab3f560e11b815260040160405180910390fd5b61336f826128f0565b60008c8152600e6020908152604080832080546001810182559084528284200180546001600160a01b0319166001600160a01b0388169081179091558352600c909152812080548392906133c4908490613f09565b909155505060008c8152600d602090815260408083206001600160a01b0387168452909152812080548392906133fb908490613f09565b90915550506001600160a01b038083166000908152600a60205260409081902054905163f320772360e01b815260048101849052602481018f905291169063f320772390604401600060405180830381600087803b15801561345c57600080fd5b505af1158015613470573d6000803e3d6000fd5b50505050600b6000836001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663f3207723828e6040518363ffffffff1660e01b81526004016134e3929190918252602082015260400190565b600060405180830381600087803b1580156134fd57600080fd5b505af1158015613511573d6000803e3d6000fd5b5050505080856135219190613f09565b945061352d8187613f09565b95508b836001600160a01b0316613542612a30565b6001600160a01b038681166000908152600c6020908152604091829020548251888152918201524281830152905192909116917f452d440efc30dfa14a0ef803ccb55936af860ec6a6960ed27f129bef913f296a9181900360600190a4505b505060010161320c565b50801561363457604051632d27a2cd60e11b815260048101899052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635a4f459a90604401600060405180830381600087803b15801561361b57600080fd5b505af115801561362f573d6000803e3d6000fd5b505050505b81600560008282546136469190613f09565b90915550506000978852600f602052604090972096909655505050505050565b6123b28363a9059cbb60e01b8484604051602401612faa929190613e6b565b60006136da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661385e9092919063ffffffff16565b90508051600014806136fb5750808060200190518101906136fb9190613e84565b6123b25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401612b09565b8015806137d45750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156137ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137d29190613ea1565b155b61383f5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401612b09565b6123b28363095ea7b360e01b8484604051602401612faa929190613e6b565b606061386d8484600085613875565b949350505050565b6060824710156138d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401612b09565b600080866001600160a01b031685876040516138f29190614037565b60006040518083038185875af1925050503d806000811461392f576040519150601f19603f3d011682016040523d82523d6000602084013e613934565b606091505b509150915061394587838387613950565b979650505050505050565b606083156139bf5782516000036139b8576001600160a01b0385163b6139b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401612b09565b508161386d565b61386d83838151156139d45781518083602001fd5b8060405162461bcd60e51b8152600401612b099190614053565b508054600082559060005260206000209081019061082591905b80821115613a1c5760008155600101613a08565b5090565b6001600160a01b038116811461082557600080fd5b600060208284031215613a4757600080fd5b8135612ff281613a20565b6001600160a01b0391909116815260200190565b801515811461082557600080fd5b60008060408385031215613a8757600080fd5b8235613a9281613a20565b91506020830135613aa281613a66565b809150509250929050565b600060208284031215613abf57600080fd5b5035919050565b60008083601f840112613ad857600080fd5b5081356001600160401b03811115613aef57600080fd5b6020830191508360208260051b8501011115613b0a57600080fd5b9250929050565b600080600060408486031215613b2657600080fd5b83356001600160401b03811115613b3c57600080fd5b613b4886828701613ac6565b9094509250506020840135613b5c81613a20565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613ba557613ba5613b67565b604052919050565b60006001600160401b03821115613bc657613bc6613b67565b5060051b60200190565b600082601f830112613be157600080fd5b81356020613bf6613bf183613bad565b613b7d565b8083825260208201915060208460051b870101935086841115613c1857600080fd5b602086015b84811015613c3d578035613c3081613a20565b8352918301918301613c1d565b509695505050505050565b600060208284031215613c5a57600080fd5b81356001600160401b03811115613c7057600080fd5b61386d84828501613bd0565b600080600060608486031215613c9157600080fd5b83356001600160401b0380821115613ca857600080fd5b613cb487838801613bd0565b9450602091508186013581811115613ccb57600080fd5b8601601f81018813613cdc57600080fd5b8035613cea613bf182613bad565b81815260059190911b8201840190848101908a831115613d0957600080fd5b8584015b83811015613d4157803586811115613d255760008081fd5b613d338d8983890101613bd0565b845250918601918601613d0d565b50979a979950505050604095909501359450505050565b60008060408385031215613d6b57600080fd5b50508035926020909101359150565b60008060408385031215613d8d57600080fd5b8235613d9881613a20565b91506020830135613aa281613a20565b600080600080600060608688031215613dc057600080fd5b8535945060208601356001600160401b0380821115613dde57600080fd5b613dea89838a01613ac6565b90965094506040880135915080821115613e0357600080fd5b50613e1088828901613ac6565b969995985093965092949392505050565b60008060408385031215613e3457600080fd5b823591506020830135613aa281613a20565b60008060408385031215613e5957600080fd5b823591506020830135613aa281613a66565b6001600160a01b03929092168252602082015260400190565b600060208284031215613e9657600080fd5b8151612ff281613a66565b600060208284031215613eb357600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610e1157610e11613eba565b600082613f0457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610e1157610e11613eba565b634e487b7160e01b600052603260045260246000fd5b60008151808452602080850194506020840160005b83811015613f6c5781516001600160a01b031687529582019590820190600101613f47565b509495945050505050565b82815260406020820152600061386d6040830184613f32565b60008060408385031215613fa357600080fd5b8251613fae81613a20565b6020840151909250613aa281613a20565b600060208284031215613fd157600080fd5b8151612ff281613a20565b6001600160a01b038316815260406020820181905260009061386d90830184613f32565b81810381811115610e1157610e11613eba565b60005b8381101561402e578181015183820152602001614016565b50506000910152565b60008251614049818460208701614013565b9190910192915050565b6020815260008251806020840152614072816040850160208701614013565b601f01601f1916919091016040019291505056fea2646970667358221220f34d43889e6b28a77bed06da9450f1da1a0fa82c2127de9d48de1d5ec6bebc7a64736f6c63430008180033",
  "devdoc": {
    "author": "velodrome.finance, @figs999, @pegahcarter",
    "kind": "dev",
    "methods": {
      "claimBribes(address[],address[][],uint256)": {
        "details": "Utility to help batch bribe claims.",
        "params": {
          "_bribes": "Array of BribeVotingReward contracts to collect from.",
          "_tokenId": "Id of veNFT that you wish to claim bribes for.",
          "_tokens": "Array of tokens that are used as bribes."
        }
      },
      "claimFees(address[],address[][],uint256)": {
        "details": "Utility to help batch fee claims.",
        "params": {
          "_fees": "Array of FeesVotingReward contracts to collect from.",
          "_tokenId": "Id of veNFT that you wish to claim fees for.",
          "_tokens": "Array of tokens that are used as fees."
        }
      },
      "claimRewards(address[])": {
        "params": {
          "_gauges": "Array of gauges to collect emissions from."
        }
      },
      "createGauge(address,address)": {
        "details": "Governor can create a new gauge for a pool with any address.",
        "params": {
          "_pool": ".",
          "_poolFactory": "."
        }
      },
      "depositManaged(uint256,uint256)": {
        "details": "Throws if not approved or owner.      Throws if managed NFT is inactive.      Throws if depositing within privileged window (one hour prior to epoch flip)."
      },
      "distribute(address[])": {
        "details": "Utility to distribute to gauges of pools in array.",
        "params": {
          "_gauges": "Array of gauges to distribute to."
        }
      },
      "distribute(uint256,uint256)": {
        "details": "Utility to distribute to gauges of pools in range _start to _finish.",
        "params": {
          "_finish": "Ending index of gauges to distribute to.",
          "_start": "Starting index of gauges to distribute to."
        }
      },
      "initialize(address[],address)": {
        "details": "requires initialization with at least rewardToken"
      },
      "killGauge(address)": {
        "details": "Throws if not called by emergency council.      Throws if gauge already killed.",
        "params": {
          "_gauge": "."
        }
      },
      "notifyRewardAmount(uint256)": {
        "details": "Assumes totalWeight != 0 (Will never be zero as long as users are voting).      Throws if not called by splitter.",
        "params": {
          "_amount": "Amount of rewards to distribute."
        }
      },
      "poke(uint256)": {
        "params": {
          "_tokenId": "Id of veNFT whose balance you wish to update."
        }
      },
      "reset(uint256)": {
        "params": {
          "_tokenId": "Id of veNFT you are reseting."
        }
      },
      "reviveGauge(address)": {
        "details": "Throws if not called by emergency council.      Throws if gauge is not killed.",
        "params": {
          "_gauge": "."
        }
      },
      "setEmergencyCouncil(address)": {
        "details": "Throws if not called by emergency council.",
        "params": {
          "_emergencyCouncil": "."
        }
      },
      "setEpochGovernor(address)": {
        "details": "Throws if not called by governor.",
        "params": {
          "_epochGovernor": "."
        }
      },
      "setGovernor(address)": {
        "details": "Throws if not called by governor.",
        "params": {
          "_governor": "."
        }
      },
      "setMaxVotingNum(uint256)": {
        "details": "Throws if not called by governor.      Throws if _maxVotingNum is too low.      Throws if the values are the same.",
        "params": {
          "_maxVotingNum": "."
        }
      },
      "updateFor(address)": {
        "details": "Update claims to emissions for single gauge",
        "params": {
          "_gauge": "."
        }
      },
      "updateFor(address[])": {
        "details": "Update claims to emissions for an array of gauges.",
        "params": {
          "_gauges": "Array of gauges to update emissions for."
        }
      },
      "updateFor(uint256,uint256)": {
        "details": "Update claims to emissions for gauges based on their pool id as stored in Voter.",
        "params": {
          "_end": "Ending index of pools.",
          "_start": "Starting index of pools."
        }
      },
      "vote(uint256,address[],uint256[])": {
        "details": "Weights are distributed proportional to the sum of the weights in the array.      Throws if length of _poolVote and _weights do not match.",
        "params": {
          "_poolVote": "Array of pools you are voting for.",
          "_tokenId": "Id of veNFT you are voting with.",
          "_weights": "Weights of pools."
        }
      },
      "whitelistNFT(uint256,bool)": {
        "details": "Throws if not called by governor.      Throws if already whitelisted.",
        "params": {
          "_bool": ".",
          "_tokenId": "."
        }
      },
      "whitelistToken(address,bool)": {
        "details": "Throws if not called by governor.",
        "params": {
          "_bool": ".",
          "_token": "."
        }
      }
    },
    "stateVariables": {
      "claimable": {
        "details": "Gauge => Amount claimable"
      },
      "gaugeToBribe": {
        "details": "Gauge => Bribes Voting Reward"
      },
      "gaugeToFees": {
        "details": "Gauge => Fees Voting Reward"
      },
      "gauges": {
        "details": "Pool => Gauge"
      },
      "index": {
        "details": "Accumulated distributions per vote"
      },
      "isAlive": {
        "details": "Gauge => Liveness status"
      },
      "isGauge": {
        "details": "Address => Gauge"
      },
      "isWhitelistedNFT": {
        "details": "TokenId => Whitelisted status"
      },
      "isWhitelistedToken": {
        "details": "Token => Whitelisted status"
      },
      "lastVoted": {
        "details": "Nft => Timestamp of last vote (ensures single vote per epoch)"
      },
      "maxVotingNum": {
        "details": "Most number of pools one voter can vote for at once"
      },
      "poolForGauge": {
        "details": "Gauge => Pool"
      },
      "poolVote": {
        "details": "NFT => List of pools voted for by NFT"
      },
      "pools": {
        "details": "All pools viable for incentives"
      },
      "supplyIndex": {
        "details": "Gauge => Accumulated gauge distributions"
      },
      "totalWeight": {
        "details": "Total Voting Weights"
      },
      "usedWeights": {
        "details": "NFT => Total voting weight of NFT"
      },
      "votes": {
        "details": "NFT => Pool => Votes"
      },
      "weights": {
        "details": "Pool => Weights"
      }
    },
    "title": "Protocol Voter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimBribes(address[],address[][],uint256)": {
        "notice": "Claim bribes for a given NFT."
      },
      "claimFees(address[],address[][],uint256)": {
        "notice": "Claim fees for a given NFT."
      },
      "claimRewards(address[])": {
        "notice": "Claim emissions from gauges."
      },
      "createGauge(address,address)": {
        "notice": "Create a new gauge (unpermissioned)."
      },
      "depositManaged(uint256,uint256)": {
        "notice": "Called by users to deposit into a managed NFT.         Can only vote or deposit into a managed NFT once per epoch.         Note that NFTs deposited into a managed NFT will be re-locked         to the maximum lock time on withdrawal."
      },
      "emergencyCouncil()": {
        "notice": "credibly neutral party similar to Curve's Emergency DAO"
      },
      "epochGovernor()": {
        "notice": "Custom Epoch Governor using ve for vote weights."
      },
      "factoryRegistry()": {
        "notice": "Factory registry for valid pool / gauge / rewards factories"
      },
      "forwarder()": {
        "notice": "Store trusted forwarder address to pass into factories"
      },
      "governor()": {
        "notice": "Standard OZ IGovernor using ve for vote weights."
      },
      "killGauge(address)": {
        "notice": "Kills a gauge. The gauge will not receive any new emissions and cannot be deposited into.         Can still withdraw from gauge."
      },
      "length()": {
        "notice": "Number of pools with a Gauge"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "Called by Splitter to distribute weekly emissions rewards for disbursement amongst gauges."
      },
      "poke(uint256)": {
        "notice": "Called by users to update voting balances in voting rewards contracts."
      },
      "reset(uint256)": {
        "notice": "Called by users to reset voting state. Required if you wish to make changes to         veNFT state (e.g. merge, split, deposit into managed etc).         Cannot reset in the same epoch that you voted in.         Can vote or deposit into a managed NFT again after reset."
      },
      "reviveGauge(address)": {
        "notice": "Revives a killed gauge. Gauge will can receive emissions and deposits again."
      },
      "setEmergencyCouncil(address)": {
        "notice": "Set new emergency council."
      },
      "setEpochGovernor(address)": {
        "notice": "Set new epoch based governor."
      },
      "setGovernor(address)": {
        "notice": "Set new governor."
      },
      "setMaxVotingNum(uint256)": {
        "notice": "Set maximum number of gauges that can be voted for."
      },
      "splitter()": {
        "notice": "Address of a splitter contract"
      },
      "ve()": {
        "notice": "The ve token that governs these contracts"
      },
      "vote(uint256,address[],uint256[])": {
        "notice": "Called by users to vote for pools. Votes distributed proportionally based on weights.         Can only vote or deposit into a managed NFT once per epoch.         Can only vote for gauges that have not been killed."
      },
      "whitelistNFT(uint256,bool)": {
        "notice": "Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip."
      },
      "whitelistToken(address,bool)": {
        "notice": "Whitelist (or unwhitelist) token for use in bribes."
      },
      "withdrawManaged(uint256)": {
        "notice": "Called by users to withdraw from a managed NFT.         Cannot do it in the same epoch that you deposited into a managed NFT.         Can vote or deposit into a managed NFT again after withdrawing.         Note that the NFT withdrawn is re-locked to the maximum lock time."
      }
    },
    "notice": "Manage votes, emission distribution, and gauge creation within the Protocol's ecosystem.         Also provides support for depositing and withdrawing from managed veNFTs.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2014,
        "contract": "contracts/Voter.sol:Voter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11602,
        "contract": "contracts/Voter.sol:Voter",
        "label": "splitter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11605,
        "contract": "contracts/Voter.sol:Voter",
        "label": "governor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11608,
        "contract": "contracts/Voter.sol:Voter",
        "label": "epochGovernor",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11611,
        "contract": "contracts/Voter.sol:Voter",
        "label": "emergencyCouncil",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11614,
        "contract": "contracts/Voter.sol:Voter",
        "label": "totalWeight",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11617,
        "contract": "contracts/Voter.sol:Voter",
        "label": "maxVotingNum",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11624,
        "contract": "contracts/Voter.sol:Voter",
        "label": "pools",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11629,
        "contract": "contracts/Voter.sol:Voter",
        "label": "gauges",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11634,
        "contract": "contracts/Voter.sol:Voter",
        "label": "poolForGauge",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11639,
        "contract": "contracts/Voter.sol:Voter",
        "label": "gaugeToFees",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11644,
        "contract": "contracts/Voter.sol:Voter",
        "label": "gaugeToBribe",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11649,
        "contract": "contracts/Voter.sol:Voter",
        "label": "weights",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11656,
        "contract": "contracts/Voter.sol:Voter",
        "label": "votes",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11662,
        "contract": "contracts/Voter.sol:Voter",
        "label": "poolVote",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 11667,
        "contract": "contracts/Voter.sol:Voter",
        "label": "usedWeights",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11672,
        "contract": "contracts/Voter.sol:Voter",
        "label": "lastVoted",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11677,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isGauge",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11682,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isWhitelistedToken",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11687,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isWhitelistedNFT",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 11692,
        "contract": "contracts/Voter.sol:Voter",
        "label": "isAlive",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11695,
        "contract": "contracts/Voter.sol:Voter",
        "label": "index",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 11700,
        "contract": "contracts/Voter.sol:Voter",
        "label": "supplyIndex",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11705,
        "contract": "contracts/Voter.sol:Voter",
        "label": "claimable",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}