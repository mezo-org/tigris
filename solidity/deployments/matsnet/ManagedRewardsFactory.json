{
  "address": "0x3CDFD2674AE85b2f5a767EDcfE823351351a7e17",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockedManagedReward",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "freeManagedReward",
          "type": "address"
        }
      ],
      "name": "ManagedRewardCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        }
      ],
      "name": "createRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "lockedManagedReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "freeManagedReward",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x93055e299de7717d8613410209dea1e6abb82ff2e23cecfded0c3839e5f0e2b5",
  "receipt": {
    "to": null,
    "from": "0x123694886DBf5Ac94DDA07135349534536D14cAf",
    "contractAddress": "0x3CDFD2674AE85b2f5a767EDcfE823351351a7e17",
    "transactionIndex": 0,
    "gasUsed": "3054940",
    "logsBloom": "0x
    "blockHash": "0x845d9abc492c8416668f037db29aaec9cc80e5e24ac51735c7ada2e6d5edc28a",
    "transactionHash": "0x93055e299de7717d8613410209dea1e6abb82ff2e23cecfded0c3839e5f0e2b5",
    "logs": [],
    "blockNumber": 1910117,
    "cumulativeGasUsed": "3054940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ff5a0ccb3d0d88b62210a9fe38c4030e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockedManagedReward\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"freeManagedReward\",\"type\":\"address\"}],\"name\":\"ManagedRewardCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"}],\"name\":\"createRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lockedManagedReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"freeManagedReward\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createRewards(address,address)\":{\"params\":{\"_forwarder\":\"Address of trusted forwarder\",\"_voter\":\"Address of Voter.sol\"},\"returns\":{\"freeManagedReward\":\"  Address of FreeManagedReward contract created\",\"lockedManagedReward\":\"Address of LockedManagedReward contract created\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createRewards(address,address)\":{\"notice\":\"creates a LockedManagedReward and a FreeManagedReward contract for a managed veNFT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/ManagedRewardsFactory.sol\":\"ManagedRewardsFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/factories/ManagedRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IManagedRewardsFactory} from \\\"../interfaces/factories/IManagedRewardsFactory.sol\\\";\\nimport {FreeManagedReward} from \\\"../rewards/FreeManagedReward.sol\\\";\\nimport {LockedManagedReward} from \\\"../rewards/LockedManagedReward.sol\\\";\\n\\ncontract ManagedRewardsFactory is IManagedRewardsFactory {\\n    /// @inheritdoc IManagedRewardsFactory\\n    function createRewards(\\n        address _forwarder,\\n        address _voter\\n    )\\n        external\\n        returns (address lockedManagedReward, address freeManagedReward)\\n    {\\n        lockedManagedReward = address(\\n            new LockedManagedReward(_forwarder, _voter)\\n        );\\n        freeManagedReward = address(new FreeManagedReward(_forwarder, _voter));\\n        emit ManagedRewardCreated(\\n            _voter,\\n            lockedManagedReward,\\n            freeManagedReward\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe787f71a23e47bfdc6f0b4433db782c1eb4862127cf4364800bad83ab39b6579\",\"license\":\"MIT\"},\"contracts/governance/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// Modified IVotes interface for tokenId based voting\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 indexed fromDelegate,\\n        uint256 indexed toDelegate\\n    );\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @dev Returns the amount of votes that `tokenId` had at a specific moment in the past.\\n     *      If the account passed in is not the owner, returns 0.\\n     */\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `tokenId` has chosen. Can never be equal to the delegator's `tokenId`.\\n     *      Returns 0 if not delegated.\\n     */\\n    function delegates(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from `delegator` to `delegatee`. Signer must own `delegator`.\\n     */\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4886474bc559202c8004ffba54c1d11dd14c3bbbc3a107bd522cc0f99b2ba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReward {\\n    error InvalidReward();\\n    error NotAuthorized();\\n    error NotGauge();\\n    error NotEscrowToken();\\n    error NotSingleToken();\\n    error NotVotingEscrow();\\n    error NotWhitelisted();\\n    error ZeroAmount();\\n\\n    event Deposit(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 indexed epoch,\\n        uint256 amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n\\n    /// @notice Deposit an amount into the rewards contract to earn future rewards associated to a veNFT\\n    /// @dev Internal notation used as only callable internally by `authorized`.\\n    /// @param amount   Amount deposited for the veNFT\\n    /// @param tokenId  Unique identifier of the veNFT\\n    function _deposit(uint256 amount, uint256 tokenId) external;\\n\\n    /// @notice Withdraw an amount from the rewards contract associated to a veNFT\\n    /// @dev Internal notation used as only callable internally by `authorized`.\\n    /// @param amount   Amount deposited for the veNFT\\n    /// @param tokenId  Unique identifier of the veNFT\\n    function _withdraw(uint256 amount, uint256 tokenId) external;\\n\\n    /// @notice Claim the rewards earned by a veNFT staker\\n    /// @param tokenId  Unique identifier of the veNFT\\n    /// @param tokens   Array of tokens to claim rewards of\\n    function getReward(uint256 tokenId, address[] memory tokens) external;\\n\\n    /// @notice Add rewards for stakers to earn\\n    /// @param token    Address of token to reward\\n    /// @param amount   Amount of token to transfer to rewards\\n    function notifyRewardAmount(address token, uint256 amount) external;\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param tokenId      The token of the NFT to check\\n    /// @param timestamp    The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function getPriorBalanceIndex(\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @notice Determine the prior index of supply staked by of a timestamp\\n    /// @dev Timestamp must be <= current timestamp\\n    /// @param timestamp The timestamp to get the index at\\n    /// @return Index of supply checkpoint\\n    function getPriorSupplyIndex(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculate how much in rewards are earned for a specific token and veNFT\\n    /// @param token Address of token to fetch rewards of\\n    /// @param tokenId Unique identifier of the veNFT\\n    /// @return Amount of token earned in rewards\\n    function earned(\\n        address token,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc104a752430a186c1052b2fb4b6e16f99d111dc1113369421dc22d7a6fce9086\",\"license\":\"MIT\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVoter {\\n    error AlreadyVotedOrDeposited();\\n    error DistributeWindow();\\n    error FactoryPathNotApproved();\\n    error GaugeAlreadyKilled();\\n    error GaugeAlreadyRevived();\\n    error GaugeExists();\\n    error GaugeDoesNotExist(address _pool);\\n    error GaugeNotAlive(address _gauge);\\n    error InactiveManagedNFT();\\n    error MaximumVotingNumberTooLow();\\n    error NonZeroVotes();\\n    error NotAPool();\\n    error NotApprovedOrOwner();\\n    error NotGovernor();\\n    error NotEmergencyCouncil();\\n    error NotMinter();\\n    error NotWhitelistedNFT();\\n    error NotWhitelistedToken();\\n    error SameValue();\\n    error SpecialVotingWindow();\\n    error TooManyPools();\\n    error UnequalLengths();\\n    error ZeroBalance();\\n    error ZeroAddress();\\n\\n    event GaugeCreated(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory,\\n        address pool,\\n        address bribeVotingReward,\\n        address feeVotingReward,\\n        address gauge,\\n        address creator\\n    );\\n    event GaugeKilled(address indexed gauge);\\n    event GaugeRevived(address indexed gauge);\\n    event Voted(\\n        address indexed voter,\\n        address indexed pool,\\n        uint256 indexed tokenId,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event Abstained(\\n        address indexed voter,\\n        address indexed pool,\\n        uint256 indexed tokenId,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event NotifyReward(\\n        address indexed sender,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed gauge,\\n        uint256 amount\\n    );\\n    event WhitelistToken(\\n        address indexed whitelister,\\n        address indexed token,\\n        bool indexed _bool\\n    );\\n    event WhitelistNFT(\\n        address indexed whitelister,\\n        uint256 indexed tokenId,\\n        bool indexed _bool\\n    );\\n\\n    // mappings\\n    function gauges(address pool) external view returns (address);\\n\\n    function poolForGauge(address gauge) external view returns (address);\\n\\n    function gaugeToFees(address gauge) external view returns (address);\\n\\n    function gaugeToBribe(address gauge) external view returns (address);\\n\\n    function weights(address pool) external view returns (uint256);\\n\\n    function votes(\\n        uint256 tokenId,\\n        address pool\\n    ) external view returns (uint256);\\n\\n    function usedWeights(uint256 tokenId) external view returns (uint256);\\n\\n    function lastVoted(uint256 tokenId) external view returns (uint256);\\n\\n    function isGauge(address) external view returns (bool);\\n\\n    function isWhitelistedToken(address token) external view returns (bool);\\n\\n    function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\n\\n    function isAlive(address gauge) external view returns (bool);\\n\\n    function ve() external view returns (address);\\n\\n    function governor() external view returns (address);\\n\\n    function epochGovernor() external view returns (address);\\n\\n    function emergencyCouncil() external view returns (address);\\n\\n    function length() external view returns (uint256);\\n\\n    /// @notice Called by Minter to distribute weekly emissions rewards for disbursement amongst gauges.\\n    /// @dev Assumes totalWeight != 0 (Will never be zero as long as users are voting).\\n    ///      Throws if not called by minter.\\n    /// @param _amount Amount of rewards to distribute.\\n    function notifyRewardAmount(uint256 _amount) external;\\n\\n    /// @dev Utility to distribute to gauges of pools in range _start to _finish.\\n    /// @param _start   Starting index of gauges to distribute to.\\n    /// @param _finish  Ending index of gauges to distribute to.\\n    function distribute(uint256 _start, uint256 _finish) external;\\n\\n    /// @dev Utility to distribute to gauges of pools in array.\\n    /// @param _gauges Array of gauges to distribute to.\\n    function distribute(address[] memory _gauges) external;\\n\\n    /// @notice Called by users to update voting balances in voting rewards contracts.\\n    /// @param _tokenId Id of veNFT whose balance you wish to update.\\n    function poke(uint256 _tokenId) external;\\n\\n    /// @notice Called by users to vote for pools. Votes distributed proportionally based on weights.\\n    ///         Can only vote or deposit into a managed NFT once per epoch.\\n    ///         Can only vote for gauges that have not been killed.\\n    /// @dev Weights are distributed proportional to the sum of the weights in the array.\\n    ///      Throws if length of _poolVote and _weights do not match.\\n    /// @param _tokenId     Id of veNFT you are voting with.\\n    /// @param _poolVote    Array of pools you are voting for.\\n    /// @param _weights     Weights of pools.\\n    function vote(\\n        uint256 _tokenId,\\n        address[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external;\\n\\n    /// @notice Called by users to reset voting state. Required if you wish to make changes to\\n    ///         veNFT state (e.g. merge, split, deposit into managed etc).\\n    ///         Cannot reset in the same epoch that you voted in.\\n    ///         Can vote or deposit into a managed NFT again after reset.\\n    /// @param _tokenId Id of veNFT you are reseting.\\n    function reset(uint256 _tokenId) external;\\n\\n    /// @notice Called by users to deposit into a managed NFT.\\n    ///         Can only vote or deposit into a managed NFT once per epoch.\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    /// @dev Throws if not approved or owner.\\n    ///      Throws if managed NFT is inactive.\\n    ///      Throws if depositing within privileged window (one hour prior to epoch flip).\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Called by users to withdraw from a managed NFT.\\n    ///         Cannot do it in the same epoch that you deposited into a managed NFT.\\n    ///         Can vote or deposit into a managed NFT again after withdrawing.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Claim emissions from gauges.\\n    /// @param _gauges Array of gauges to collect emissions from.\\n    function claimRewards(address[] memory _gauges) external;\\n\\n    /// @notice Claim bribes for a given NFT.\\n    /// @dev Utility to help batch bribe claims.\\n    /// @param _bribes  Array of BribeVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as bribes.\\n    /// @param _tokenId Id of veNFT that you wish to claim bribes for.\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Claim fees for a given NFT.\\n    /// @dev Utility to help batch fee claims.\\n    /// @param _fees    Array of FeesVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as fees.\\n    /// @param _tokenId Id of veNFT that you wish to claim fees for.\\n    function claimFees(\\n        address[] memory _fees,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Set new governor.\\n    /// @dev Throws if not called by governor.\\n    /// @param _governor .\\n    function setGovernor(address _governor) external;\\n\\n    /// @notice Set new epoch based governor.\\n    /// @dev Throws if not called by governor.\\n    /// @param _epochGovernor .\\n    function setEpochGovernor(address _epochGovernor) external;\\n\\n    /// @notice Set new emergency council.\\n    /// @dev Throws if not called by emergency council.\\n    /// @param _emergencyCouncil .\\n    function setEmergencyCouncil(address _emergencyCouncil) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token for use in bribes.\\n    /// @dev Throws if not called by governor.\\n    /// @param _token .\\n    /// @param _bool .\\n    function whitelistToken(address _token, bool _bool) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if already whitelisted.\\n    /// @param _tokenId .\\n    /// @param _bool .\\n    function whitelistNFT(uint256 _tokenId, bool _bool) external;\\n\\n    /// @notice Create a new gauge (unpermissioned).\\n    /// @dev Governor can create a new gauge for a pool with any address.\\n    /// @param _poolFactory .\\n    /// @param _votingRewardsFactory .\\n    /// @param _gaugeFactory .\\n    /// @param _pool .\\n    function createGauge(\\n        address _poolFactory,\\n        address _votingRewardsFactory,\\n        address _gaugeFactory,\\n        address _pool\\n    ) external returns (address);\\n\\n    /// @notice Kills a gauge. The gauge will not receive any new emissions and cannot be deposited into.\\n    ///         Can still withdraw from gauge.\\n    /// @dev Throws if not called by emergency council.\\n    ///      Throws if gauge already killed.\\n    /// @param _gauge .\\n    function killGauge(address _gauge) external;\\n\\n    /// @notice Revives a killed gauge. Gauge will can receive emissions and deposits again.\\n    /// @dev Throws if not called by emergency council.\\n    ///      Throws if gauge is not killed.\\n    /// @param _gauge .\\n    function reviveGauge(address _gauge) external;\\n\\n    /// @dev Update claims to emissions for an array of gauges.\\n    /// @param _gauges Array of gauges to update emissions for.\\n    function updateFor(address[] memory _gauges) external;\\n\\n    /// @dev Update claims to emissions for gauges based on their pool id as stored in Voter.\\n    /// @param _start   Starting index of pools.\\n    /// @param _end     Ending index of pools.\\n    function updateFor(uint256 _start, uint256 _end) external;\\n\\n    /// @dev Update claims to emissions for single gauge\\n    /// @param _gauge .\\n    function updateFor(address _gauge) external;\\n}\\n\",\"keccak256\":\"0xbdc38eb199a98164dd3e76169da646779658cc19134b5374626c28d175f689ff\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721, IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IVotes} from \\\"../governance/IVotes.sol\\\";\\n\\ninterface IVotingEscrow is IVotes, IERC4906, IERC721Metadata {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n        bool isPermanent;\\n    }\\n\\n    struct UserPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanent;\\n    }\\n\\n    struct GlobalPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanentLockBalance;\\n    }\\n\\n    /// @notice A checkpoint for recorded delegated voting weights at a certain timestamp\\n    struct Checkpoint {\\n        uint256 fromTimestamp;\\n        address owner;\\n        uint256 delegatedBalance;\\n        uint256 delegatee;\\n    }\\n\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    /// @dev Different types of veNFTs:\\n    /// NORMAL  - typical veNFT\\n    /// LOCKED  - veNFT which is locked into a MANAGED veNFT\\n    /// MANAGED - veNFT which can accept the deposit of NORMAL veNFTs\\n    enum EscrowType {\\n        NORMAL,\\n        LOCKED,\\n        MANAGED\\n    }\\n\\n    error AlreadyVoted();\\n    error AmountTooBig();\\n    error ERC721ReceiverRejectedTokens();\\n    error ERC721TransferToNonERC721ReceiverImplementer();\\n    error InvalidNonce();\\n    error InvalidSignature();\\n    error InvalidManagedNFTId();\\n    error LockDurationNotInFuture();\\n    error LockDurationTooLong();\\n    error LockExpired();\\n    error LockNotExpired();\\n    error NoLockFound();\\n    error NonExistentToken();\\n    error NotApprovedOrOwner();\\n    error NotDistributor();\\n    error NotEmergencyCouncilOrGovernor();\\n    error NotGovernor();\\n    error NotGovernorOrManager();\\n    error NotManagedNFT();\\n    error NotManagedOrNormalNFT();\\n    error NotLockedNFT();\\n    error NotNormalNFT();\\n    error NotPermanentLock();\\n    error NotOwner();\\n    error NotTeam();\\n    error NotVoter();\\n    error OwnershipChange();\\n    error PermanentLock();\\n    error SameAddress();\\n    error SameNFT();\\n    error SameState();\\n    error SplitNotAllowed();\\n    error SignatureExpired();\\n    error TooManyTokenIDs();\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error ZeroBalance();\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        DepositType indexed depositType,\\n        uint256 value,\\n        uint256 locktime,\\n        uint256 ts\\n    );\\n    event Withdraw(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        uint256 ts\\n    );\\n    event LockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event UnlockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event Supply(uint256 prevSupply, uint256 supply);\\n    event Merge(\\n        address indexed _sender,\\n        uint256 indexed _from,\\n        uint256 indexed _to,\\n        uint256 _amountFrom,\\n        uint256 _amountTo,\\n        uint256 _amountFinal,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event Split(\\n        uint256 indexed _from,\\n        uint256 indexed _tokenId1,\\n        uint256 indexed _tokenId2,\\n        address _sender,\\n        uint256 _splitAmount1,\\n        uint256 _splitAmount2,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event CreateManaged(\\n        address indexed _to,\\n        uint256 indexed _mTokenId,\\n        address indexed _from,\\n        address _lockedManagedReward,\\n        address _freeManagedReward\\n    );\\n    event DepositManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event WithdrawManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event SetAllowedManager(address indexed _allowedManager);\\n\\n    // State variables\\n    function factoryRegistry() external view returns (address);\\n\\n    function token() external view returns (address);\\n\\n    function distributor() external view returns (address);\\n\\n    function voter() external view returns (address);\\n\\n    function team() external view returns (address);\\n\\n    function artProxy() external view returns (address);\\n\\n    function allowedManager() external view returns (address);\\n\\n    function tokenId() external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping of token id to escrow type\\n    ///      Takes advantage of the fact default value is EscrowType.NORMAL\\n    function escrowType(uint256 tokenId) external view returns (EscrowType);\\n\\n    /// @dev Mapping of token id to managed id\\n    function idToManaged(\\n        uint256 tokenId\\n    ) external view returns (uint256 managedTokenId);\\n\\n    /// @dev Mapping of user token id to managed token id to weight of token id\\n    function weights(\\n        uint256 tokenId,\\n        uint256 managedTokenId\\n    ) external view returns (uint256 weight);\\n\\n    /// @dev Mapping of managed id to deactivated state\\n    function deactivated(uint256 tokenId) external view returns (bool inactive);\\n\\n    /// @dev Mapping from managed nft id to locked managed rewards\\n    ///      `token` denominated rewards (rebases/rewards) stored in locked managed rewards contract\\n    ///      to prevent co-mingling of assets\\n    function managedToLocked(uint256 tokenId) external view returns (address);\\n\\n    /// @dev Mapping from managed nft id to free managed rewards contract\\n    ///      these rewards can be freely withdrawn by users\\n    function managedToFree(uint256 tokenId) external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Create managed NFT (a permanent lock) for use within ecosystem.\\n    /// @dev Throws if address already owns a managed NFT.\\n    /// @return _mTokenId managed token id.\\n    function createManagedLockFor(\\n        address _to\\n    ) external returns (uint256 _mTokenId);\\n\\n    /// @notice Delegates balance to managed nft\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    ///         Permanent locks that are deposited will automatically unlock.\\n    /// @dev Managed nft will remain max-locked as long as there is at least one\\n    ///      deposit or withdrawal per week.\\n    ///      Throws if deposit nft is managed.\\n    ///      Throws if recipient nft is not managed.\\n    ///      Throws if deposit nft is already locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited\\n    /// @param _mTokenId tokenId of managed NFT that will receive the deposit\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Retrieves locked rewards and withdraws balance from managed nft.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    /// @dev Throws if NFT not locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Permit one address to call createManagedLockFor() that is not Voter.governor()\\n    function setAllowedManager(address _allowedManager) external;\\n\\n    /// @notice Set Managed NFT state. Inactive NFTs cannot be deposited into.\\n    /// @param _mTokenId managed nft state to set\\n    /// @param _state true => inactive, false => active\\n    function setManagedState(uint256 _mTokenId, bool _state) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function version() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setTeam(address _team) external;\\n\\n    function setArtProxy(address _proxy) external;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenId\\n    function ownerToNFTokenIdList(\\n        address _owner,\\n        uint256 _index\\n    ) external view returns (uint256 _tokenId);\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(\\n        uint256 _tokenId\\n    ) external view returns (address operator);\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /// @notice Check whether spender is owner or an approved user for a given veNFT\\n    /// @param _spender .\\n    /// @param _tokenId .\\n    function isApprovedOrOwner(\\n        address _spender,\\n        uint256 _tokenId\\n    ) external returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function supportsInterface(\\n        bytes4 _interfaceID\\n    ) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ESCROW STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function epoch() external view returns (uint256);\\n\\n    function supply() external view returns (uint256);\\n\\n    function userPointEpoch(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _epoch);\\n\\n    /// @notice time -> signed slope change\\n    function slopeChanges(uint256 _timestamp) external view returns (int128);\\n\\n    /// @notice account -> can split\\n    function canSplit(address _account) external view returns (bool);\\n\\n    /// @notice Global point history at a given index\\n    function pointHistory(\\n        uint256 _loc\\n    ) external view returns (GlobalPoint memory);\\n\\n    /// @notice Get the LockedBalance (amount, end) of a _tokenId\\n    /// @param _tokenId .\\n    /// @return LockedBalance of _tokenId\\n    function locked(\\n        uint256 _tokenId\\n    ) external view returns (LockedBalance memory);\\n\\n    /// @notice User -> UserPoint[userEpoch]\\n    function userPointHistory(\\n        uint256 _tokenId,\\n        uint256 _loc\\n    ) external view returns (UserPoint memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ESCROW LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external;\\n\\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _tokenId lock NFT\\n    /// @param _value Amount to add to user's lock\\n    function depositFor(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @return TokenId of created veNFT\\n    function createLock(\\n        uint256 _value,\\n        uint256 _lockDuration\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    /// @return TokenId of created veNFT\\n    function createLockFor(\\n        uint256 _value,\\n        uint256 _lockDuration,\\n        address _to\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increaseAmount(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Extend the unlock time for `_tokenId`\\n    ///         Cannot extend lock time of permanent locks\\n    /// @param _lockDuration New number of seconds until tokens unlock\\n    function increaseUnlockTime(\\n        uint256 _tokenId,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    /// @notice Withdraw all tokens for `_tokenId`\\n    /// @dev Only possible if the lock is both expired and not permanent\\n    function withdraw(uint256 _tokenId) external;\\n\\n    /// @notice Merges `_from` into `_to`.\\n    /// @dev Cannot merge `_from` locks that are permanent or have already voted this epoch.\\n    ///      Cannot merge `_to` locks that have already expired.\\n    /// @param _from VeNFT to merge from.\\n    /// @param _to VeNFT to merge into.\\n    function merge(uint256 _from, uint256 _to) external;\\n\\n    /// @notice Splits veNFT into two new veNFTS - one with oldLocked.amount - `_amount`, and the second with `_amount`\\n    /// @dev    This burns the tokenId of the target veNFT\\n    ///         Callable by approved or owner\\n    ///         Returns the two new split veNFTs to owner\\n    ///         If `from` is permanent, will automatically dedelegate.\\n    /// @param _from VeNFT to split.\\n    /// @param _amount Amount to split from veNFT.\\n    /// @return _tokenId1 Return tokenId of veNFT with oldLocked.amount - `_amount`.\\n    /// @return _tokenId2 Return tokenId of veNFT with `_amount`.\\n    function split(\\n        uint256 _from,\\n        uint256 _amount\\n    ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\n\\n    /// @notice Toggle split for a specific veNFT.\\n    /// @dev Toggle split for address(0) to enable or disable for all.\\n    /// @param _account Address to toggle split permissions\\n    /// @param _bool True to allow, false to disallow\\n    function toggleSplit(address _account, bool _bool) external;\\n\\n    /// @notice Permanently lock a veNFT. Voting power will be equal to\\n    ///         `LockedBalance.amount` with no decay. Required to delegate.\\n    /// @dev Only callable by unlocked normal veNFTs.\\n    /// @param _tokenId tokenId to lock.\\n    function lockPermanent(uint256 _tokenId) external;\\n\\n    /// @notice Unlock a permanently locked veNFT. Voting power will decay.\\n    ///         Will automatically dedelegate if delegated.\\n    /// @dev Only callable by permanently locked veNFTs.\\n    ///      Cannot unlock if already voted this epoch.\\n    /// @param _tokenId tokenId to unlock.\\n    function unlockPermanent(uint256 _tokenId) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           GAUGE VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Get the voting power for _tokenId at the current timestamp\\n    /// @dev Returns 0 if called in the same block as a transfer.\\n    /// @param _tokenId .\\n    /// @return Voting power\\n    function balanceOfNFT(uint256 _tokenId) external view returns (uint256);\\n\\n    /// @notice Get the voting power for _tokenId at a given timestamp\\n    /// @param _tokenId .\\n    /// @param _t Timestamp to query voting power\\n    /// @return Voting power\\n    function balanceOfNFTAt(\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at current timestamp\\n    /// @return Total voting power at current timestamp\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at a given timestamp\\n    /// @param _t Timestamp to query total voting power\\n    /// @return Total voting power at given timestamp\\n    function totalSupplyAt(uint256 _t) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            GAUGE VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice See if a queried _tokenId has actively voted\\n    /// @param _tokenId .\\n    /// @return True if voted, else false\\n    function voted(uint256 _tokenId) external view returns (bool);\\n\\n    /// @notice Set the global state voter and distributor\\n    /// @dev This is only called once, at setup\\n    function setVoterAndDistributor(\\n        address _voter,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Set `voted` for _tokenId to true or false\\n    /// @dev Only callable by voter\\n    /// @param _tokenId .\\n    /// @param _voted .\\n    function voting(uint256 _tokenId, bool _voted) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            DAO VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The number of checkpoints for each tokenId\\n    function numCheckpoints(uint256 tokenId) external view returns (uint48);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    function nonces(address account) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function delegates(uint256 delegator) external view returns (uint256);\\n\\n    /// @notice A record of delegated token checkpoints for each account, by index\\n    /// @param tokenId .\\n    /// @param index .\\n    /// @return Checkpoint\\n    function checkpoints(\\n        uint256 tokenId,\\n        uint48 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @inheritdoc IVotes\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function getPastTotalSupply(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             DAO VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotes\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /// @inheritdoc IVotes\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x509e3f2bc169f2f08c81bcf062e50ec842cc05e8c9fc2c31b3222c08603e1630\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IManagedRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IManagedRewardsFactory {\\n    event ManagedRewardCreated(\\n        address indexed voter,\\n        address indexed lockedManagedReward,\\n        address indexed freeManagedReward\\n    );\\n\\n    /// @notice creates a LockedManagedReward and a FreeManagedReward contract for a managed veNFT\\n    /// @param _forwarder Address of trusted forwarder\\n    /// @param _voter Address of Voter.sol\\n    /// @return lockedManagedReward Address of LockedManagedReward contract created\\n    /// @return freeManagedReward   Address of FreeManagedReward contract created\\n    function createRewards(\\n        address _forwarder,\\n        address _voter\\n    ) external returns (address lockedManagedReward, address freeManagedReward);\\n}\\n\",\"keccak256\":\"0x3f4ef0d7d8c7d30564245dcf352f5459f9f50ae196abe0a0baf431adc93f7bb7\",\"license\":\"MIT\"},\"contracts/libraries/TimeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nlibrary TimeLibrary {\\n    uint256 internal constant WEEK = 7 days;\\n\\n    /// @dev Returns start of epoch based on current timestamp\\n    function epochStart(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK);\\n        }\\n    }\\n\\n    /// @dev Returns start of next epoch / end of current epoch\\n    function epochNext(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + WEEK;\\n        }\\n    }\\n\\n    /// @dev Returns start of voting window\\n    function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + 1 hours;\\n        }\\n    }\\n\\n    /// @dev Returns end of voting window / beginning of unrestricted voting window\\n    function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + WEEK - 1 hours;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa7e1e91cb5a3cea091a4d1aa1096371b5ca8160bd204d22c90283e26eafdd3b7\",\"license\":\"MIT\"},\"contracts/rewards/FreeManagedReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {ManagedReward} from \\\"./ManagedReward.sol\\\";\\nimport {IVotingEscrow} from \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport {IVoter} from \\\"../interfaces/IVoter.sol\\\";\\n\\n/// @notice Stores rewards that are free to be distributed\\n/// @dev Rewards are distributed based on weight contribution to managed nft\\ncontract FreeManagedReward is ManagedReward {\\n    constructor(\\n        address _forwarder,\\n        address _voter\\n    ) ManagedReward(_forwarder, _voter) {}\\n\\n    /// @inheritdoc ManagedReward\\n    function getReward(\\n        uint256 tokenId,\\n        address[] memory tokens\\n    ) external override nonReentrant {\\n        if (!IVotingEscrow(ve).isApprovedOrOwner(_msgSender(), tokenId))\\n            revert NotAuthorized();\\n\\n        address owner = IVotingEscrow(ve).ownerOf(tokenId);\\n\\n        _getReward(owner, tokenId, tokens);\\n    }\\n\\n    /// @inheritdoc ManagedReward\\n    function notifyRewardAmount(\\n        address token,\\n        uint256 amount\\n    ) external override nonReentrant {\\n        address sender = _msgSender();\\n        if (!isReward[token]) {\\n            if (!IVoter(voter).isWhitelistedToken(token))\\n                revert NotWhitelisted();\\n            isReward[token] = true;\\n            rewards.push(token);\\n        }\\n\\n        _notifyRewardAmount(sender, token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xec92deb94336c74efa9e3869d4d1bc8c86689fee5d1e3426c867f674b5c057d0\",\"license\":\"MIT\"},\"contracts/rewards/LockedManagedReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {ManagedReward} from \\\"./ManagedReward.sol\\\";\\nimport {IVotingEscrow} from \\\"../interfaces/IVotingEscrow.sol\\\";\\n\\n/// @notice Stores rewards that are max-locked (i.e. rebases / tokens that were compounded)\\n/// @dev Rewards are distributed based on weight contribution to managed nft\\ncontract LockedManagedReward is ManagedReward {\\n    constructor(\\n        address _forwarder,\\n        address _voter\\n    ) ManagedReward(_forwarder, _voter) {}\\n\\n    /// @inheritdoc ManagedReward\\n    /// @dev Called by VotingEscrow to retrieve locked rewards\\n    function getReward(\\n        uint256 tokenId,\\n        address[] memory tokens\\n    ) external override nonReentrant {\\n        address sender = _msgSender();\\n        if (sender != ve) revert NotVotingEscrow();\\n        if (tokens.length != 1) revert NotSingleToken();\\n        if (tokens[0] != IVotingEscrow(ve).token()) revert NotEscrowToken();\\n\\n        _getReward(sender, tokenId, tokens);\\n    }\\n\\n    /// @inheritdoc ManagedReward\\n    /// @dev Called by VotingEscrow to add rebases / compounded rewards for disbursement\\n    function notifyRewardAmount(\\n        address token,\\n        uint256 amount\\n    ) external override nonReentrant {\\n        address sender = _msgSender();\\n        if (sender != ve) revert NotVotingEscrow();\\n        if (token != IVotingEscrow(ve).token()) revert NotEscrowToken();\\n\\n        _notifyRewardAmount(sender, token, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe84cfb60e2637a97c72c321290a5596f1b92b0d83b8c6d897bc01bbe7a5c8262\",\"license\":\"MIT\"},\"contracts/rewards/ManagedReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {Reward} from \\\"./Reward.sol\\\";\\nimport {IVotingEscrow} from \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport {IVoter} from \\\"../interfaces/IVoter.sol\\\";\\n\\n/// @title Base managed veNFT reward contract for distribution of rewards by token id\\nabstract contract ManagedReward is Reward {\\n    constructor(address _forwarder, address _voter) Reward(_forwarder, _voter) {\\n        address _ve = IVoter(_voter).ve();\\n        address _token = IVotingEscrow(_ve).token();\\n        rewards.push(_token);\\n        isReward[_token] = true;\\n\\n        authorized = _ve;\\n    }\\n\\n    /// @inheritdoc Reward\\n    function getReward(\\n        uint256 tokenId,\\n        address[] memory tokens\\n    ) external virtual override {}\\n\\n    /// @inheritdoc Reward\\n    function notifyRewardAmount(\\n        address token,\\n        uint256 amount\\n    ) external virtual override {}\\n}\\n\",\"keccak256\":\"0xe2fa71911c66ff6a8c1fec526a3b3c6cd90cb7e26c0836cb625b68f0573a88f4\",\"license\":\"MIT\"},\"contracts/rewards/Reward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IReward} from \\\"../interfaces/IReward.sol\\\";\\nimport {IVoter} from \\\"../interfaces/IVoter.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {TimeLibrary} from \\\"../libraries/TimeLibrary.sol\\\";\\n\\n/// @title Base reward contract for distribution of rewards\\nabstract contract Reward is IReward, ERC2771Context, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant DURATION = 7 days;\\n\\n    address public immutable voter;\\n    address public immutable ve;\\n    /// @dev Address which has permission to externally call _deposit() & _withdraw()\\n    address public authorized;\\n\\n    uint256 public totalSupply;\\n    mapping(uint256 => uint256) public balanceOf;\\n    mapping(address => mapping(uint256 => uint256)) public tokenRewardsPerEpoch;\\n    mapping(address => mapping(uint256 => uint256)) public lastEarn;\\n\\n    address[] public rewards;\\n    mapping(address => bool) public isReward;\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint256 timestamp;\\n        uint256 supply;\\n    }\\n\\n    /// @notice A record of balance checkpoints for each account, by index\\n    mapping(uint256 => mapping(uint256 => Checkpoint)) public checkpoints;\\n    /// @notice The number of checkpoints for each account\\n    mapping(uint256 => uint256) public numCheckpoints;\\n    /// @notice A record of balance checkpoints for each token, by index\\n    mapping(uint256 => SupplyCheckpoint) public supplyCheckpoints;\\n    /// @notice The number of checkpoints\\n    uint256 public supplyNumCheckpoints;\\n\\n    constructor(address _forwarder, address _voter) ERC2771Context(_forwarder) {\\n        voter = _voter;\\n        ve = IVoter(_voter).ve();\\n    }\\n\\n    /// @inheritdoc IReward\\n    function getPriorBalanceIndex(\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) public view returns (uint256) {\\n        uint256 nCheckpoints = numCheckpoints[tokenId];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[tokenId][nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[tokenId][0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[tokenId][center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    /// @inheritdoc IReward\\n    function getPriorSupplyIndex(\\n        uint256 timestamp\\n    ) public view returns (uint256) {\\n        uint256 nCheckpoints = supplyNumCheckpoints;\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (supplyCheckpoints[nCheckpoints - 1].timestamp <= timestamp) {\\n            return (nCheckpoints - 1);\\n        }\\n\\n        // Next check implicit zero balance\\n        if (supplyCheckpoints[0].timestamp > timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 lower = 0;\\n        uint256 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            SupplyCheckpoint memory cp = supplyCheckpoints[center];\\n            if (cp.timestamp == timestamp) {\\n                return center;\\n            } else if (cp.timestamp < timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    function _writeCheckpoint(uint256 tokenId, uint256 balance) internal {\\n        uint256 _nCheckPoints = numCheckpoints[tokenId];\\n        uint256 _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            TimeLibrary.epochStart(\\n                checkpoints[tokenId][_nCheckPoints - 1].timestamp\\n            ) ==\\n            TimeLibrary.epochStart(_timestamp)\\n        ) {\\n            checkpoints[tokenId][_nCheckPoints - 1] = Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n        } else {\\n            checkpoints[tokenId][_nCheckPoints] = Checkpoint(\\n                _timestamp,\\n                balance\\n            );\\n            numCheckpoints[tokenId] = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function _writeSupplyCheckpoint() internal {\\n        uint256 _nCheckPoints = supplyNumCheckpoints;\\n        uint256 _timestamp = block.timestamp;\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            TimeLibrary.epochStart(\\n                supplyCheckpoints[_nCheckPoints - 1].timestamp\\n            ) ==\\n            TimeLibrary.epochStart(_timestamp)\\n        ) {\\n            supplyCheckpoints[_nCheckPoints - 1] = SupplyCheckpoint(\\n                _timestamp,\\n                totalSupply\\n            );\\n        } else {\\n            supplyCheckpoints[_nCheckPoints] = SupplyCheckpoint(\\n                _timestamp,\\n                totalSupply\\n            );\\n            supplyNumCheckpoints = _nCheckPoints + 1;\\n        }\\n    }\\n\\n    function rewardsListLength() external view returns (uint256) {\\n        return rewards.length;\\n    }\\n\\n    /// @inheritdoc IReward\\n    function earned(\\n        address token,\\n        uint256 tokenId\\n    ) public view returns (uint256) {\\n        if (numCheckpoints[tokenId] == 0) {\\n            return 0;\\n        }\\n\\n        uint256 reward = 0;\\n        uint256 _supply = 1;\\n        uint256 _currTs = TimeLibrary.epochStart(lastEarn[token][tokenId]); // take epoch last claimed in as starting point\\n        uint256 _index = getPriorBalanceIndex(tokenId, _currTs);\\n        Checkpoint memory cp0 = checkpoints[tokenId][_index];\\n\\n        // accounts for case where lastEarn is before first checkpoint\\n        _currTs = Math.max(_currTs, TimeLibrary.epochStart(cp0.timestamp));\\n\\n        // get epochs between current epoch and first checkpoint in same epoch as last claim\\n        uint256 numEpochs = (TimeLibrary.epochStart(block.timestamp) -\\n            _currTs) / DURATION;\\n\\n        if (numEpochs > 0) {\\n            for (uint256 i = 0; i < numEpochs; i++) {\\n                // get index of last checkpoint in this epoch\\n                _index = getPriorBalanceIndex(tokenId, _currTs + DURATION - 1);\\n                // get checkpoint in this epoch\\n                cp0 = checkpoints[tokenId][_index];\\n                // get supply of last checkpoint in this epoch\\n                _supply = Math.max(\\n                    supplyCheckpoints[\\n                        getPriorSupplyIndex(_currTs + DURATION - 1)\\n                    ].supply,\\n                    1\\n                );\\n                reward +=\\n                    (cp0.balanceOf * tokenRewardsPerEpoch[token][_currTs]) /\\n                    _supply;\\n                _currTs += DURATION;\\n            }\\n        }\\n\\n        return reward;\\n    }\\n\\n    /// @inheritdoc IReward\\n    function _deposit(uint256 amount, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        if (sender != authorized) revert NotAuthorized();\\n\\n        totalSupply += amount;\\n        balanceOf[tokenId] += amount;\\n\\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\\n        _writeSupplyCheckpoint();\\n\\n        emit Deposit(sender, tokenId, amount);\\n    }\\n\\n    /// @inheritdoc IReward\\n    function _withdraw(uint256 amount, uint256 tokenId) external {\\n        address sender = _msgSender();\\n        if (sender != authorized) revert NotAuthorized();\\n\\n        totalSupply -= amount;\\n        balanceOf[tokenId] -= amount;\\n\\n        _writeCheckpoint(tokenId, balanceOf[tokenId]);\\n        _writeSupplyCheckpoint();\\n\\n        emit Withdraw(sender, tokenId, amount);\\n    }\\n\\n    /// @inheritdoc IReward\\n    function getReward(\\n        uint256 tokenId,\\n        address[] memory tokens\\n    ) external virtual nonReentrant {}\\n\\n    /// @dev used with all getReward implementations\\n    function _getReward(\\n        address recipient,\\n        uint256 tokenId,\\n        address[] memory tokens\\n    ) internal {\\n        uint256 _length = tokens.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            uint256 _reward = earned(tokens[i], tokenId);\\n            lastEarn[tokens[i]][tokenId] = block.timestamp;\\n            if (_reward > 0) IERC20(tokens[i]).safeTransfer(recipient, _reward);\\n\\n            emit ClaimRewards(recipient, tokens[i], _reward);\\n        }\\n    }\\n\\n    /// @inheritdoc IReward\\n    function notifyRewardAmount(\\n        address token,\\n        uint256 amount\\n    ) external virtual nonReentrant {}\\n\\n    /// @dev used within all notifyRewardAmount implementations\\n    function _notifyRewardAmount(\\n        address sender,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) revert ZeroAmount();\\n        IERC20(token).safeTransferFrom(sender, address(this), amount);\\n\\n        uint256 epochStart = TimeLibrary.epochStart(block.timestamp);\\n        tokenRewardsPerEpoch[token][epochStart] += amount;\\n\\n        emit NotifyReward(sender, token, epochStart, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x6414267ac667e6a1a38dfcef113c788adf0033dfdda8c1c85da3d36128120e4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613663806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dabc8e8314610030575b600080fd5b61004361003e366004610154565b61005a565b604051610051929190610187565b60405180910390f35b600080838360405161006b9061011e565b610076929190610187565b604051809103906000f080158015610092573d6000803e3d6000fd5b50915083836040516100a39061012b565b6100ae929190610187565b604051809103906000f0801580156100ca573d6000803e3d6000fd5b509050806001600160a01b0316826001600160a01b0316846001600160a01b03167f951f6f2ffc705efc870b0c6023fb94c7edece24c87077884b6d08a5cd44e6aa760405160405180910390a49250929050565b611a32806101a283390190565b611a5a80611bd483390190565b80356001600160a01b038116811461014f57600080fd5b919050565b6000806040838503121561016757600080fd5b61017083610138565b915061017e60208401610138565b90509250929050565b6001600160a01b039283168152911660208201526040019056fe60e06040523480156200001157600080fd5b5060405162001a3238038062001a32833981016040819052620000349162000240565b6001600160a01b038083166080526001600055811660a081905260408051630fc2838b60e11b81529051849284928492849291631f8507169160048083019260209291908290030181865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b8919062000278565b6001600160a01b031660c0816001600160a01b03168152505050506000816001600160a01b0316631f8507166040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a919062000278565b90506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a3919062000278565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03199081166001600160a01b03948516908117909255600091825260076020526040909120805460ff1916831790558154169390911692909217909155506200029d9350505050565b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b6200025f8362000223565b91506200026f6020840162000223565b90509250929050565b6000602082840312156200028b57600080fd5b620002968262000223565b9392505050565b60805160a05160c051611749620002e96000396000818161017d01528181610963015281816109b501528181610b930152610c07015260006101e2015260006105c401526117496000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806392777b29116100c3578063e8111a121161007c578063e8111a1214610352578063f25e55a51461035b578063f301af4214610386578063f320772314610399578063f5f8d365146103ac578063f7412baf146103bf57600080fd5b806392777b29146102c45780639cc7f708146102ef5780639e2bf22c1461030f578063a28d4c9c14610324578063b66503cf14610337578063e68863961461034a57600080fd5b806346c96aac1161011557806346c96aac146101dd57806349dcc204146102045780634d5ce0381461024b578063505897931461027e578063572b6c051461029e57806376f4be36146102b157600080fd5b806318160ddd146101525780631be052891461016e5780631f850716146101785780633e491d47146101b7578063456cb7c6146101ca575b600080fd5b61015b60025481565b6040519081526020015b60405180910390f35b61015b62093a8081565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610165565b61015b6101c536600461146b565b6103e6565b60015461019f906001600160a01b031681565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b610236610212366004611497565b60086020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610165565b61026e6102593660046114b9565b60076020526000908152604090205460ff1681565b6040519015158152602001610165565b61015b61028c3660046114d6565b60096020526000908152604090205481565b61026e6102ac3660046114b9565b6105c2565b61015b6102bf3660046114d6565b6105f4565b61015b6102d236600461146b565b600460209081526000928352604080842090915290825290205481565b61015b6102fd3660046114d6565b60036020526000908152604090205481565b61032261031d366004611497565b610728565b005b61015b610332366004611497565b610808565b61032261034536600461146b565b61094d565b60065461015b565b61015b600b5481565b61015b61036936600461146b565b600560209081526000928352604080842090915290825290205481565b61019f6103943660046114d6565b610a80565b6103226103a7366004611497565b610aaa565b6103226103ba366004611505565b610b7d565b6102366103cd3660046114d6565b600a602052600090815260409020805460019091015482565b6000818152600960205260408120548103610403575060006105bc565b6001600160a01b038316600090815260056020908152604080832085845290915281205460019062093a80810690038261043d8683610808565b600087815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509061048890849062093a8081069003610cdd565b9250600062093a8061049f854283810690036115ec565b6104a991906115ff565b905080156105b35760005b818110156105b1576104d98960016104cf62093a8089611621565b61033291906115ec565b60008a815260086020908152604080832084845282528083208151808301909252805482526001908101549282019290925292965091945061054d91600a91906105349061052a62093a808b611621565b6102bf91906115ec565b8152602001908152602001600020600101546001610cdd565b6001600160a01b038b1660009081526004602090815260408083208984528252909120549085015191975087916105849190611634565b61058e91906115ff565b6105989088611621565b96506105a762093a8086611621565b94506001016104b4565b505b50939450505050505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b600b5460009080820361060a5750600092915050565b82600a600061061a6001856115ec565b815260200190815260200160002060000154116106435761063c6001826115ec565b9392505050565b60008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35483101561067e5750600092915050565b60008061068c6001846115ec565b90505b8181111561072057600060026106a584846115ec565b6106af91906115ff565b6106b990836115ec565b6000818152600a60209081526040918290208251808401909352805480845260019091015491830191909152919250908790036106fa575095945050505050565b805187111561070b57819350610719565b6107166001836115ec565b92505b505061068f565b509392505050565b6000610732610cf3565b6001549091506001600160a01b038083169116146107635760405163ea8e4eb560e01b815260040160405180910390fd5b826002600082825461077591906115ec565b9091555050600082815260036020526040812080548592906107989084906115ec565b90915550506000828152600360205260409020546107b7908390610d15565b6107bf610e1f565b81816001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568856040516107fb91815260200190565b60405180910390a3505050565b6000828152600960205260408120548082036108285760009150506105bc565b600084815260086020526040812084916108436001856115ec565b8152602001908152602001600020600001541161086d576108656001826115ec565b9150506105bc565b60008481526008602090815260408083208380529091529020548310156108985760009150506105bc565b6000806108a66001846115ec565b90505b8181111561094457600060026108bf84846115ec565b6108c991906115ff565b6108d390836115ec565b600088815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509087900361091e575093506105bc92505050565b805187111561092f5781935061093d565b61093a6001836115ec565b92505b50506108a9565b50949350505050565b610955610ed7565b600061095f610cf3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146109b3576040516306b746df60e51b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a35919061164b565b6001600160a01b0316836001600160a01b031614610a6657604051630b9eb1c560e41b815260040160405180910390fd5b610a71818484610f35565b50610a7c6001600055565b5050565b60068181548110610a9057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610ab4610cf3565b6001549091506001600160a01b03808316911614610ae55760405163ea8e4eb560e01b815260040160405180910390fd5b8260026000828254610af79190611621565b909155505060008281526003602052604081208054859290610b1a908490611621565b9091555050600082815260036020526040902054610b39908390610d15565b610b41610e1f565b81816001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15856040516107fb91815260200190565b610b85610ed7565b6000610b8f610cf3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610be3576040516306b746df60e51b815260040160405180910390fd5b8151600114610c055760405163801f099f60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061164b565b6001600160a01b031682600081518110610ca357610ca3611668565b60200260200101516001600160a01b031614610cd257604051630b9eb1c560e41b815260040160405180910390fd5b610a7181848461100f565b6000818311610cec578161063c565b5090919050565b6000610cfe336105c2565b15610d10575060131936013560601c90565b503390565b600082815260096020526040902054428115801590610d73575062093a80810681036000858152600860205260408120610d7191610d546001876115ec565b81526020019081526020016000206000015462093a808106900390565b145b15610dc9576040805180820182528281526020808201869052600087815260089091529182209091610da66001866115ec565b815260208082019290925260400160002082518155910151600190910155610e19565b6040805180820182528281526020808201868152600088815260088352848120878252909252929020905181559051600191820155610e09908390611621565b6000858152600960205260409020555b50505050565b600b54428115801590610e49575062093a8081068103610e47600a6000610d546001876115ec565b145b15610e9457604080518082019091528181526002546020820152600a6000610e726001866115ec565b8152602080820192909252604001600020825181559101516001909101555050565b60408051808201825282815260025460208083019182526000868152600a90915292909220905181559051600191820155610ed0908390611621565b600b555050565b600260005403610f2e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b80600003610f5657604051631f2a200560e01b815260040160405180910390fd5b610f6b6001600160a01b03831684308461113e565b6000610f7c4262093a808106900390565b6001600160a01b0384166000908152600460209081526040808320848452909152812080549293508492909190610fb4908490611621565b9250508190555080836001600160a01b0316856001600160a01b03167f52977ea98a2220a03ee9ba5cb003ada08d394ea10155483c95dc2dc77a7eb24b8560405161100191815260200190565b60405180910390a450505050565b805160005b8181101561113757600061104184838151811061103357611033611668565b6020026020010151866103e6565b9050426005600086858151811061105a5761105a611668565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812089825290925290205580156110c8576110c886828685815181106110a8576110a8611668565b60200260200101516001600160a01b03166111a99092919063ffffffff16565b8382815181106110da576110da611668565b60200260200101516001600160a01b0316866001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc98360405161112691815260200190565b60405180910390a350600101611014565b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e199085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111de565b6040516001600160a01b0383166024820152604481018290526111d990849063a9059cbb60e01b90606401611172565b505050565b6000611233826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112b39092919063ffffffff16565b9050805160001480611254575080806020019051810190611254919061167e565b6111d95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f25565b60606112c284846000856112ca565b949350505050565b60608247101561132b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610f25565b600080866001600160a01b0316858760405161134791906116c4565b60006040518083038185875af1925050503d8060008114611384576040519150601f19603f3d011682016040523d82523d6000602084013e611389565b606091505b509150915061139a878383876113a5565b979650505050505050565b6060831561141457825160000361140d576001600160a01b0385163b61140d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f25565b50816112c2565b6112c283838151156114295781518083602001fd5b8060405162461bcd60e51b8152600401610f2591906116e0565b6001600160a01b038116811461145857600080fd5b50565b803561146681611443565b919050565b6000806040838503121561147e57600080fd5b823561148981611443565b946020939093013593505050565b600080604083850312156114aa57600080fd5b50508035926020909101359150565b6000602082840312156114cb57600080fd5b813561063c81611443565b6000602082840312156114e857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561151857600080fd5b8235915060208084013567ffffffffffffffff8082111561153857600080fd5b818601915086601f83011261154c57600080fd5b81358181111561155e5761155e6114ef565b8060051b604051601f19603f83011681018181108582111715611583576115836114ef565b6040529182528482019250838101850191898311156115a157600080fd5b938501935b828510156115c6576115b78561145b565b845293850193928501926115a6565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105bc576105bc6115d6565b60008261161c57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105bc576105bc6115d6565b80820281158282048414176105bc576105bc6115d6565b60006020828403121561165d57600080fd5b815161063c81611443565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561169057600080fd5b8151801515811461063c57600080fd5b60005b838110156116bb5781810151838201526020016116a3565b50506000910152565b600082516116d68184602087016116a0565b9190910192915050565b60208152600082518060208401526116ff8160408501602087016116a0565b601f01601f1916919091016040019291505056fea264697066735822122074ce3816f9b7922f0819e4bceb52ef7f453e99d3946a976a07b1e4954436a5e064736f6c6343000818003360e06040523480156200001157600080fd5b5060405162001a5a38038062001a5a833981016040819052620000349162000240565b6001600160a01b038083166080526001600055811660a081905260408051630fc2838b60e11b81529051849284928492849291631f8507169160048083019260209291908290030181865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b8919062000278565b6001600160a01b031660c0816001600160a01b03168152505050506000816001600160a01b0316631f8507166040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a919062000278565b90506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a3919062000278565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03199081166001600160a01b03948516908117909255600091825260076020526040909120805460ff1916831790558154169390911692909217909155506200029d9350505050565b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b6200025f8362000223565b91506200026f6020840162000223565b90509250929050565b6000602082840312156200028b57600080fd5b620002968262000223565b9392505050565b60805160a05160c051611778620002e26000396000818161017d01528181610bb00152610c8c0152600081816101e201526109a1015260006105c401526117786000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806392777b29116100c3578063e8111a121161007c578063e8111a1214610352578063f25e55a51461035b578063f301af4214610386578063f320772314610399578063f5f8d365146103ac578063f7412baf146103bf57600080fd5b806392777b29146102c45780639cc7f708146102ef5780639e2bf22c1461030f578063a28d4c9c14610324578063b66503cf14610337578063e68863961461034a57600080fd5b806346c96aac1161011557806346c96aac146101dd57806349dcc204146102045780634d5ce0381461024b578063505897931461027e578063572b6c051461029e57806376f4be36146102b157600080fd5b806318160ddd146101525780631be052891461016e5780631f850716146101785780633e491d47146101b7578063456cb7c6146101ca575b600080fd5b61015b60025481565b6040519081526020015b60405180910390f35b61015b62093a8081565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610165565b61015b6101c536600461149a565b6103e6565b60015461019f906001600160a01b031681565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b6102366102123660046114c6565b60086020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610165565b61026e6102593660046114e8565b60076020526000908152604090205460ff1681565b6040519015158152602001610165565b61015b61028c366004611505565b60096020526000908152604090205481565b61026e6102ac3660046114e8565b6105c2565b61015b6102bf366004611505565b6105f4565b61015b6102d236600461149a565b600460209081526000928352604080842090915290825290205481565b61015b6102fd366004611505565b60036020526000908152604090205481565b61032261031d3660046114c6565b610728565b005b61015b6103323660046114c6565b610808565b61032261034536600461149a565b61094d565b60065461015b565b61015b600b5481565b61015b61036936600461149a565b600560209081526000928352604080842090915290825290205481565b61019f610394366004611505565b610aa9565b6103226103a73660046114c6565b610ad3565b6103226103ba366004611534565b610ba6565b6102366103cd366004611505565b600a602052600090815260409020805460019091015482565b6000818152600960205260408120548103610403575060006105bc565b6001600160a01b038316600090815260056020908152604080832085845290915281205460019062093a80810690038261043d8683610808565b600087815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509061048890849062093a8081069003610d0c565b9250600062093a8061049f8542838106900361161b565b6104a9919061162e565b905080156105b35760005b818110156105b1576104d98960016104cf62093a8089611650565b610332919061161b565b60008a815260086020908152604080832084845282528083208151808301909252805482526001908101549282019290925292965091945061054d91600a91906105349061052a62093a808b611650565b6102bf919061161b565b8152602001908152602001600020600101546001610d0c565b6001600160a01b038b1660009081526004602090815260408083208984528252909120549085015191975087916105849190611663565b61058e919061162e565b6105989088611650565b96506105a762093a8086611650565b94506001016104b4565b505b50939450505050505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b600b5460009080820361060a5750600092915050565b82600a600061061a60018561161b565b815260200190815260200160002060000154116106435761063c60018261161b565b9392505050565b60008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35483101561067e5750600092915050565b60008061068c60018461161b565b90505b8181111561072057600060026106a5848461161b565b6106af919061162e565b6106b9908361161b565b6000818152600a60209081526040918290208251808401909352805480845260019091015491830191909152919250908790036106fa575095945050505050565b805187111561070b57819350610719565b61071660018361161b565b92505b505061068f565b509392505050565b6000610732610d22565b6001549091506001600160a01b038083169116146107635760405163ea8e4eb560e01b815260040160405180910390fd5b8260026000828254610775919061161b565b90915550506000828152600360205260408120805485929061079890849061161b565b90915550506000828152600360205260409020546107b7908390610d44565b6107bf610e4e565b81816001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568856040516107fb91815260200190565b60405180910390a3505050565b6000828152600960205260408120548082036108285760009150506105bc565b6000848152600860205260408120849161084360018561161b565b8152602001908152602001600020600001541161086d5761086560018261161b565b9150506105bc565b60008481526008602090815260408083208380529091529020548310156108985760009150506105bc565b6000806108a660018461161b565b90505b8181111561094457600060026108bf848461161b565b6108c9919061162e565b6108d3908361161b565b600088815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509087900361091e575093506105bc92505050565b805187111561092f5781935061093d565b61093a60018361161b565b92505b50506108a9565b50949350505050565b610955610f06565b600061095f610d22565b6001600160a01b03841660009081526007602052604090205490915060ff16610a8f5760405163559bfa4360e11b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ab37f48690602401602060405180830381865afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c919061167a565b610a2957604051630b094f2760e31b815260040160405180910390fd5b6001600160a01b0383166000818152600760205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03191690911790555b610a9a818484610f64565b50610aa56001600055565b5050565b60068181548110610ab957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610add610d22565b6001549091506001600160a01b03808316911614610b0e5760405163ea8e4eb560e01b815260040160405180910390fd5b8260026000828254610b209190611650565b909155505060008281526003602052604081208054859290610b43908490611650565b9091555050600082815260036020526040902054610b62908390610d44565b610b6a610e4e565b81816001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15856040516107fb91815260200190565b610bae610f06565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c2081610be5610d22565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c56919061167a565b610c735760405163ea8e4eb560e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff919061169c565b9050610a9a81848461103e565b6000818311610d1b578161063c565b5090919050565b6000610d2d336105c2565b15610d3f575060131936013560601c90565b503390565b600082815260096020526040902054428115801590610da2575062093a80810681036000858152600860205260408120610da091610d8360018761161b565b81526020019081526020016000206000015462093a808106900390565b145b15610df8576040805180820182528281526020808201869052600087815260089091529182209091610dd560018661161b565b815260208082019290925260400160002082518155910151600190910155610e48565b6040805180820182528281526020808201868152600088815260088352848120878252909252929020905181559051600191820155610e38908390611650565b6000858152600960205260409020555b50505050565b600b54428115801590610e78575062093a8081068103610e76600a6000610d8360018761161b565b145b15610ec357604080518082019091528181526002546020820152600a6000610ea160018661161b565b8152602080820192909252604001600020825181559101516001909101555050565b60408051808201825282815260025460208083019182526000868152600a90915292909220905181559051600191820155610eff908390611650565b600b555050565b600260005403610f5d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b80600003610f8557604051631f2a200560e01b815260040160405180910390fd5b610f9a6001600160a01b03831684308461116d565b6000610fab4262093a808106900390565b6001600160a01b0384166000908152600460209081526040808320848452909152812080549293508492909190610fe3908490611650565b9250508190555080836001600160a01b0316856001600160a01b03167f52977ea98a2220a03ee9ba5cb003ada08d394ea10155483c95dc2dc77a7eb24b8560405161103091815260200190565b60405180910390a450505050565b805160005b81811015611166576000611070848381518110611062576110626116b9565b6020026020010151866103e6565b90504260056000868581518110611089576110896116b9565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812089825290925290205580156110f7576110f786828685815181106110d7576110d76116b9565b60200260200101516001600160a01b03166111d89092919063ffffffff16565b838281518110611109576111096116b9565b60200260200101516001600160a01b0316866001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc98360405161115591815260200190565b60405180910390a350600101611043565b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e489085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261120d565b6040516001600160a01b03831660248201526044810182905261120890849063a9059cbb60e01b906064016111a1565b505050565b6000611262826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112e29092919063ffffffff16565b9050805160001480611283575080806020019051810190611283919061167a565b6112085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f54565b60606112f184846000856112f9565b949350505050565b60608247101561135a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610f54565b600080866001600160a01b0316858760405161137691906116f3565b60006040518083038185875af1925050503d80600081146113b3576040519150601f19603f3d011682016040523d82523d6000602084013e6113b8565b606091505b50915091506113c9878383876113d4565b979650505050505050565b6060831561144357825160000361143c576001600160a01b0385163b61143c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f54565b50816112f1565b6112f183838151156114585781518083602001fd5b8060405162461bcd60e51b8152600401610f54919061170f565b6001600160a01b038116811461148757600080fd5b50565b803561149581611472565b919050565b600080604083850312156114ad57600080fd5b82356114b881611472565b946020939093013593505050565b600080604083850312156114d957600080fd5b50508035926020909101359150565b6000602082840312156114fa57600080fd5b813561063c81611472565b60006020828403121561151757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561154757600080fd5b8235915060208084013567ffffffffffffffff8082111561156757600080fd5b818601915086601f83011261157b57600080fd5b81358181111561158d5761158d61151e565b8060051b604051601f19603f830116810181811085821117156115b2576115b261151e565b6040529182528482019250838101850191898311156115d057600080fd5b938501935b828510156115f5576115e68561148a565b845293850193928501926115d5565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105bc576105bc611605565b60008261164b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105bc576105bc611605565b80820281158282048414176105bc576105bc611605565b60006020828403121561168c57600080fd5b8151801515811461063c57600080fd5b6000602082840312156116ae57600080fd5b815161063c81611472565b634e487b7160e01b600052603260045260246000fd5b60005b838110156116ea5781810151838201526020016116d2565b50506000910152565b600082516117058184602087016116cf565b9190910192915050565b602081526000825180602084015261172e8160408501602087016116cf565b601f01601f1916919091016040019291505056fea2646970667358221220f747b3b3bdc74a7bf1bb6b88cbc7022775455b60273591b2da5d92cf4d5dd49064736f6c63430008180033a2646970667358221220447a2a02d887d4c21e90b32cb10f65bbb6ea3ea599a1799e292c79a503adcfb464736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dabc8e8314610030575b600080fd5b61004361003e366004610154565b61005a565b604051610051929190610187565b60405180910390f35b600080838360405161006b9061011e565b610076929190610187565b604051809103906000f080158015610092573d6000803e3d6000fd5b50915083836040516100a39061012b565b6100ae929190610187565b604051809103906000f0801580156100ca573d6000803e3d6000fd5b509050806001600160a01b0316826001600160a01b0316846001600160a01b03167f951f6f2ffc705efc870b0c6023fb94c7edece24c87077884b6d08a5cd44e6aa760405160405180910390a49250929050565b611a32806101a283390190565b611a5a80611bd483390190565b80356001600160a01b038116811461014f57600080fd5b919050565b6000806040838503121561016757600080fd5b61017083610138565b915061017e60208401610138565b90509250929050565b6001600160a01b039283168152911660208201526040019056fe60e06040523480156200001157600080fd5b5060405162001a3238038062001a32833981016040819052620000349162000240565b6001600160a01b038083166080526001600055811660a081905260408051630fc2838b60e11b81529051849284928492849291631f8507169160048083019260209291908290030181865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b8919062000278565b6001600160a01b031660c0816001600160a01b03168152505050506000816001600160a01b0316631f8507166040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a919062000278565b90506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a3919062000278565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03199081166001600160a01b03948516908117909255600091825260076020526040909120805460ff1916831790558154169390911692909217909155506200029d9350505050565b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b6200025f8362000223565b91506200026f6020840162000223565b90509250929050565b6000602082840312156200028b57600080fd5b620002968262000223565b9392505050565b60805160a05160c051611749620002e96000396000818161017d01528181610963015281816109b501528181610b930152610c07015260006101e2015260006105c401526117496000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806392777b29116100c3578063e8111a121161007c578063e8111a1214610352578063f25e55a51461035b578063f301af4214610386578063f320772314610399578063f5f8d365146103ac578063f7412baf146103bf57600080fd5b806392777b29146102c45780639cc7f708146102ef5780639e2bf22c1461030f578063a28d4c9c14610324578063b66503cf14610337578063e68863961461034a57600080fd5b806346c96aac1161011557806346c96aac146101dd57806349dcc204146102045780634d5ce0381461024b578063505897931461027e578063572b6c051461029e57806376f4be36146102b157600080fd5b806318160ddd146101525780631be052891461016e5780631f850716146101785780633e491d47146101b7578063456cb7c6146101ca575b600080fd5b61015b60025481565b6040519081526020015b60405180910390f35b61015b62093a8081565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610165565b61015b6101c536600461146b565b6103e6565b60015461019f906001600160a01b031681565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b610236610212366004611497565b60086020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610165565b61026e6102593660046114b9565b60076020526000908152604090205460ff1681565b6040519015158152602001610165565b61015b61028c3660046114d6565b60096020526000908152604090205481565b61026e6102ac3660046114b9565b6105c2565b61015b6102bf3660046114d6565b6105f4565b61015b6102d236600461146b565b600460209081526000928352604080842090915290825290205481565b61015b6102fd3660046114d6565b60036020526000908152604090205481565b61032261031d366004611497565b610728565b005b61015b610332366004611497565b610808565b61032261034536600461146b565b61094d565b60065461015b565b61015b600b5481565b61015b61036936600461146b565b600560209081526000928352604080842090915290825290205481565b61019f6103943660046114d6565b610a80565b6103226103a7366004611497565b610aaa565b6103226103ba366004611505565b610b7d565b6102366103cd3660046114d6565b600a602052600090815260409020805460019091015482565b6000818152600960205260408120548103610403575060006105bc565b6001600160a01b038316600090815260056020908152604080832085845290915281205460019062093a80810690038261043d8683610808565b600087815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509061048890849062093a8081069003610cdd565b9250600062093a8061049f854283810690036115ec565b6104a991906115ff565b905080156105b35760005b818110156105b1576104d98960016104cf62093a8089611621565b61033291906115ec565b60008a815260086020908152604080832084845282528083208151808301909252805482526001908101549282019290925292965091945061054d91600a91906105349061052a62093a808b611621565b6102bf91906115ec565b8152602001908152602001600020600101546001610cdd565b6001600160a01b038b1660009081526004602090815260408083208984528252909120549085015191975087916105849190611634565b61058e91906115ff565b6105989088611621565b96506105a762093a8086611621565b94506001016104b4565b505b50939450505050505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b600b5460009080820361060a5750600092915050565b82600a600061061a6001856115ec565b815260200190815260200160002060000154116106435761063c6001826115ec565b9392505050565b60008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35483101561067e5750600092915050565b60008061068c6001846115ec565b90505b8181111561072057600060026106a584846115ec565b6106af91906115ff565b6106b990836115ec565b6000818152600a60209081526040918290208251808401909352805480845260019091015491830191909152919250908790036106fa575095945050505050565b805187111561070b57819350610719565b6107166001836115ec565b92505b505061068f565b509392505050565b6000610732610cf3565b6001549091506001600160a01b038083169116146107635760405163ea8e4eb560e01b815260040160405180910390fd5b826002600082825461077591906115ec565b9091555050600082815260036020526040812080548592906107989084906115ec565b90915550506000828152600360205260409020546107b7908390610d15565b6107bf610e1f565b81816001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568856040516107fb91815260200190565b60405180910390a3505050565b6000828152600960205260408120548082036108285760009150506105bc565b600084815260086020526040812084916108436001856115ec565b8152602001908152602001600020600001541161086d576108656001826115ec565b9150506105bc565b60008481526008602090815260408083208380529091529020548310156108985760009150506105bc565b6000806108a66001846115ec565b90505b8181111561094457600060026108bf84846115ec565b6108c991906115ff565b6108d390836115ec565b600088815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509087900361091e575093506105bc92505050565b805187111561092f5781935061093d565b61093a6001836115ec565b92505b50506108a9565b50949350505050565b610955610ed7565b600061095f610cf3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316146109b3576040516306b746df60e51b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a35919061164b565b6001600160a01b0316836001600160a01b031614610a6657604051630b9eb1c560e41b815260040160405180910390fd5b610a71818484610f35565b50610a7c6001600055565b5050565b60068181548110610a9057600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610ab4610cf3565b6001549091506001600160a01b03808316911614610ae55760405163ea8e4eb560e01b815260040160405180910390fd5b8260026000828254610af79190611621565b909155505060008281526003602052604081208054859290610b1a908490611621565b9091555050600082815260036020526040902054610b39908390610d15565b610b41610e1f565b81816001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15856040516107fb91815260200190565b610b85610ed7565b6000610b8f610cf3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b031614610be3576040516306b746df60e51b815260040160405180910390fd5b8151600114610c055760405163801f099f60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c87919061164b565b6001600160a01b031682600081518110610ca357610ca3611668565b60200260200101516001600160a01b031614610cd257604051630b9eb1c560e41b815260040160405180910390fd5b610a7181848461100f565b6000818311610cec578161063c565b5090919050565b6000610cfe336105c2565b15610d10575060131936013560601c90565b503390565b600082815260096020526040902054428115801590610d73575062093a80810681036000858152600860205260408120610d7191610d546001876115ec565b81526020019081526020016000206000015462093a808106900390565b145b15610dc9576040805180820182528281526020808201869052600087815260089091529182209091610da66001866115ec565b815260208082019290925260400160002082518155910151600190910155610e19565b6040805180820182528281526020808201868152600088815260088352848120878252909252929020905181559051600191820155610e09908390611621565b6000858152600960205260409020555b50505050565b600b54428115801590610e49575062093a8081068103610e47600a6000610d546001876115ec565b145b15610e9457604080518082019091528181526002546020820152600a6000610e726001866115ec565b8152602080820192909252604001600020825181559101516001909101555050565b60408051808201825282815260025460208083019182526000868152600a90915292909220905181559051600191820155610ed0908390611621565b600b555050565b600260005403610f2e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b80600003610f5657604051631f2a200560e01b815260040160405180910390fd5b610f6b6001600160a01b03831684308461113e565b6000610f7c4262093a808106900390565b6001600160a01b0384166000908152600460209081526040808320848452909152812080549293508492909190610fb4908490611621565b9250508190555080836001600160a01b0316856001600160a01b03167f52977ea98a2220a03ee9ba5cb003ada08d394ea10155483c95dc2dc77a7eb24b8560405161100191815260200190565b60405180910390a450505050565b805160005b8181101561113757600061104184838151811061103357611033611668565b6020026020010151866103e6565b9050426005600086858151811061105a5761105a611668565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812089825290925290205580156110c8576110c886828685815181106110a8576110a8611668565b60200260200101516001600160a01b03166111a99092919063ffffffff16565b8382815181106110da576110da611668565b60200260200101516001600160a01b0316866001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc98360405161112691815260200190565b60405180910390a350600101611014565b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e199085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111de565b6040516001600160a01b0383166024820152604481018290526111d990849063a9059cbb60e01b90606401611172565b505050565b6000611233826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112b39092919063ffffffff16565b9050805160001480611254575080806020019051810190611254919061167e565b6111d95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f25565b60606112c284846000856112ca565b949350505050565b60608247101561132b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610f25565b600080866001600160a01b0316858760405161134791906116c4565b60006040518083038185875af1925050503d8060008114611384576040519150601f19603f3d011682016040523d82523d6000602084013e611389565b606091505b509150915061139a878383876113a5565b979650505050505050565b6060831561141457825160000361140d576001600160a01b0385163b61140d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f25565b50816112c2565b6112c283838151156114295781518083602001fd5b8060405162461bcd60e51b8152600401610f2591906116e0565b6001600160a01b038116811461145857600080fd5b50565b803561146681611443565b919050565b6000806040838503121561147e57600080fd5b823561148981611443565b946020939093013593505050565b600080604083850312156114aa57600080fd5b50508035926020909101359150565b6000602082840312156114cb57600080fd5b813561063c81611443565b6000602082840312156114e857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561151857600080fd5b8235915060208084013567ffffffffffffffff8082111561153857600080fd5b818601915086601f83011261154c57600080fd5b81358181111561155e5761155e6114ef565b8060051b604051601f19603f83011681018181108582111715611583576115836114ef565b6040529182528482019250838101850191898311156115a157600080fd5b938501935b828510156115c6576115b78561145b565b845293850193928501926115a6565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105bc576105bc6115d6565b60008261161c57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105bc576105bc6115d6565b80820281158282048414176105bc576105bc6115d6565b60006020828403121561165d57600080fd5b815161063c81611443565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561169057600080fd5b8151801515811461063c57600080fd5b60005b838110156116bb5781810151838201526020016116a3565b50506000910152565b600082516116d68184602087016116a0565b9190910192915050565b60208152600082518060208401526116ff8160408501602087016116a0565b601f01601f1916919091016040019291505056fea264697066735822122074ce3816f9b7922f0819e4bceb52ef7f453e99d3946a976a07b1e4954436a5e064736f6c6343000818003360e06040523480156200001157600080fd5b5060405162001a5a38038062001a5a833981016040819052620000349162000240565b6001600160a01b038083166080526001600055811660a081905260408051630fc2838b60e11b81529051849284928492849291631f8507169160048083019260209291908290030181865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b8919062000278565b6001600160a01b031660c0816001600160a01b03168152505050506000816001600160a01b0316631f8507166040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013a919062000278565b90506000816001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200017d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a3919062000278565b6006805460018082019092557ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03199081166001600160a01b03948516908117909255600091825260076020526040909120805460ff1916831790558154169390911692909217909155506200029d9350505050565b80516001600160a01b03811681146200023b57600080fd5b919050565b600080604083850312156200025457600080fd5b6200025f8362000223565b91506200026f6020840162000223565b90509250929050565b6000602082840312156200028b57600080fd5b620002968262000223565b9392505050565b60805160a05160c051611778620002e26000396000818161017d01528181610bb00152610c8c0152600081816101e201526109a1015260006105c401526117786000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806392777b29116100c3578063e8111a121161007c578063e8111a1214610352578063f25e55a51461035b578063f301af4214610386578063f320772314610399578063f5f8d365146103ac578063f7412baf146103bf57600080fd5b806392777b29146102c45780639cc7f708146102ef5780639e2bf22c1461030f578063a28d4c9c14610324578063b66503cf14610337578063e68863961461034a57600080fd5b806346c96aac1161011557806346c96aac146101dd57806349dcc204146102045780634d5ce0381461024b578063505897931461027e578063572b6c051461029e57806376f4be36146102b157600080fd5b806318160ddd146101525780631be052891461016e5780631f850716146101785780633e491d47146101b7578063456cb7c6146101ca575b600080fd5b61015b60025481565b6040519081526020015b60405180910390f35b61015b62093a8081565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610165565b61015b6101c536600461149a565b6103e6565b60015461019f906001600160a01b031681565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b6102366102123660046114c6565b60086020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610165565b61026e6102593660046114e8565b60076020526000908152604090205460ff1681565b6040519015158152602001610165565b61015b61028c366004611505565b60096020526000908152604090205481565b61026e6102ac3660046114e8565b6105c2565b61015b6102bf366004611505565b6105f4565b61015b6102d236600461149a565b600460209081526000928352604080842090915290825290205481565b61015b6102fd366004611505565b60036020526000908152604090205481565b61032261031d3660046114c6565b610728565b005b61015b6103323660046114c6565b610808565b61032261034536600461149a565b61094d565b60065461015b565b61015b600b5481565b61015b61036936600461149a565b600560209081526000928352604080842090915290825290205481565b61019f610394366004611505565b610aa9565b6103226103a73660046114c6565b610ad3565b6103226103ba366004611534565b610ba6565b6102366103cd366004611505565b600a602052600090815260409020805460019091015482565b6000818152600960205260408120548103610403575060006105bc565b6001600160a01b038316600090815260056020908152604080832085845290915281205460019062093a80810690038261043d8683610808565b600087815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509061048890849062093a8081069003610d0c565b9250600062093a8061049f8542838106900361161b565b6104a9919061162e565b905080156105b35760005b818110156105b1576104d98960016104cf62093a8089611650565b610332919061161b565b60008a815260086020908152604080832084845282528083208151808301909252805482526001908101549282019290925292965091945061054d91600a91906105349061052a62093a808b611650565b6102bf919061161b565b8152602001908152602001600020600101546001610d0c565b6001600160a01b038b1660009081526004602090815260408083208984528252909120549085015191975087916105849190611663565b61058e919061162e565b6105989088611650565b96506105a762093a8086611650565b94506001016104b4565b505b50939450505050505b92915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b600b5460009080820361060a5750600092915050565b82600a600061061a60018561161b565b815260200190815260200160002060000154116106435761063c60018261161b565b9392505050565b60008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35483101561067e5750600092915050565b60008061068c60018461161b565b90505b8181111561072057600060026106a5848461161b565b6106af919061162e565b6106b9908361161b565b6000818152600a60209081526040918290208251808401909352805480845260019091015491830191909152919250908790036106fa575095945050505050565b805187111561070b57819350610719565b61071660018361161b565b92505b505061068f565b509392505050565b6000610732610d22565b6001549091506001600160a01b038083169116146107635760405163ea8e4eb560e01b815260040160405180910390fd5b8260026000828254610775919061161b565b90915550506000828152600360205260408120805485929061079890849061161b565b90915550506000828152600360205260409020546107b7908390610d44565b6107bf610e4e565b81816001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568856040516107fb91815260200190565b60405180910390a3505050565b6000828152600960205260408120548082036108285760009150506105bc565b6000848152600860205260408120849161084360018561161b565b8152602001908152602001600020600001541161086d5761086560018261161b565b9150506105bc565b60008481526008602090815260408083208380529091529020548310156108985760009150506105bc565b6000806108a660018461161b565b90505b8181111561094457600060026108bf848461161b565b6108c9919061162e565b6108d3908361161b565b600088815260086020908152604080832084845282529182902082518084019093528054808452600190910154918301919091529192509087900361091e575093506105bc92505050565b805187111561092f5781935061093d565b61093a60018361161b565b92505b50506108a9565b50949350505050565b610955610f06565b600061095f610d22565b6001600160a01b03841660009081526007602052604090205490915060ff16610a8f5760405163559bfa4360e11b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ab37f48690602401602060405180830381865afa1580156109e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c919061167a565b610a2957604051630b094f2760e31b815260040160405180910390fd5b6001600160a01b0383166000818152600760205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b03191690911790555b610a9a818484610f64565b50610aa56001600055565b5050565b60068181548110610ab957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000610add610d22565b6001549091506001600160a01b03808316911614610b0e5760405163ea8e4eb560e01b815260040160405180910390fd5b8260026000828254610b209190611650565b909155505060008281526003602052604081208054859290610b43908490611650565b9091555050600082815260036020526040902054610b62908390610d44565b610b6a610e4e565b81816001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15856040516107fb91815260200190565b610bae610f06565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663430c2081610be5610d22565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af1158015610c32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c56919061167a565b610c735760405163ea8e4eb560e01b815260040160405180910390fd5b6040516331a9108f60e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015610cdb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cff919061169c565b9050610a9a81848461103e565b6000818311610d1b578161063c565b5090919050565b6000610d2d336105c2565b15610d3f575060131936013560601c90565b503390565b600082815260096020526040902054428115801590610da2575062093a80810681036000858152600860205260408120610da091610d8360018761161b565b81526020019081526020016000206000015462093a808106900390565b145b15610df8576040805180820182528281526020808201869052600087815260089091529182209091610dd560018661161b565b815260208082019290925260400160002082518155910151600190910155610e48565b6040805180820182528281526020808201868152600088815260088352848120878252909252929020905181559051600191820155610e38908390611650565b6000858152600960205260409020555b50505050565b600b54428115801590610e78575062093a8081068103610e76600a6000610d8360018761161b565b145b15610ec357604080518082019091528181526002546020820152600a6000610ea160018661161b565b8152602080820192909252604001600020825181559101516001909101555050565b60408051808201825282815260025460208083019182526000868152600a90915292909220905181559051600191820155610eff908390611650565b600b555050565b600260005403610f5d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b80600003610f8557604051631f2a200560e01b815260040160405180910390fd5b610f9a6001600160a01b03831684308461116d565b6000610fab4262093a808106900390565b6001600160a01b0384166000908152600460209081526040808320848452909152812080549293508492909190610fe3908490611650565b9250508190555080836001600160a01b0316856001600160a01b03167f52977ea98a2220a03ee9ba5cb003ada08d394ea10155483c95dc2dc77a7eb24b8560405161103091815260200190565b60405180910390a450505050565b805160005b81811015611166576000611070848381518110611062576110626116b9565b6020026020010151866103e6565b90504260056000868581518110611089576110896116b9565b6020908102919091018101516001600160a01b03168252818101929092526040908101600090812089825290925290205580156110f7576110f786828685815181106110d7576110d76116b9565b60200260200101516001600160a01b03166111d89092919063ffffffff16565b838281518110611109576111096116b9565b60200260200101516001600160a01b0316866001600160a01b03167f9aa05b3d70a9e3e2f004f039648839560576334fb45c81f91b6db03ad9e2efc98360405161115591815260200190565b60405180910390a350600101611043565b5050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610e489085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261120d565b6040516001600160a01b03831660248201526044810182905261120890849063a9059cbb60e01b906064016111a1565b505050565b6000611262826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112e29092919063ffffffff16565b9050805160001480611283575080806020019051810190611283919061167a565b6112085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610f54565b60606112f184846000856112f9565b949350505050565b60608247101561135a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610f54565b600080866001600160a01b0316858760405161137691906116f3565b60006040518083038185875af1925050503d80600081146113b3576040519150601f19603f3d011682016040523d82523d6000602084013e6113b8565b606091505b50915091506113c9878383876113d4565b979650505050505050565b6060831561144357825160000361143c576001600160a01b0385163b61143c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f54565b50816112f1565b6112f183838151156114585781518083602001fd5b8060405162461bcd60e51b8152600401610f54919061170f565b6001600160a01b038116811461148757600080fd5b50565b803561149581611472565b919050565b600080604083850312156114ad57600080fd5b82356114b881611472565b946020939093013593505050565b600080604083850312156114d957600080fd5b50508035926020909101359150565b6000602082840312156114fa57600080fd5b813561063c81611472565b60006020828403121561151757600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561154757600080fd5b8235915060208084013567ffffffffffffffff8082111561156757600080fd5b818601915086601f83011261157b57600080fd5b81358181111561158d5761158d61151e565b8060051b604051601f19603f830116810181811085821117156115b2576115b261151e565b6040529182528482019250838101850191898311156115d057600080fd5b938501935b828510156115f5576115e68561148a565b845293850193928501926115d5565b8096505050505050509250929050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105bc576105bc611605565b60008261164b57634e487b7160e01b600052601260045260246000fd5b500490565b808201808211156105bc576105bc611605565b80820281158282048414176105bc576105bc611605565b60006020828403121561168c57600080fd5b8151801515811461063c57600080fd5b6000602082840312156116ae57600080fd5b815161063c81611472565b634e487b7160e01b600052603260045260246000fd5b60005b838110156116ea5781810151838201526020016116d2565b50506000910152565b600082516117058184602087016116cf565b9190910192915050565b602081526000825180602084015261172e8160408501602087016116cf565b601f01601f1916919091016040019291505056fea2646970667358221220f747b3b3bdc74a7bf1bb6b88cbc7022775455b60273591b2da5d92cf4d5dd49064736f6c63430008180033a2646970667358221220447a2a02d887d4c21e90b32cb10f65bbb6ea3ea599a1799e292c79a503adcfb464736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createRewards(address,address)": {
        "params": {
          "_forwarder": "Address of trusted forwarder",
          "_voter": "Address of Voter.sol"
        },
        "returns": {
          "freeManagedReward": "  Address of FreeManagedReward contract created",
          "lockedManagedReward": "Address of LockedManagedReward contract created"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createRewards(address,address)": {
        "notice": "creates a LockedManagedReward and a FreeManagedReward contract for a managed veNFT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
