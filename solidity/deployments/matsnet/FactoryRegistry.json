{
  "address": "0x391EcC7ffEFc48cff41D0F2Bb36e38b82180B993",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fallbackPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackVotingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackGaugeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newManagedRewardsFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PathAlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PathNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFactoryAlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "Approve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newRewardsFactory",
          "type": "address"
        }
      ],
      "name": "SetManagedRewardsFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "Unapprove",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackGaugeFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackVotingRewardsFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managedRewardsFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactories",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactoriesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolFactory",
          "type": "address"
        }
      ],
      "name": "poolFactoryExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManagedRewardsFactory",
          "type": "address"
        }
      ],
      "name": "setManagedRewardsFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "unapprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x813c9ca4a38b0de4524ba023204bb26b0a0b0780518ca8b52ea99ea9c1cbef3b",
  "receipt": {
    "to": null,
    "from": "0x123694886DBf5Ac94DDA07135349534536D14cAf",
    "contractAddress": "0x391EcC7ffEFc48cff41D0F2Bb36e38b82180B993",
    "transactionIndex": 0,
    "gasUsed": "763625",
    "logsBloom": "0x
    "blockHash": "0x78131c36ab2f93eb46387044a81662c74578a66faecc5aac56d5a1ba49dfdd18",
    "transactionHash": "0x813c9ca4a38b0de4524ba023204bb26b0a0b0780518ca8b52ea99ea9c1cbef3b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1910125,
        "transactionHash": "0x813c9ca4a38b0de4524ba023204bb26b0a0b0780518ca8b52ea99ea9c1cbef3b",
        "address": "0x391EcC7ffEFc48cff41D0F2Bb36e38b82180B993",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000123694886dbf5ac94dda07135349534536d14caf"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x78131c36ab2f93eb46387044a81662c74578a66faecc5aac56d5a1ba49dfdd18"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1910125,
        "transactionHash": "0x813c9ca4a38b0de4524ba023204bb26b0a0b0780518ca8b52ea99ea9c1cbef3b",
        "address": "0x391EcC7ffEFc48cff41D0F2Bb36e38b82180B993",
        "topics": [
          "0x3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb037",
          "0x0000000000000000000000003cdfd2674ae85b2f5a767edcfe823351351a7e17"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x78131c36ab2f93eb46387044a81662c74578a66faecc5aac56d5a1ba49dfdd18"
      }
    ],
    "blockNumber": 1910125,
    "cumulativeGasUsed": "763625",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3012C2fE1240e3754E5C200A0946bb0E07474876",
    "0xE4B5913C0c82dB2eFC553b95c0173efb90a07c8B",
    "0x24C0Fbd3Ff8e742080c60881f8527cA3baf07647",
    "0x3CDFD2674AE85b2f5a767EDcfE823351351a7e17"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff5a0ccb3d0d88b62210a9fe38c4030e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fallbackPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackVotingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackGaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newManagedRewardsFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PathAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PathNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFactoryAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRewardsFactory\",\"type\":\"address\"}],\"name\":\"SetManagedRewardsFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"Unapprove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackGaugeFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackVotingRewardsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managedRewardsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactoriesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolFactory\",\"type\":\"address\"}],\"name\":\"poolFactoryExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManagedRewardsFactory\",\"type\":\"address\"}],\"name\":\"setManagedRewardsFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Carter Carlson (@pegahcarter)\",\"kind\":\"dev\",\"methods\":{\"approve(address,address,address)\":{\"details\":\"Callable by onlyOwner\",\"params\":{\"gaugeFactory\":\".\",\"poolFactory\":\".\",\"votingRewardsFactory\":\".\"}},\"isApproved(address,address,address)\":{\"params\":{\"gaugeFactory\":\".\",\"poolFactory\":\".\",\"votingRewardsFactory\":\".\"},\"returns\":{\"_0\":\"True if set of factories are approved, else false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"poolFactories()\":{\"details\":\"The same PoolFactory address cannot be used twice\",\"returns\":{\"_0\":\"Array of PoolFactory addresses\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setManagedRewardsFactory(address)\":{\"details\":\"Callable by onlyOwner\",\"params\":{\"_newManagedRewardsFactory\":\"address of new managedRewardsFactory\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unapprove(address,address,address)\":{\"details\":\"Callable by onlyOwner\",\"params\":{\"gaugeFactory\":\".\",\"poolFactory\":\".\",\"votingRewardsFactory\":\".\"}}},\"stateVariables\":{\"_approved\":{\"details\":\"poolFactory => votingRewardsFactory => gaugeFactory => true if path exists, else false\"},\"_managedRewardsFactory\":{\"details\":\"factory to create free and locked rewards for a managed veNFT\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApproved(address,address,address)\":{\"notice\":\"Check if a set of factories are approved for use in Mezodrome Protocol\"},\"managedRewardsFactory()\":{\"notice\":\"Factory to create free and locked rewards for a managed veNFT\"},\"poolFactories()\":{\"notice\":\"Get all PoolFactories used by the registry\"},\"poolFactoriesLength()\":{\"notice\":\"Get the length of the poolFactories array\"},\"setManagedRewardsFactory(address)\":{\"notice\":\"Set the rewards factory address\"},\"unapprove(address,address,address)\":{\"notice\":\"Unapprove a set of factories used in Mezodrome Protocol. Router is no longer able to swap with pools         created by the poolFactory\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/FactoryRegistry.sol\":\"FactoryRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/FactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IFactoryRegistry} from \\\"../interfaces/factories/IFactoryRegistry.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @author Carter Carlson (@pegahcarter)\\ncontract FactoryRegistry is IFactoryRegistry, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev factory to create free and locked rewards for a managed veNFT\\n    address private _managedRewardsFactory;\\n\\n    // Mezodrome protocol will always have a usable poolFactory, votingRewardsFactory, and gaugeFactory\\n    address public immutable fallbackPoolFactory;\\n    address public immutable fallbackVotingRewardsFactory;\\n    address public immutable fallbackGaugeFactory;\\n\\n    EnumerableSet.AddressSet private _poolFactories;\\n\\n    /// @dev poolFactory => votingRewardsFactory => gaugeFactory => true if path exists, else false\\n    mapping(address => mapping(address => mapping(address => bool)))\\n        private _approved;\\n\\n    constructor(\\n        address _fallbackPoolFactory,\\n        address _fallbackVotingRewardsFactory,\\n        address _fallbackGaugeFactory,\\n        address _newManagedRewardsFactory\\n    ) {\\n        fallbackPoolFactory = _fallbackPoolFactory;\\n        fallbackVotingRewardsFactory = _fallbackVotingRewardsFactory;\\n        fallbackGaugeFactory = _fallbackGaugeFactory;\\n\\n        _poolFactories.add(_fallbackPoolFactory);\\n        setManagedRewardsFactory(_newManagedRewardsFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function approve(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) public onlyOwner {\\n        if (_approved[poolFactory][votingRewardsFactory][gaugeFactory])\\n            revert PathAlreadyApproved();\\n        if (_poolFactories.contains(poolFactory))\\n            revert PoolFactoryAlreadyApproved();\\n        _approved[poolFactory][votingRewardsFactory][gaugeFactory] = true;\\n        _poolFactories.add(poolFactory);\\n        emit Approve(poolFactory, votingRewardsFactory, gaugeFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function unapprove(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external onlyOwner {\\n        if (!_approved[poolFactory][votingRewardsFactory][gaugeFactory])\\n            revert PathNotApproved();\\n        delete _approved[poolFactory][votingRewardsFactory][gaugeFactory];\\n        _poolFactories.remove(poolFactory);\\n        emit Unapprove(poolFactory, votingRewardsFactory, gaugeFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function isApproved(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external view returns (bool) {\\n        if (\\n            (poolFactory == fallbackPoolFactory) &&\\n            (votingRewardsFactory == fallbackVotingRewardsFactory) &&\\n            (gaugeFactory == fallbackGaugeFactory)\\n        ) return true;\\n        return _approved[poolFactory][votingRewardsFactory][gaugeFactory];\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function managedRewardsFactory() external view returns (address) {\\n        return _managedRewardsFactory;\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function setManagedRewardsFactory(\\n        address _newManagedRewardsFactory\\n    ) public onlyOwner {\\n        if (_newManagedRewardsFactory == _managedRewardsFactory)\\n            revert SameAddress();\\n        if (_newManagedRewardsFactory == address(0)) revert ZeroAddress();\\n        _managedRewardsFactory = _newManagedRewardsFactory;\\n        emit SetManagedRewardsFactory(_newManagedRewardsFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function poolFactories() external view returns (address[] memory) {\\n        return _poolFactories.values();\\n    }\\n\\n    function poolFactoryExists(\\n        address _poolFactory\\n    ) external view returns (bool) {\\n        return _poolFactories.contains(_poolFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function poolFactoriesLength() external view returns (uint256) {\\n        return _poolFactories.length();\\n    }\\n}\\n\",\"keccak256\":\"0x3eb9a6769adf59d5342dfc8a581409fdc9d53667cb10083e6343cdf0c96049d8\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFactoryRegistry {\\n    error PathAlreadyApproved();\\n    error PathNotApproved();\\n    error PoolFactoryAlreadyApproved();\\n    error SameAddress();\\n    error ZeroAddress();\\n\\n    event Approve(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event Unapprove(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event SetManagedRewardsFactory(address indexed _newRewardsFactory);\\n\\n    /// @notice Approve a set of factories used in Mezodrome Protocol.  Router is now able to swap with pools created\\n    //          by the poolFactory\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    function approve(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external;\\n\\n    /// @notice Unapprove a set of factories used in Mezodrome Protocol. Router is no longer able to swap with pools\\n    ///         created by the poolFactory\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    function unapprove(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external;\\n\\n    /// @notice Check if a set of factories are approved for use in Mezodrome Protocol\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    /// @return True if set of factories are approved, else false\\n    function isApproved(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external view returns (bool);\\n\\n    /// @notice Factory to create free and locked rewards for a managed veNFT\\n    function managedRewardsFactory() external view returns (address);\\n\\n    /// @notice Set the rewards factory address\\n    /// @dev Callable by onlyOwner\\n    /// @param _newManagedRewardsFactory address of new managedRewardsFactory\\n    function setManagedRewardsFactory(\\n        address _newManagedRewardsFactory\\n    ) external;\\n\\n    /// @notice Get all PoolFactories used by the registry\\n    /// @dev The same PoolFactory address cannot be used twice\\n    /// @return Array of PoolFactory addresses\\n    function poolFactories() external view returns (address[] memory);\\n\\n    /// @notice Check if a PoolFactory is registered within the factory registry.  Router uses this method to\\n    ///         ensure a pool swapped from is approved.\\n    /// @param poolFactory .\\n    /// @return True if PoolFactory is approved, else false\\n    function poolFactoryExists(\\n        address poolFactory\\n    ) external view returns (bool);\\n\\n    /// @notice Get the length of the poolFactories array\\n    function poolFactoriesLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfb7b5d58ac04eefc2be484a2866c7a5a4611982777688f604b8883bc6320a61\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162000d9d38038062000d9d833981016040819052620000349162000267565b6200003f336200007b565b6001600160a01b0380851660805283811660a052821660c05262000065600285620000cb565b506200007181620000eb565b50505050620002c4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620000e2836001600160a01b03841662000197565b90505b92915050565b620000f5620001e9565b6001546001600160a01b0390811690821603620001255760405163367558c360e01b815260040160405180910390fd5b6001600160a01b0381166200014d5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb03790600090a250565b6000818152600183016020526040812054620001e057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620000e5565b506000620000e5565b6000546001600160a01b03163314620002485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b80516001600160a01b03811681146200026257600080fd5b919050565b600080600080608085870312156200027e57600080fd5b62000289856200024a565b935062000299602086016200024a565b9250620002a9604086016200024a565b9150620002b9606086016200024a565b905092959194509250565b60805160a05160c051610a9462000309600039600081816101f201526102d40152600081816101a7015261029701526000818161012d015261025b0152610a946000f3fe608060405234801561001057600080fd5b50600436106100ca5760003560e01c80637516beda1161007c5780637516beda1461018f578063866a0a94146101a25780638da5cb5b146101c95780639b140a85146101da578063d841c216146101ed578063f2fde38b14610214578063ffc5f0d61461022757600080fd5b806306121cd5146100cf5780630cb299c9146100ed5780630d0ae6781461010357806356d9cb64146101285780635c1976421461014f5780636407693914610172578063715018a614610187575b600080fd5b6100d761023a565b6040516100e4919061094a565b60405180910390f35b6100f561024b565b6040519081526020016100e4565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100e4565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b61016261015d3660046109b3565b610257565b60405190151581526020016100e4565b6101856101803660046109f6565b610351565b005b6101856103f9565b61018561019d3660046109b3565b61040d565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610110565b6101856101e83660046109b3565b6104f7565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6101856102223660046109f6565b61060e565b6101626102353660046109f6565b61068c565b6060610246600261069f565b905090565b600061024660026106ac565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156102cb57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b801561030857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b156103155750600161034a565b506001600160a01b038084166000908152600460209081526040808320868516845282528083209385168352929052205460ff165b9392505050565b6103596106b6565b6001546001600160a01b03908116908216036103885760405163367558c360e01b815260040160405180910390fd5b6001600160a01b0381166103af5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb03790600090a250565b6104016106b6565b61040b6000610710565b565b6104156106b6565b6001600160a01b038084166000908152600460209081526040808320868516845282528083209385168352929052205460ff166104655760405163d38afd6560e01b815260040160405180910390fd5b6001600160a01b03808416600090815260046020908152604080832086851684528252808320938516835292905220805460ff191690556104a7600284610760565b50806001600160a01b0316826001600160a01b0316846001600160a01b03167fbbbf8609bccd24696f7d2d86357dbd1a55ff9b79853a72ea11b1c0968ada177660405160405180910390a4505050565b6104ff6106b6565b6001600160a01b038084166000908152600460209081526040808320868516845282528083209385168352929052205460ff1615610550576040516362cee17560e11b815260040160405180910390fd5b61055b600284610775565b1561057957604051630234331160e61b815260040160405180910390fd5b6001600160a01b03808416600090815260046020908152604080832086851684528252808320938516835292905220805460ff191660011790556105be600284610797565b50806001600160a01b0316826001600160a01b0316846001600160a01b03167f5abe7702ac48299ef7647755d7af6d6a6beecd1c584bbb6fa55b7a882490efc760405160405180910390a4505050565b6106166106b6565b6001600160a01b0381166106805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61068981610710565b50565b6000610699600283610775565b92915050565b6060600061034a836107ac565b6000610699825490565b6000546001600160a01b0316331461040b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610677565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061034a836001600160a01b038416610808565b6001600160a01b0381166000908152600183016020526040812054151561034a565b600061034a836001600160a01b0384166108fb565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8154815260200190600101908083116107e8575b50505050509050919050565b600081815260018301602052604081205480156108f157600061082c600183610a11565b855490915060009061084090600190610a11565b90508181146108a557600086600001828154811061086057610860610a32565b906000526020600020015490508087600001848154811061088357610883610a32565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108b6576108b6610a48565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610699565b6000915050610699565b600081815260018301602052604081205461094257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610699565b506000610699565b6020808252825182820181905260009190848201906040850190845b8181101561098b5783516001600160a01b031683529284019291840191600101610966565b50909695505050505050565b80356001600160a01b03811681146109ae57600080fd5b919050565b6000806000606084860312156109c857600080fd5b6109d184610997565b92506109df60208501610997565b91506109ed60408501610997565b90509250925092565b600060208284031215610a0857600080fd5b61034a82610997565b8181038181111561069957634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220053cf047f8d7e81861043bd91a8e52660fe37730aa6dcda4d4ac9ee029fae44c64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ca5760003560e01c80637516beda1161007c5780637516beda1461018f578063866a0a94146101a25780638da5cb5b146101c95780639b140a85146101da578063d841c216146101ed578063f2fde38b14610214578063ffc5f0d61461022757600080fd5b806306121cd5146100cf5780630cb299c9146100ed5780630d0ae6781461010357806356d9cb64146101285780635c1976421461014f5780636407693914610172578063715018a614610187575b600080fd5b6100d761023a565b6040516100e4919061094a565b60405180910390f35b6100f561024b565b6040519081526020016100e4565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100e4565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b61016261015d3660046109b3565b610257565b60405190151581526020016100e4565b6101856101803660046109f6565b610351565b005b6101856103f9565b61018561019d3660046109b3565b61040d565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316610110565b6101856101e83660046109b3565b6104f7565b6101107f000000000000000000000000000000000000000000000000000000000000000081565b6101856102223660046109f6565b61060e565b6101626102353660046109f6565b61068c565b6060610246600261069f565b905090565b600061024660026106ac565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b03161480156102cb57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316145b801561030857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b156103155750600161034a565b506001600160a01b038084166000908152600460209081526040808320868516845282528083209385168352929052205460ff165b9392505050565b6103596106b6565b6001546001600160a01b03908116908216036103885760405163367558c360e01b815260040160405180910390fd5b6001600160a01b0381166103af5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb03790600090a250565b6104016106b6565b61040b6000610710565b565b6104156106b6565b6001600160a01b038084166000908152600460209081526040808320868516845282528083209385168352929052205460ff166104655760405163d38afd6560e01b815260040160405180910390fd5b6001600160a01b03808416600090815260046020908152604080832086851684528252808320938516835292905220805460ff191690556104a7600284610760565b50806001600160a01b0316826001600160a01b0316846001600160a01b03167fbbbf8609bccd24696f7d2d86357dbd1a55ff9b79853a72ea11b1c0968ada177660405160405180910390a4505050565b6104ff6106b6565b6001600160a01b038084166000908152600460209081526040808320868516845282528083209385168352929052205460ff1615610550576040516362cee17560e11b815260040160405180910390fd5b61055b600284610775565b1561057957604051630234331160e61b815260040160405180910390fd5b6001600160a01b03808416600090815260046020908152604080832086851684528252808320938516835292905220805460ff191660011790556105be600284610797565b50806001600160a01b0316826001600160a01b0316846001600160a01b03167f5abe7702ac48299ef7647755d7af6d6a6beecd1c584bbb6fa55b7a882490efc760405160405180910390a4505050565b6106166106b6565b6001600160a01b0381166106805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61068981610710565b50565b6000610699600283610775565b92915050565b6060600061034a836107ac565b6000610699825490565b6000546001600160a01b0316331461040b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610677565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061034a836001600160a01b038416610808565b6001600160a01b0381166000908152600183016020526040812054151561034a565b600061034a836001600160a01b0384166108fb565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8154815260200190600101908083116107e8575b50505050509050919050565b600081815260018301602052604081205480156108f157600061082c600183610a11565b855490915060009061084090600190610a11565b90508181146108a557600086600001828154811061086057610860610a32565b906000526020600020015490508087600001848154811061088357610883610a32565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108b6576108b6610a48565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610699565b6000915050610699565b600081815260018301602052604081205461094257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610699565b506000610699565b6020808252825182820181905260009190848201906040850190845b8181101561098b5783516001600160a01b031683529284019291840191600101610966565b50909695505050505050565b80356001600160a01b03811681146109ae57600080fd5b919050565b6000806000606084860312156109c857600080fd5b6109d184610997565b92506109df60208501610997565b91506109ed60408501610997565b90509250925092565b600060208284031215610a0857600080fd5b61034a82610997565b8181038181111561069957634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220053cf047f8d7e81861043bd91a8e52660fe37730aa6dcda4d4ac9ee029fae44c64736f6c63430008180033",
  "devdoc": {
    "author": "Carter Carlson (@pegahcarter)",
    "kind": "dev",
    "methods": {
      "approve(address,address,address)": {
        "details": "Callable by onlyOwner",
        "params": {
          "gaugeFactory": ".",
          "poolFactory": ".",
          "votingRewardsFactory": "."
        }
      },
      "isApproved(address,address,address)": {
        "params": {
          "gaugeFactory": ".",
          "poolFactory": ".",
          "votingRewardsFactory": "."
        },
        "returns": {
          "_0": "True if set of factories are approved, else false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "poolFactories()": {
        "details": "The same PoolFactory address cannot be used twice",
        "returns": {
          "_0": "Array of PoolFactory addresses"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setManagedRewardsFactory(address)": {
        "details": "Callable by onlyOwner",
        "params": {
          "_newManagedRewardsFactory": "address of new managedRewardsFactory"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unapprove(address,address,address)": {
        "details": "Callable by onlyOwner",
        "params": {
          "gaugeFactory": ".",
          "poolFactory": ".",
          "votingRewardsFactory": "."
        }
      }
    },
    "stateVariables": {
      "_approved": {
        "details": "poolFactory => votingRewardsFactory => gaugeFactory => true if path exists, else false"
      },
      "_managedRewardsFactory": {
        "details": "factory to create free and locked rewards for a managed veNFT"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApproved(address,address,address)": {
        "notice": "Check if a set of factories are approved for use in Mezodrome Protocol"
      },
      "managedRewardsFactory()": {
        "notice": "Factory to create free and locked rewards for a managed veNFT"
      },
      "poolFactories()": {
        "notice": "Get all PoolFactories used by the registry"
      },
      "poolFactoriesLength()": {
        "notice": "Get the length of the poolFactories array"
      },
      "setManagedRewardsFactory(address)": {
        "notice": "Set the rewards factory address"
      },
      "unapprove(address,address,address)": {
        "notice": "Unapprove a set of factories used in Mezodrome Protocol. Router is no longer able to swap with pools         created by the poolFactory"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15894,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_managedRewardsFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15903,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_poolFactories",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)8818_storage"
      },
      {
        "astId": 15912,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_approved",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)8818_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 8817,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)8503_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)8503_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 8498,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 8502,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
