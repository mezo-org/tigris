{
  "address": "0x6724AFaD29FbeBdbfe9897E089208e0aAa8210C5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fallbackPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackVotingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fallbackGaugeFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_newManagedRewardsFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FallbackFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidFactoriesToPoolFactory",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PathAlreadyApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PathNotApproved",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "Approve",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newRewardsFactory",
          "type": "address"
        }
      ],
      "name": "SetManagedRewardsFactory",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "Unapprove",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        }
      ],
      "name": "factoriesToPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "votingRewardsFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gaugeFactory",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        }
      ],
      "name": "isPoolFactoryApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managedRewardsFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactories",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolFactoriesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newManagedRewardsFactory",
          "type": "address"
        }
      ],
      "name": "setManagedRewardsFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "poolFactory",
          "type": "address"
        }
      ],
      "name": "unapprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bb8c17a77e188cf7c67c99bdb9207921cb6b9dc6ada8abc326931a4d721b8c9",
  "receipt": {
    "to": null,
    "from": "0x6e80164ea60673D64d5d6228beb684a1274Bb017",
    "contractAddress": "0x6724AFaD29FbeBdbfe9897E089208e0aAa8210C5",
    "transactionIndex": 0,
    "gasUsed": "804601",
    "logsBloom": "0x400000004000000000040000000000000000000000000000008000000000000800800000004000000000000000000000000000000000000000000000000100000000000000000000000004000002000000010000000000000000000000008000000000000a00000000000000000008200000000000000000000000000000044000000000000008000000000000000000100004000000000000000000000000000000000200000000000200000000000010000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000400000000000000200000000000000000000000000a0000000000000",
    "blockHash": "0x56cd5fef1c816f59c001dd2609b5bf284d7af9d456a7ae69b326199f4d9602a5",
    "transactionHash": "0x4bb8c17a77e188cf7c67c99bdb9207921cb6b9dc6ada8abc326931a4d721b8c9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3218630,
        "transactionHash": "0x4bb8c17a77e188cf7c67c99bdb9207921cb6b9dc6ada8abc326931a4d721b8c9",
        "address": "0x6724AFaD29FbeBdbfe9897E089208e0aAa8210C5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006e80164ea60673d64d5d6228beb684a1274bb017"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x56cd5fef1c816f59c001dd2609b5bf284d7af9d456a7ae69b326199f4d9602a5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3218630,
        "transactionHash": "0x4bb8c17a77e188cf7c67c99bdb9207921cb6b9dc6ada8abc326931a4d721b8c9",
        "address": "0x6724AFaD29FbeBdbfe9897E089208e0aAa8210C5",
        "topics": [
          "0x5abe7702ac48299ef7647755d7af6d6a6beecd1c584bbb6fa55b7a882490efc7",
          "0x000000000000000000000000d875f8ce0b1ddbad287f72912fcbd571fc77905b",
          "0x000000000000000000000000e8149d90b2372444938d81980f01729cd21fcf90",
          "0x000000000000000000000000e5d58b7a8ce7c77d859eb984bffffdd8a1a2e3ba"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x56cd5fef1c816f59c001dd2609b5bf284d7af9d456a7ae69b326199f4d9602a5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 3218630,
        "transactionHash": "0x4bb8c17a77e188cf7c67c99bdb9207921cb6b9dc6ada8abc326931a4d721b8c9",
        "address": "0x6724AFaD29FbeBdbfe9897E089208e0aAa8210C5",
        "topics": [
          "0x3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb037",
          "0x0000000000000000000000005831f269deb493b0c5639fc6844da5b2efb5bd7f"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x56cd5fef1c816f59c001dd2609b5bf284d7af9d456a7ae69b326199f4d9602a5"
      }
    ],
    "blockNumber": 3218630,
    "cumulativeGasUsed": "804601",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd875f8ce0b1DDBAd287F72912fCbd571Fc77905B",
    "0xE8149d90b2372444938D81980f01729cd21FCf90",
    "0xE5D58B7a8CE7c77d859EB984BFfffdd8a1a2e3bA",
    "0x5831f269Deb493b0c5639fc6844da5b2eFB5Bd7F"
  ],
  "numDeployments": 1,
  "solcInputHash": "8d38669248b61b3eb695f578467cc289",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fallbackPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackVotingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fallbackGaugeFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newManagedRewardsFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FallbackFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFactoriesToPoolFactory\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PathAlreadyApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PathNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"Approve\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newRewardsFactory\",\"type\":\"address\"}],\"name\":\"SetManagedRewardsFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"Unapprove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"factoriesToPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeFactory\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"isPoolFactoryApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managedRewardsFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactories\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolFactoriesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newManagedRewardsFactory\",\"type\":\"address\"}],\"name\":\"setManagedRewardsFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"poolFactory\",\"type\":\"address\"}],\"name\":\"unapprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Carter Carlson (@pegahcarter)\",\"kind\":\"dev\",\"methods\":{\"approve(address,address,address)\":{\"details\":\"Callable by onlyOwner\",\"params\":{\"gaugeFactory\":\".\",\"poolFactory\":\".\",\"votingRewardsFactory\":\".\"}},\"isPoolFactoryApproved(address)\":{\"params\":{\"poolFactory\":\".\"},\"returns\":{\"_0\":\"True if PoolFactory is approved, else false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"poolFactories()\":{\"details\":\"The same PoolFactory address cannot be used twice\",\"returns\":{\"_0\":\"Array of PoolFactory addresses\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setManagedRewardsFactory(address)\":{\"details\":\"Callable by onlyOwner\",\"params\":{\"_newManagedRewardsFactory\":\"address of new managedRewardsFactory\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unapprove(address)\":{\"details\":\"Callable by onlyOwner\",\"params\":{\"poolFactory\":\".\"}}},\"stateVariables\":{\"_factoriesToPoolsFactory\":{\"details\":\"the factories linked to the poolFactory\"},\"_managedRewardsFactory\":{\"details\":\"factory to create free and locked rewards for a managed veNFT\"},\"_poolFactories\":{\"details\":\"Array of poolFactories used to create a gauge and votingRewards\"},\"fallbackPoolFactory\":{\"details\":\"The protocol will always have a usable poolFactory, votingRewardsFactory, and gaugeFactory.  The votingRewardsFactory\"}},\"title\":\"Protocol Factory Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,address,address)\":{\"notice\":\"Approve a set of factories used in the Protocol.         Router.sol is able to swap any poolFactories currently approved.         Cannot approve address(0) factories.         Cannot aprove path that is already approved.         Each poolFactory has one unique set and maintains state.  In the case a poolFactory is unapproved             and then re-approved, the same set of factories must be used.  In other words, you cannot overwrite             the factories tied to a poolFactory address.         VotingRewardsFactories and GaugeFactories may use the same address across multiple poolFactories.\"},\"factoriesToPoolFactory(address)\":{\"notice\":\"Get the factories correlated to a poolFactory.         Once set, this can never be modified.         Returns the correlated factories even after an approved poolFactory is unapproved.\"},\"isPoolFactoryApproved(address)\":{\"notice\":\"Check if a PoolFactory is approved within the factory registry.  Router uses this method to         ensure a pool swapped from is approved.\"},\"managedRewardsFactory()\":{\"notice\":\"Factory to create free and locked rewards for a managed veNFT\"},\"poolFactories()\":{\"notice\":\"Get all PoolFactories approved by the registry\"},\"poolFactoriesLength()\":{\"notice\":\"Get the length of the poolFactories array\"},\"setManagedRewardsFactory(address)\":{\"notice\":\"Set the rewards factory address\"},\"unapprove(address)\":{\"notice\":\"Unapprove a set of factories used in the Protocol.         While a poolFactory is unapproved, Router.sol cannot swap with pools made from the corresponding factory         Can only unapprove an approved path.         Cannot unapprove the fallback path (core v2 factories).\"}},\"notice\":\"Protocol Factory Registry to swap and create gauges\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/FactoryRegistry.sol\":\"FactoryRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/factories/FactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IFactoryRegistry} from \\\"../interfaces/factories/IFactoryRegistry.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @title Protocol Factory Registry\\n/// @author Carter Carlson (@pegahcarter)\\n/// @notice Protocol Factory Registry to swap and create gauges\\ncontract FactoryRegistry is IFactoryRegistry, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @dev factory to create free and locked rewards for a managed veNFT\\n    address private _managedRewardsFactory;\\n\\n    /// @dev The protocol will always have a usable poolFactory, votingRewardsFactory, and gaugeFactory.  The votingRewardsFactory\\n    // and gaugeFactory are defined to the poolFactory which can never be removed\\n    address public immutable fallbackPoolFactory;\\n\\n    /// @dev Array of poolFactories used to create a gauge and votingRewards\\n    EnumerableSet.AddressSet private _poolFactories;\\n\\n    struct FactoriesToPoolFactory {\\n        address votingRewardsFactory;\\n        address gaugeFactory;\\n    }\\n    /// @dev the factories linked to the poolFactory\\n    mapping(address => FactoriesToPoolFactory) private _factoriesToPoolsFactory;\\n\\n    constructor(\\n        address _fallbackPoolFactory,\\n        address _fallbackVotingRewardsFactory,\\n        address _fallbackGaugeFactory,\\n        address _newManagedRewardsFactory\\n    ) {\\n        fallbackPoolFactory = _fallbackPoolFactory;\\n\\n        approve(\\n            _fallbackPoolFactory,\\n            _fallbackVotingRewardsFactory,\\n            _fallbackGaugeFactory\\n        );\\n        setManagedRewardsFactory(_newManagedRewardsFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function approve(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) public onlyOwner {\\n        if (\\n            poolFactory == address(0) ||\\n            votingRewardsFactory == address(0) ||\\n            gaugeFactory == address(0)\\n        ) revert ZeroAddress();\\n        if (_poolFactories.contains(poolFactory)) revert PathAlreadyApproved();\\n\\n        FactoriesToPoolFactory memory usedFactories = _factoriesToPoolsFactory[\\n            poolFactory\\n        ];\\n\\n        // If the poolFactory *has not* been approved before, can approve any gauge/votingRewards factory\\n        // Only one check is sufficient\\n        if (usedFactories.votingRewardsFactory == address(0)) {\\n            _factoriesToPoolsFactory[poolFactory] = FactoriesToPoolFactory(\\n                votingRewardsFactory,\\n                gaugeFactory\\n            );\\n        } else {\\n            // If the poolFactory *has* been approved before, can only approve the same used gauge/votingRewards factory to\\n            //     to maintain state within Voter\\n            if (\\n                votingRewardsFactory != usedFactories.votingRewardsFactory ||\\n                gaugeFactory != usedFactories.gaugeFactory\\n            ) revert InvalidFactoriesToPoolFactory();\\n        }\\n\\n        _poolFactories.add(poolFactory);\\n        emit Approve(poolFactory, votingRewardsFactory, gaugeFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function unapprove(address poolFactory) external onlyOwner {\\n        if (poolFactory == fallbackPoolFactory) revert FallbackFactory();\\n        if (!_poolFactories.contains(poolFactory)) revert PathNotApproved();\\n        _poolFactories.remove(poolFactory);\\n        (\\n            address votingRewardsFactory,\\n            address gaugeFactory\\n        ) = factoriesToPoolFactory(poolFactory);\\n        emit Unapprove(poolFactory, votingRewardsFactory, gaugeFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function setManagedRewardsFactory(\\n        address _newManagedRewardsFactory\\n    ) public onlyOwner {\\n        if (_newManagedRewardsFactory == _managedRewardsFactory)\\n            revert SameAddress();\\n        if (_newManagedRewardsFactory == address(0)) revert ZeroAddress();\\n        _managedRewardsFactory = _newManagedRewardsFactory;\\n        emit SetManagedRewardsFactory(_newManagedRewardsFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function managedRewardsFactory() external view returns (address) {\\n        return _managedRewardsFactory;\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function factoriesToPoolFactory(\\n        address poolFactory\\n    ) public view returns (address votingRewardsFactory, address gaugeFactory) {\\n        FactoriesToPoolFactory memory f = _factoriesToPoolsFactory[poolFactory];\\n        votingRewardsFactory = f.votingRewardsFactory;\\n        gaugeFactory = f.gaugeFactory;\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function poolFactories() external view returns (address[] memory) {\\n        return _poolFactories.values();\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function isPoolFactoryApproved(\\n        address poolFactory\\n    ) external view returns (bool) {\\n        return _poolFactories.contains(poolFactory);\\n    }\\n\\n    /// @inheritdoc IFactoryRegistry\\n    function poolFactoriesLength() external view returns (uint256) {\\n        return _poolFactories.length();\\n    }\\n}\\n\",\"keccak256\":\"0x059305a978c02579dee51f3da41f09625c346a1f39cd3652dfa1e54ccbe576f6\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFactoryRegistry {\\n    error FallbackFactory();\\n    error InvalidFactoriesToPoolFactory();\\n    error PathAlreadyApproved();\\n    error PathNotApproved();\\n    error SameAddress();\\n    error ZeroAddress();\\n\\n    event Approve(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event Unapprove(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event SetManagedRewardsFactory(address indexed _newRewardsFactory);\\n\\n    /// @notice Approve a set of factories used in the Protocol.\\n    ///         Router.sol is able to swap any poolFactories currently approved.\\n    ///         Cannot approve address(0) factories.\\n    ///         Cannot aprove path that is already approved.\\n    ///         Each poolFactory has one unique set and maintains state.  In the case a poolFactory is unapproved\\n    ///             and then re-approved, the same set of factories must be used.  In other words, you cannot overwrite\\n    ///             the factories tied to a poolFactory address.\\n    ///         VotingRewardsFactories and GaugeFactories may use the same address across multiple poolFactories.\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    function approve(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external;\\n\\n    /// @notice Unapprove a set of factories used in the Protocol.\\n    ///         While a poolFactory is unapproved, Router.sol cannot swap with pools made from the corresponding factory\\n    ///         Can only unapprove an approved path.\\n    ///         Cannot unapprove the fallback path (core v2 factories).\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    function unapprove(address poolFactory) external;\\n\\n    /// @notice Factory to create free and locked rewards for a managed veNFT\\n    function managedRewardsFactory() external view returns (address);\\n\\n    /// @notice Set the rewards factory address\\n    /// @dev Callable by onlyOwner\\n    /// @param _newManagedRewardsFactory address of new managedRewardsFactory\\n    function setManagedRewardsFactory(\\n        address _newManagedRewardsFactory\\n    ) external;\\n\\n    /// @notice Get the factories correlated to a poolFactory.\\n    ///         Once set, this can never be modified.\\n    ///         Returns the correlated factories even after an approved poolFactory is unapproved.\\n    function factoriesToPoolFactory(\\n        address poolFactory\\n    )\\n        external\\n        view\\n        returns (address votingRewardsFactory, address gaugeFactory);\\n\\n    /// @notice Get all PoolFactories approved by the registry\\n    /// @dev The same PoolFactory address cannot be used twice\\n    /// @return Array of PoolFactory addresses\\n    function poolFactories() external view returns (address[] memory);\\n\\n    /// @notice Check if a PoolFactory is approved within the factory registry.  Router uses this method to\\n    ///         ensure a pool swapped from is approved.\\n    /// @param poolFactory .\\n    /// @return True if PoolFactory is approved, else false\\n    function isPoolFactoryApproved(\\n        address poolFactory\\n    ) external view returns (bool);\\n\\n    /// @notice Get the length of the poolFactories array\\n    function poolFactoriesLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfe6d1bb465bf1361920a3cb84d410d879d8fd13b73755048b249d52b9c7e9d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162000f1838038062000f18833981016040819052620000349162000449565b6200003f336200006e565b6001600160a01b03841660805262000059848484620000be565b620000648162000295565b50505050620004a6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000c862000341565b6001600160a01b0383161580620000e657506001600160a01b038216155b80620000f957506001600160a01b038116155b15620001185760405163d92e233d60e01b815260040160405180910390fd5b62000125600284620003a2565b1562000144576040516362cee17560e11b815260040160405180910390fd5b6001600160a01b038084166000908152600460209081526040918290208251808401909352805484168084526001909101549093169082015290620001e5576040805180820182526001600160a01b03808616825284811660208084019182528883166000908152600490915293909320915182549082166001600160a01b0319918216178355925160019092018054929091169190921617905562000237565b80516001600160a01b03848116911614158062000218575080602001516001600160a01b0316826001600160a01b031614155b156200023757604051630358043160e01b815260040160405180910390fd5b62000244600285620003c9565b50816001600160a01b0316836001600160a01b0316856001600160a01b03167f5abe7702ac48299ef7647755d7af6d6a6beecd1c584bbb6fa55b7a882490efc760405160405180910390a450505050565b6200029f62000341565b6001546001600160a01b0390811690821603620002cf5760405163367558c360e01b815260040160405180910390fd5b6001600160a01b038116620002f75760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb03790600090a250565b6000546001600160a01b03163314620003a05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b6000620003c0836001600160a01b03841660008181526001830160205260408120546200042357508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620003c3565b506000620003c3565b80516001600160a01b03811681146200044457600080fd5b919050565b600080600080608085870312156200046057600080fd5b6200046b856200042c565b93506200047b602086016200042c565b92506200048b604086016200042c565b91506200049b606086016200042c565b905092959194509250565b608051610a4f620004c96000396000818161014a01526105710152610a4f6000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101815780638da5cb5b146101895780639b140a851461019a578063d1ea0a1d146101ad578063f2fde38b146101d0578063fbf1f78a146101e357600080fd5b806306121cd5146100b95780630cb299c9146100d75780630d0ae678146100ed5780631217afdb1461011257806356d9cb6414610145578063640769391461016c575b600080fd5b6100c16101f6565b6040516100ce9190610905565b60405180910390f35b6100df610207565b6040519081526020016100ce565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100ce565b61012561012036600461096e565b610213565b604080516001600160a01b039384168152929091166020830152016100ce565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b61017f61017a36600461096e565b610251565b005b61017f6102f9565b6000546001600160a01b03166100fa565b61017f6101a8366004610989565b61030d565b6101c06101bb36600461096e565b6104d6565b60405190151581526020016100ce565b61017f6101de36600461096e565b6104e9565b61017f6101f136600461096e565b610567565b60606102026002610654565b905090565b60006102026002610668565b6001600160a01b0390811660009081526004602090815260409182902082518084019093528054841680845260019091015490931691018190529091565b610259610672565b6001546001600160a01b03908116908216036102885760405163367558c360e01b815260040160405180910390fd5b6001600160a01b0381166102af5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb03790600090a250565b610301610672565b61030b60006106cc565b565b610315610672565b6001600160a01b038316158061033257506001600160a01b038216155b8061034457506001600160a01b038116155b156103625760405163d92e233d60e01b815260040160405180910390fd5b61036d60028461071c565b1561038b576040516362cee17560e11b815260040160405180910390fd5b6001600160a01b03808416600090815260046020908152604091829020825180840190935280548416808452600190910154909316908201529061042a576040805180820182526001600160a01b03808616825284811660208084019182528883166000908152600490915293909320915182549082166001600160a01b0319918216178355925160019092018054929091169190921617905561047a565b80516001600160a01b03848116911614158061045c575080602001516001600160a01b0316826001600160a01b031614155b1561047a57604051630358043160e01b815260040160405180910390fd5b61048560028561073d565b50816001600160a01b0316836001600160a01b0316856001600160a01b03167f5abe7702ac48299ef7647755d7af6d6a6beecd1c584bbb6fa55b7a882490efc760405160405180910390a450505050565b60006104e360028361071c565b92915050565b6104f1610672565b6001600160a01b03811661055b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610564816106cc565b50565b61056f610672565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036105c157604051630a235adf60e11b815260040160405180910390fd5b6105cc60028261071c565b6105e95760405163d38afd6560e01b815260040160405180910390fd5b6105f4600282610752565b5060008061060183610213565b91509150806001600160a01b0316826001600160a01b0316846001600160a01b03167fbbbf8609bccd24696f7d2d86357dbd1a55ff9b79853a72ea11b1c0968ada177660405160405180910390a4505050565b6060600061066183610767565b9392505050565b60006104e3825490565b6000546001600160a01b0316331461030b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b031660009081526001919091016020526040902054151590565b6000610661836001600160a01b0384166107c3565b6000610661836001600160a01b038416610812565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b8154815260200190600101908083116107a3575b50505050509050919050565b600081815260018301602052604081205461080a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e3565b5060006104e3565b600081815260018301602052604081205480156108fb5760006108366001836109cc565b855490915060009061084a906001906109cc565b90508181146108af57600086600001828154811061086a5761086a6109ed565b906000526020600020015490508087600001848154811061088d5761088d6109ed565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108c0576108c0610a03565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e3565b60009150506104e3565b6020808252825182820181905260009190848201906040850190845b818110156109465783516001600160a01b031683529284019291840191600101610921565b50909695505050505050565b80356001600160a01b038116811461096957600080fd5b919050565b60006020828403121561098057600080fd5b61066182610952565b60008060006060848603121561099e57600080fd5b6109a784610952565b92506109b560208501610952565b91506109c360408501610952565b90509250925092565b818103818111156104e357634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c2662d3eead6b8cda226bd08a8604c355a2762e31dd97dd24f4f5277f2dfc19264736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101815780638da5cb5b146101895780639b140a851461019a578063d1ea0a1d146101ad578063f2fde38b146101d0578063fbf1f78a146101e357600080fd5b806306121cd5146100b95780630cb299c9146100d75780630d0ae678146100ed5780631217afdb1461011257806356d9cb6414610145578063640769391461016c575b600080fd5b6100c16101f6565b6040516100ce9190610905565b60405180910390f35b6100df610207565b6040519081526020016100ce565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100ce565b61012561012036600461096e565b610213565b604080516001600160a01b039384168152929091166020830152016100ce565b6100fa7f000000000000000000000000000000000000000000000000000000000000000081565b61017f61017a36600461096e565b610251565b005b61017f6102f9565b6000546001600160a01b03166100fa565b61017f6101a8366004610989565b61030d565b6101c06101bb36600461096e565b6104d6565b60405190151581526020016100ce565b61017f6101de36600461096e565b6104e9565b61017f6101f136600461096e565b610567565b60606102026002610654565b905090565b60006102026002610668565b6001600160a01b0390811660009081526004602090815260409182902082518084019093528054841680845260019091015490931691018190529091565b610259610672565b6001546001600160a01b03908116908216036102885760405163367558c360e01b815260040160405180910390fd5b6001600160a01b0381166102af5760405163d92e233d60e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f3123bae5152a999decbb5b69306adb30fa19885cf983c49427fd5b4594dcb03790600090a250565b610301610672565b61030b60006106cc565b565b610315610672565b6001600160a01b038316158061033257506001600160a01b038216155b8061034457506001600160a01b038116155b156103625760405163d92e233d60e01b815260040160405180910390fd5b61036d60028461071c565b1561038b576040516362cee17560e11b815260040160405180910390fd5b6001600160a01b03808416600090815260046020908152604091829020825180840190935280548416808452600190910154909316908201529061042a576040805180820182526001600160a01b03808616825284811660208084019182528883166000908152600490915293909320915182549082166001600160a01b0319918216178355925160019092018054929091169190921617905561047a565b80516001600160a01b03848116911614158061045c575080602001516001600160a01b0316826001600160a01b031614155b1561047a57604051630358043160e01b815260040160405180910390fd5b61048560028561073d565b50816001600160a01b0316836001600160a01b0316856001600160a01b03167f5abe7702ac48299ef7647755d7af6d6a6beecd1c584bbb6fa55b7a882490efc760405160405180910390a450505050565b60006104e360028361071c565b92915050565b6104f1610672565b6001600160a01b03811661055b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b610564816106cc565b50565b61056f610672565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b0316036105c157604051630a235adf60e11b815260040160405180910390fd5b6105cc60028261071c565b6105e95760405163d38afd6560e01b815260040160405180910390fd5b6105f4600282610752565b5060008061060183610213565b91509150806001600160a01b0316826001600160a01b0316846001600160a01b03167fbbbf8609bccd24696f7d2d86357dbd1a55ff9b79853a72ea11b1c0968ada177660405160405180910390a4505050565b6060600061066183610767565b9392505050565b60006104e3825490565b6000546001600160a01b0316331461030b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610552565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b031660009081526001919091016020526040902054151590565b6000610661836001600160a01b0384166107c3565b6000610661836001600160a01b038416610812565b6060816000018054806020026020016040519081016040528092919081815260200182805480156107b757602002820191906000526020600020905b8154815260200190600101908083116107a3575b50505050509050919050565b600081815260018301602052604081205461080a575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e3565b5060006104e3565b600081815260018301602052604081205480156108fb5760006108366001836109cc565b855490915060009061084a906001906109cc565b90508181146108af57600086600001828154811061086a5761086a6109ed565b906000526020600020015490508087600001848154811061088d5761088d6109ed565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108c0576108c0610a03565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e3565b60009150506104e3565b6020808252825182820181905260009190848201906040850190845b818110156109465783516001600160a01b031683529284019291840191600101610921565b50909695505050505050565b80356001600160a01b038116811461096957600080fd5b919050565b60006020828403121561098057600080fd5b61066182610952565b60008060006060848603121561099e57600080fd5b6109a784610952565b92506109b560208501610952565b91506109c360408501610952565b90509250925092565b818103818111156104e357634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea2646970667358221220c2662d3eead6b8cda226bd08a8604c355a2762e31dd97dd24f4f5277f2dfc19264736f6c63430008180033",
  "devdoc": {
    "author": "Carter Carlson (@pegahcarter)",
    "kind": "dev",
    "methods": {
      "approve(address,address,address)": {
        "details": "Callable by onlyOwner",
        "params": {
          "gaugeFactory": ".",
          "poolFactory": ".",
          "votingRewardsFactory": "."
        }
      },
      "isPoolFactoryApproved(address)": {
        "params": {
          "poolFactory": "."
        },
        "returns": {
          "_0": "True if PoolFactory is approved, else false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "poolFactories()": {
        "details": "The same PoolFactory address cannot be used twice",
        "returns": {
          "_0": "Array of PoolFactory addresses"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setManagedRewardsFactory(address)": {
        "details": "Callable by onlyOwner",
        "params": {
          "_newManagedRewardsFactory": "address of new managedRewardsFactory"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unapprove(address)": {
        "details": "Callable by onlyOwner",
        "params": {
          "poolFactory": "."
        }
      }
    },
    "stateVariables": {
      "_factoriesToPoolsFactory": {
        "details": "the factories linked to the poolFactory"
      },
      "_managedRewardsFactory": {
        "details": "factory to create free and locked rewards for a managed veNFT"
      },
      "_poolFactories": {
        "details": "Array of poolFactories used to create a gauge and votingRewards"
      },
      "fallbackPoolFactory": {
        "details": "The protocol will always have a usable poolFactory, votingRewardsFactory, and gaugeFactory.  The votingRewardsFactory"
      }
    },
    "title": "Protocol Factory Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,address,address)": {
        "notice": "Approve a set of factories used in the Protocol.         Router.sol is able to swap any poolFactories currently approved.         Cannot approve address(0) factories.         Cannot aprove path that is already approved.         Each poolFactory has one unique set and maintains state.  In the case a poolFactory is unapproved             and then re-approved, the same set of factories must be used.  In other words, you cannot overwrite             the factories tied to a poolFactory address.         VotingRewardsFactories and GaugeFactories may use the same address across multiple poolFactories."
      },
      "factoriesToPoolFactory(address)": {
        "notice": "Get the factories correlated to a poolFactory.         Once set, this can never be modified.         Returns the correlated factories even after an approved poolFactory is unapproved."
      },
      "isPoolFactoryApproved(address)": {
        "notice": "Check if a PoolFactory is approved within the factory registry.  Router uses this method to         ensure a pool swapped from is approved."
      },
      "managedRewardsFactory()": {
        "notice": "Factory to create free and locked rewards for a managed veNFT"
      },
      "poolFactories()": {
        "notice": "Get all PoolFactories approved by the registry"
      },
      "poolFactoriesLength()": {
        "notice": "Get the length of the poolFactories array"
      },
      "setManagedRewardsFactory(address)": {
        "notice": "Set the rewards factory address"
      },
      "unapprove(address)": {
        "notice": "Unapprove a set of factories used in the Protocol.         While a poolFactory is unapproved, Router.sol cannot swap with pools made from the corresponding factory         Can only unapprove an approved path.         Cannot unapprove the fallback path (core v2 factories)."
      }
    },
    "notice": "Protocol Factory Registry to swap and create gauges",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 980,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18807,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_managedRewardsFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18814,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_poolFactories",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)7861_storage"
      },
      {
        "astId": 18825,
        "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
        "label": "_factoriesToPoolsFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(FactoriesToPoolFactory)18819_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(FactoriesToPoolFactory)18819_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FactoryRegistry.FactoriesToPoolFactory)",
        "numberOfBytes": "32",
        "value": "t_struct(FactoriesToPoolFactory)18819_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7861_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 7860,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7546_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FactoriesToPoolFactory)18819_storage": {
        "encoding": "inplace",
        "label": "struct FactoryRegistry.FactoriesToPoolFactory",
        "members": [
          {
            "astId": 18816,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "votingRewardsFactory",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18818,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "gaugeFactory",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7546_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 7541,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7545,
            "contract": "contracts/factories/FactoryRegistry.sol:FactoryRegistry",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}