{
  "address": "0xA71d3E51669674fFcbDe9164e19A6D041285D9b7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ve",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotDepositor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManagedOrNormalNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UpdatePeriod",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "CheckpointToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochStart",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochEnd",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "checkpointToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimMany",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimable_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTokenTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "setDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "timeCursorOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenLastBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokensPerWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ve",
      "outputs": [
        {
          "internalType": "contract IVotingEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "week",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x551bed49fe3166b7cc8b4ac03630bccffa776111c35de82ed833803971a93734",
  "receipt": {
    "to": null,
    "from": "0x68ad60CC5e8f3B7cC53beaB321cf0e6036962dBc",
    "contractAddress": "0xA71d3E51669674fFcbDe9164e19A6D041285D9b7",
    "transactionIndex": 0,
    "gasUsed": "1449150",
    "logsBloom": "0x
    "blockHash": "0xf6e6da7f5e0d5e77f977c3f313e85e1020814b82522087ac8e5e92c3b99395fc",
    "transactionHash": "0x551bed49fe3166b7cc8b4ac03630bccffa776111c35de82ed833803971a93734",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3522565,
        "transactionHash": "0x551bed49fe3166b7cc8b4ac03630bccffa776111c35de82ed833803971a93734",
        "address": "0x7b7C000000000000000000000000000000000000",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a71d3e51669674ffcbde9164e19a6d041285d9b7",
          "0x00000000000000000000000008c6f456724a8fe9c48c20430819c07a2a4b186e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xf6e6da7f5e0d5e77f977c3f313e85e1020814b82522087ac8e5e92c3b99395fc"
      }
    ],
    "blockNumber": 3522565,
    "cumulativeGasUsed": "1449150",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x08C6F456724a8Fe9C48c20430819c07A2A4b186E"
  ],
  "numDeployments": 1,
  "solcInputHash": "2799ce436a196df11f1ef308a2a7561c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotDepositor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManagedOrNormalNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UpdatePeriod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"CheckpointToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochStart\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"checkpointToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimMany\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimable_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTokenTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"timeCursorOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLastBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensPerWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"week\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"details\":\"Allows claiming of rebases up to 50 epochs old      `Splitter.updatePeriod()` must be called before claiming\",\"params\":{\"tokenId\":\"The token ID to claim for\"},\"returns\":{\"_0\":\"The amount of rebases claimed\"}},\"claimMany(uint256[])\":{\"details\":\"`Splitter.updatePeriod()` must be called before claiming\",\"params\":{\"tokenIds\":\"The token IDs to claim for\"},\"returns\":{\"_0\":\"Whether or not the claim succeeded\"}},\"claimable(uint256)\":{\"details\":\"Allows claiming of rebases up to 50 epochs old\",\"params\":{\"tokenId\":\"The token ID to check\"},\"returns\":{\"claimable_\":\"The amount of rebases claimable for the given token ID\"}},\"setDepositor(address)\":{\"details\":\"Callable once by Splitter only, Splitter is immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkpointToken()\":{\"notice\":\"Called by Splitter to notify Distributor of rebases\"},\"claim(uint256)\":{\"notice\":\"Claims rebases for a given token ID\"},\"claimMany(uint256[])\":{\"notice\":\"Claims rebases for a list of token IDs\"},\"claimable(uint256)\":{\"notice\":\"Returns the amount of rebases claimable for a given token ID\"},\"depositor()\":{\"notice\":\"Address of Splitter.sol         Authorized caller of checkpointToken()\"},\"lastTokenTime()\":{\"notice\":\"The last timestamp Splitter has called checkpointToken()\"},\"setDepositor(address)\":{\"notice\":\"Used to set splitter once on initialization\"},\"startTime()\":{\"notice\":\"Timestamp of contract creation\"},\"timeCursorOf(uint256)\":{\"notice\":\"Timestamp of most recent claim of tokenId\"},\"token()\":{\"notice\":\"Address of token used for distributions\"},\"tokenLastBalance()\":{\"notice\":\"Amount of token in contract when checkpointToken() was last called\"},\"ve()\":{\"notice\":\"Interface of VotingEscrow.sol\"},\"week()\":{\"notice\":\"7 days in seconds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.24;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IRewardsDistributor} from \\\"./interfaces/IRewardsDistributor.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {ISplitter} from \\\"./interfaces/ISplitter.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/*\\n * @title Curve Fee Distribution modified for ve(3,3) emissions\\n * @author Curve Finance, andrecronje\\n * @author velodrome.finance, @figs999, @pegahcarter\\n * @license MIT\\n */\\ncontract RewardsDistributor is IRewardsDistributor {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 constant WEEK = 7 * 86400;\\n\\n    /// @inheritdoc IRewardsDistributor\\n    uint256 public startTime;\\n    /// @inheritdoc IRewardsDistributor\\n    mapping(uint256 => uint256) public timeCursorOf;\\n\\n    /// @inheritdoc IRewardsDistributor\\n    uint256 public lastTokenTime;\\n    uint256[1000000000000000] public tokensPerWeek;\\n\\n    /// @inheritdoc IRewardsDistributor\\n    IVotingEscrow public immutable ve;\\n    /// @inheritdoc IRewardsDistributor\\n    address public token;\\n    /// @inheritdoc IRewardsDistributor\\n    address public depositor;\\n    /// @inheritdoc IRewardsDistributor\\n    uint256 public tokenLastBalance;\\n\\n    constructor(address _ve) {\\n        uint256 _t = (block.timestamp / WEEK) * WEEK;\\n        startTime = _t;\\n        lastTokenTime = _t;\\n        ve = IVotingEscrow(_ve);\\n        address _token = ve.token();\\n        token = _token;\\n        depositor = msg.sender;\\n        IERC20(_token).safeApprove(_ve, type(uint256).max);\\n    }\\n\\n    function _checkpointToken() internal {\\n        uint256 tokenBalance = IERC20(token).balanceOf(address(this));\\n        uint256 toDistribute = tokenBalance - tokenLastBalance;\\n        tokenLastBalance = tokenBalance;\\n\\n        uint256 t = lastTokenTime;\\n        uint256 sinceLast = block.timestamp - t;\\n        lastTokenTime = block.timestamp;\\n        uint256 thisWeek = (t / WEEK) * WEEK;\\n        uint256 nextWeek = 0;\\n        uint256 timestamp = block.timestamp;\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            nextWeek = thisWeek + WEEK;\\n            if (timestamp < nextWeek) {\\n                if (sinceLast == 0 && timestamp == t) {\\n                    tokensPerWeek[thisWeek] += toDistribute;\\n                } else {\\n                    tokensPerWeek[thisWeek] +=\\n                        (toDistribute * (timestamp - t)) /\\n                        sinceLast;\\n                }\\n                break;\\n            } else {\\n                if (sinceLast == 0 && nextWeek == t) {\\n                    tokensPerWeek[thisWeek] += toDistribute;\\n                } else {\\n                    tokensPerWeek[thisWeek] +=\\n                        (toDistribute * (nextWeek - t)) /\\n                        sinceLast;\\n                }\\n            }\\n            t = nextWeek;\\n            thisWeek = nextWeek;\\n        }\\n        emit CheckpointToken(timestamp, toDistribute);\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function checkpointToken() external {\\n        if (msg.sender != depositor) {\\n            revert NotDepositor();\\n        }\\n        _checkpointToken();\\n    }\\n\\n    function _claim(\\n        uint256 _tokenId,\\n        uint256 _lastTokenTime\\n    ) internal returns (uint256) {\\n        (\\n            uint256 toDistribute,\\n            uint256 epochStart,\\n            uint256 weekCursor\\n        ) = _claimable(_tokenId, _lastTokenTime);\\n        timeCursorOf[_tokenId] = weekCursor;\\n        if (toDistribute == 0) return 0;\\n\\n        emit Claimed(_tokenId, epochStart, weekCursor, toDistribute);\\n        return toDistribute;\\n    }\\n\\n    function _claimable(\\n        uint256 _tokenId,\\n        uint256 _lastTokenTime\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 toDistribute,\\n            uint256 weekCursorStart,\\n            uint256 weekCursor\\n        )\\n    {\\n        uint256 _startTime = startTime;\\n        weekCursor = timeCursorOf[_tokenId];\\n        weekCursorStart = weekCursor;\\n\\n        // case where token does not exist\\n        uint256 maxUserEpoch = ve.userPointEpoch(_tokenId);\\n        if (maxUserEpoch == 0) return (0, weekCursorStart, weekCursor);\\n\\n        // case where token exists but has never been claimed\\n        if (weekCursor == 0) {\\n            IVotingEscrow.UserPoint memory userPoint = ve.userPointHistory(\\n                _tokenId,\\n                1\\n            );\\n            weekCursor = (userPoint.ts / WEEK) * WEEK;\\n            weekCursorStart = weekCursor;\\n        }\\n        if (weekCursor >= _lastTokenTime)\\n            return (0, weekCursorStart, weekCursor);\\n        if (weekCursor < _startTime) weekCursor = _startTime;\\n\\n        for (uint256 i = 0; i < 50; i++) {\\n            if (weekCursor >= _lastTokenTime) break;\\n\\n            uint256 balance = ve.balanceOfNFTAt(\\n                _tokenId,\\n                weekCursor + WEEK - 1\\n            );\\n            uint256 supply = ve.totalSupplyAt(weekCursor + WEEK - 1);\\n            supply = supply == 0 ? 1 : supply;\\n            toDistribute += (balance * tokensPerWeek[weekCursor]) / supply;\\n            weekCursor += WEEK;\\n        }\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function claimable(\\n        uint256 _tokenId\\n    ) external view returns (uint256 claimable_) {\\n        uint256 _lastTokenTime = (lastTokenTime / WEEK) * WEEK;\\n        (claimable_, , ) = _claimable(_tokenId, _lastTokenTime);\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function claim(uint256 _tokenId) external returns (uint256) {\\n        if (\\n            ISplitter(depositor).activePeriod() <\\n            ((block.timestamp / WEEK) * WEEK)\\n        ) revert UpdatePeriod();\\n        if (ve.escrowType(_tokenId) == IVotingEscrow.EscrowType.LOCKED)\\n            revert NotManagedOrNormalNFT();\\n        uint256 _timestamp = block.timestamp;\\n        uint256 _lastTokenTime = lastTokenTime;\\n        _lastTokenTime = (_lastTokenTime / WEEK) * WEEK;\\n        uint256 amount = _claim(_tokenId, _lastTokenTime);\\n        if (amount != 0) {\\n            IVotingEscrow.LockedBalance memory _locked = IVotingEscrow(ve)\\n                .locked(_tokenId);\\n            if (_timestamp >= _locked.end && !_locked.isPermanent) {\\n                address _owner = IVotingEscrow(ve).ownerOf(_tokenId);\\n                IERC20(token).safeTransfer(_owner, amount);\\n            } else {\\n                IVotingEscrow(ve).depositFor(_tokenId, amount);\\n            }\\n            tokenLastBalance -= amount;\\n        }\\n        return amount;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function claimMany(uint256[] calldata _tokenIds) external returns (bool) {\\n        if (\\n            ISplitter(depositor).activePeriod() <\\n            ((block.timestamp / WEEK) * WEEK)\\n        ) revert UpdatePeriod();\\n        uint256 _timestamp = block.timestamp;\\n        uint256 _lastTokenTime = lastTokenTime;\\n        _lastTokenTime = (_lastTokenTime / WEEK) * WEEK;\\n        uint256 total = 0;\\n        uint256 _length = _tokenIds.length;\\n\\n        for (uint256 i = 0; i < _length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            if (ve.escrowType(_tokenId) == IVotingEscrow.EscrowType.LOCKED)\\n                revert NotManagedOrNormalNFT();\\n            if (_tokenId == 0) break;\\n            uint256 amount = _claim(_tokenId, _lastTokenTime);\\n            if (amount != 0) {\\n                IVotingEscrow.LockedBalance memory _locked = IVotingEscrow(ve)\\n                    .locked(_tokenId);\\n                if (_timestamp >= _locked.end && !_locked.isPermanent) {\\n                    address _owner = IVotingEscrow(ve).ownerOf(_tokenId);\\n                    IERC20(token).safeTransfer(_owner, amount);\\n                } else {\\n                    IVotingEscrow(ve).depositFor(_tokenId, amount);\\n                }\\n                total += amount;\\n            }\\n        }\\n        if (total != 0) {\\n            tokenLastBalance -= total;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function setDepositor(address _depositor) external {\\n        if (msg.sender != depositor) revert NotDepositor();\\n        depositor = _depositor;\\n    }\\n\\n    /// @inheritdoc IRewardsDistributor\\n    function week() external pure returns (uint256) {\\n        return WEEK;\\n    }\\n}\\n\",\"keccak256\":\"0xb9f93ce47b9b4b191e74f7c889d75669310bc702ebaf32573d77b338fae42d9f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/governance/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\n/// Modified IVotes interface for tokenId based voting\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 indexed fromDelegate,\\n        uint256 indexed toDelegate\\n    );\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @dev Returns the amount of votes that `tokenId` had at a specific moment in the past.\\n     *      If the account passed in is not the owner, returns 0.\\n     */\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `tokenId` has chosen. Can never be equal to the delegator's `tokenId`.\\n     *      Returns 0 if not delegated.\\n     */\\n    function delegates(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from `delegator` to `delegatee`. Signer must own `delegator`.\\n     */\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x9d443ede6b412305137804890806312f30351178fd3781b3a9417bfd3eea558c\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IVotingEscrow} from \\\"./IVotingEscrow.sol\\\";\\n\\ninterface IRewardsDistributor {\\n    event CheckpointToken(uint256 time, uint256 tokens);\\n    event Claimed(\\n        uint256 indexed tokenId,\\n        uint256 indexed epochStart,\\n        uint256 indexed epochEnd,\\n        uint256 amount\\n    );\\n\\n    error NotDepositor();\\n    error NotManagedOrNormalNFT();\\n    error UpdatePeriod();\\n\\n    /// @notice 7 days in seconds\\n    function week() external pure returns (uint256);\\n\\n    /// @notice Timestamp of contract creation\\n    function startTime() external view returns (uint256);\\n\\n    /// @notice Timestamp of most recent claim of tokenId\\n    function timeCursorOf(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice The last timestamp Splitter has called checkpointToken()\\n    function lastTokenTime() external view returns (uint256);\\n\\n    /// @notice Interface of VotingEscrow.sol\\n    function ve() external view returns (IVotingEscrow);\\n\\n    /// @notice Address of token used for distributions\\n    function token() external view returns (address);\\n\\n    /// @notice Address of Splitter.sol\\n    ///         Authorized caller of checkpointToken()\\n    function depositor() external view returns (address);\\n\\n    /// @notice Amount of token in contract when checkpointToken() was last called\\n    function tokenLastBalance() external view returns (uint256);\\n\\n    /// @notice Called by Splitter to notify Distributor of rebases\\n    function checkpointToken() external;\\n\\n    /// @notice Returns the amount of rebases claimable for a given token ID\\n    /// @dev Allows claiming of rebases up to 50 epochs old\\n    /// @param tokenId The token ID to check\\n    /// @return The amount of rebases claimable for the given token ID\\n    function claimable(uint256 tokenId) external view returns (uint256);\\n\\n    /// @notice Claims rebases for a given token ID\\n    /// @dev Allows claiming of rebases up to 50 epochs old\\n    ///      `Splitter.updatePeriod()` must be called before claiming\\n    /// @param tokenId The token ID to claim for\\n    /// @return The amount of rebases claimed\\n    function claim(uint256 tokenId) external returns (uint256);\\n\\n    /// @notice Claims rebases for a list of token IDs\\n    /// @dev    `Splitter.updatePeriod()` must be called before claiming\\n    /// @param tokenIds The token IDs to claim for\\n    /// @return Whether or not the claim succeeded\\n    function claimMany(uint256[] calldata tokenIds) external returns (bool);\\n\\n    /// @notice Used to set splitter once on initialization\\n    /// @dev Callable once by Splitter only, Splitter is immutable\\n    function setDepositor(address _depositor) external;\\n}\\n\",\"keccak256\":\"0x8ccfd50fa26b6176326fd94be325c2247a186da1415cd056bd27929d4ac2fe54\",\"license\":\"MIT\"},\"contracts/interfaces/ISplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface ISplitter {\\n    error AlreadyNudged();\\n    error NotEpochGovernor();\\n\\n    event Nudge(uint256 indexed _period, uint256 _oldRate, uint256 _newRate);\\n\\n    /// @notice Allows epoch governor to modify the fee splitter by at most 1 basis\\n    ///         tick per epoch on a scale to a maximum of 100 or to a minimum of 1.\\n    /// @dev Throws if not epoch governor.\\n    ///      Throws if already nudged this epoch.\\n    ///      Throws if nudging above maximum rate.\\n    ///      Throws if nudging below minimum rate.\\n    ///      This contract is coupled to EpochGovernor as it requires three option\\n    ///      simple majority voting.\\n    function nudge() external;\\n\\n    /// @notice Processes emissions and rebases. Callable once per epoch.\\n    /// @return _period Start of current epoch.\\n    function updatePeriod() external returns (uint256 _period);\\n\\n    /// @notice Timestamp of start of epoch that updatePeriod was last called in\\n    function activePeriod() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xeed68ad6fc141bd7eaba92b465b716d4f8ea7db3ae2edc534b2fc2878cc08c54\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC165, IERC721, IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC6372} from \\\"@openzeppelin/contracts/interfaces/IERC6372.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IVotes} from \\\"../governance/IVotes.sol\\\";\\n\\ninterface IVotingEscrow is IVotes, IERC4906, IERC6372, IERC721Metadata {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n        bool isPermanent;\\n    }\\n\\n    struct UserPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanent;\\n    }\\n\\n    struct GlobalPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanentLockBalance;\\n    }\\n\\n    /// @notice A checkpoint for recorded delegated voting weights at a certain timestamp\\n    struct Checkpoint {\\n        uint256 fromTimestamp;\\n        address owner;\\n        uint256 delegatedBalance;\\n        uint256 delegatee;\\n    }\\n\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    /// @dev Different types of veNFTs:\\n    /// NORMAL  - typical veNFT\\n    /// LOCKED  - veNFT which is locked into a MANAGED veNFT\\n    /// MANAGED - veNFT which can accept the deposit of NORMAL veNFTs\\n    enum EscrowType {\\n        NORMAL,\\n        LOCKED,\\n        MANAGED\\n    }\\n\\n    error AlreadyVoted();\\n    error AmountTooBig();\\n    error ERC721ReceiverRejectedTokens();\\n    error ERC721TransferToNonERC721ReceiverImplementer();\\n    error InvalidNonce();\\n    error InvalidSignature();\\n    error InvalidSignatureS();\\n    error InvalidManagedNFTId();\\n    error LockDurationNotInFuture();\\n    error LockDurationTooLong();\\n    error LockExpired();\\n    error LockNotExpired();\\n    error NoLockFound();\\n    error NonExistentToken();\\n    error NotApprovedOrOwner();\\n    error NotDistributor();\\n    error NotEmergencyCouncilOrGovernor();\\n    error NotGovernor();\\n    error NotGovernorOrManager();\\n    error NotManagedNFT();\\n    error NotManagedOrNormalNFT();\\n    error NotLockedNFT();\\n    error NotNormalNFT();\\n    error NotPermanentLock();\\n    error NotOwner();\\n    error NotTeam();\\n    error NotVoter();\\n    error OwnershipChange();\\n    error PermanentLock();\\n    error SameAddress();\\n    error SameNFT();\\n    error SameState();\\n    error SplitNoOwner();\\n    error SplitNotAllowed();\\n    error SignatureExpired();\\n    error TooManyTokenIDs();\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error ZeroBalance();\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        DepositType indexed depositType,\\n        uint256 value,\\n        uint256 locktime,\\n        uint256 ts\\n    );\\n    event Withdraw(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        uint256 ts\\n    );\\n    event LockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event UnlockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event Supply(uint256 prevSupply, uint256 supply);\\n    event Merge(\\n        address indexed _sender,\\n        uint256 indexed _from,\\n        uint256 indexed _to,\\n        uint256 _amountFrom,\\n        uint256 _amountTo,\\n        uint256 _amountFinal,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event Split(\\n        uint256 indexed _from,\\n        uint256 indexed _tokenId1,\\n        uint256 indexed _tokenId2,\\n        address _sender,\\n        uint256 _splitAmount1,\\n        uint256 _splitAmount2,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event CreateManaged(\\n        address indexed _to,\\n        uint256 indexed _mTokenId,\\n        address indexed _from,\\n        address _lockedManagedReward,\\n        address _freeManagedReward\\n    );\\n    event DepositManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event WithdrawManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event SetAllowedManager(address indexed _allowedManager);\\n\\n    // State variables\\n    /// @notice Address of Meta-tx Forwarder\\n    function forwarder() external view returns (address);\\n\\n    /// @notice Address of FactoryRegistry.sol\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of token used to create a veNFT\\n    function token() external view returns (address);\\n\\n    /// @notice Address of RewardsDistributor.sol\\n    function distributor() external view returns (address);\\n\\n    /// @notice Address of Voter.sol\\n    function voter() external view returns (address);\\n\\n    /// @notice Address of Protocol Team multisig\\n    function team() external view returns (address);\\n\\n    /// @dev address which can create managed NFTs\\n    function allowedManager() external view returns (address);\\n\\n    /// @dev Current count of token\\n    function tokenId() external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping of token id to escrow type\\n    ///      Takes advantage of the fact default value is EscrowType.NORMAL\\n    function escrowType(uint256 tokenId) external view returns (EscrowType);\\n\\n    /// @dev Mapping of token id to managed id\\n    function idToManaged(\\n        uint256 tokenId\\n    ) external view returns (uint256 managedTokenId);\\n\\n    /// @dev Mapping of user token id to managed token id to weight of token id\\n    function weights(\\n        uint256 tokenId,\\n        uint256 managedTokenId\\n    ) external view returns (uint256 weight);\\n\\n    /// @dev Mapping of managed id to deactivated state\\n    function deactivated(uint256 tokenId) external view returns (bool inactive);\\n\\n    /// @dev Mapping from managed nft id to locked managed rewards\\n    ///      `token` denominated rewards (rebases/rewards) stored in locked managed rewards contract\\n    ///      to prevent co-mingling of assets\\n    function managedToLocked(uint256 tokenId) external view returns (address);\\n\\n    /// @dev Mapping from managed nft id to free managed rewards contract\\n    ///      these rewards can be freely withdrawn by users\\n    function managedToFree(uint256 tokenId) external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Create managed NFT (a permanent lock) for use within ecosystem.\\n    /// @dev Throws if address already owns a managed NFT.\\n    /// @return _mTokenId managed token id.\\n    function createManagedLockFor(\\n        address _to\\n    ) external returns (uint256 _mTokenId);\\n\\n    /// @notice Delegates balance to managed nft\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    ///         Permanent locks that are deposited will automatically unlock.\\n    /// @dev Managed nft will remain max-locked as long as there is at least one\\n    ///      deposit or withdrawal per week.\\n    ///      Throws if deposit nft is managed.\\n    ///      Throws if recipient nft is not managed.\\n    ///      Throws if deposit nft is already locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited\\n    /// @param _mTokenId tokenId of managed NFT that will receive the deposit\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Retrieves locked rewards and withdraws balance from managed nft.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    /// @dev Throws if NFT not locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Permit one address to call createManagedLockFor() that is not Voter.governor()\\n    function setAllowedManager(address _allowedManager) external;\\n\\n    /// @notice Set Managed NFT state. Inactive NFTs cannot be deposited into.\\n    /// @param _mTokenId managed nft state to set\\n    /// @param _state true => inactive, false => active\\n    function setManagedState(uint256 _mTokenId, bool _state) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function version() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setTeam(address _team) external;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenId\\n    function ownerToNFTokenIdList(\\n        address _owner,\\n        uint256 _index\\n    ) external view returns (uint256 _tokenId);\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(\\n        uint256 _tokenId\\n    ) external view returns (address operator);\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /// @notice Check whether spender is owner or an approved user for a given veNFT\\n    /// @param _spender .\\n    /// @param _tokenId .\\n    function isApprovedOrOwner(\\n        address _spender,\\n        uint256 _tokenId\\n    ) external returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 _interfaceID\\n    ) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ESCROW STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Total count of epochs witnessed since contract creation\\n    function epoch() external view returns (uint256);\\n\\n    /// @notice Total amount of token() deposited\\n    function supply() external view returns (uint256);\\n\\n    /// @notice Aggregate permanent locked balances\\n    function permanentLockBalance() external view returns (uint256);\\n\\n    function userPointEpoch(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _epoch);\\n\\n    /// @notice time -> signed slope change\\n    function slopeChanges(uint256 _timestamp) external view returns (int128);\\n\\n    /// @notice account -> can split\\n    function canSplit(address _account) external view returns (bool);\\n\\n    /// @notice Global point history at a given index\\n    function pointHistory(\\n        uint256 _loc\\n    ) external view returns (GlobalPoint memory);\\n\\n    /// @notice Get the LockedBalance (amount, end) of a _tokenId\\n    /// @param _tokenId .\\n    /// @return LockedBalance of _tokenId\\n    function locked(\\n        uint256 _tokenId\\n    ) external view returns (LockedBalance memory);\\n\\n    /// @notice User -> UserPoint[userEpoch]\\n    function userPointHistory(\\n        uint256 _tokenId,\\n        uint256 _loc\\n    ) external view returns (UserPoint memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ESCROW LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external;\\n\\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _tokenId lock NFT\\n    /// @param _value Amount to add to user's lock\\n    function depositFor(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @return TokenId of created veNFT\\n    function createLock(\\n        uint256 _value,\\n        uint256 _lockDuration\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    /// @return TokenId of created veNFT\\n    function createLockFor(\\n        uint256 _value,\\n        uint256 _lockDuration,\\n        address _to\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increaseAmount(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Extend the unlock time for `_tokenId`\\n    ///         Cannot extend lock time of permanent locks\\n    /// @param _lockDuration New number of seconds until tokens unlock\\n    function increaseUnlockTime(\\n        uint256 _tokenId,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    /// @notice Withdraw all tokens for `_tokenId`\\n    /// @dev Only possible if the lock is both expired and not permanent\\n    ///      This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///      will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    function withdraw(uint256 _tokenId) external;\\n\\n    /// @notice Merges `_from` into `_to`.\\n    /// @dev Cannot merge `_from` locks that are permanent or have already voted this epoch.\\n    ///      Cannot merge `_to` locks that have already expired.\\n    ///      This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///      will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    /// @param _from VeNFT to merge from.\\n    /// @param _to VeNFT to merge into.\\n    function merge(uint256 _from, uint256 _to) external;\\n\\n    /// @notice Splits veNFT into two new veNFTS - one with oldLocked.amount - `_amount`, and the second with `_amount`\\n    /// @dev    This burns the tokenId of the target veNFT\\n    ///         Callable by approved or owner\\n    ///         If this is called by approved, approved will not have permissions to manipulate the newly created veNFTs\\n    ///         Returns the two new split veNFTs to owner\\n    ///         If `from` is permanent, will automatically dedelegate.\\n    ///         This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///         will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    /// @param _from VeNFT to split.\\n    /// @param _amount Amount to split from veNFT.\\n    /// @return _tokenId1 Return tokenId of veNFT with oldLocked.amount - `_amount`.\\n    /// @return _tokenId2 Return tokenId of veNFT with `_amount`.\\n    function split(\\n        uint256 _from,\\n        uint256 _amount\\n    ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\n\\n    /// @notice Toggle split for a specific address.\\n    /// @dev Toggle split for address(0) to enable or disable for all.\\n    /// @param _account Address to toggle split permissions\\n    /// @param _bool True to allow, false to disallow\\n    function toggleSplit(address _account, bool _bool) external;\\n\\n    /// @notice Permanently lock a veNFT. Voting power will be equal to\\n    ///         `LockedBalance.amount` with no decay. Required to delegate.\\n    /// @dev Only callable by unlocked normal veNFTs.\\n    /// @param _tokenId tokenId to lock.\\n    function lockPermanent(uint256 _tokenId) external;\\n\\n    /// @notice Unlock a permanently locked veNFT. Voting power will decay.\\n    ///         Will automatically dedelegate if delegated.\\n    /// @dev Only callable by permanently locked veNFTs.\\n    ///      Cannot unlock if already voted this epoch.\\n    /// @param _tokenId tokenId to unlock.\\n    function unlockPermanent(uint256 _tokenId) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           GAUGE VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Get the voting power for _tokenId at the current timestamp\\n    /// @dev Returns 0 if called in the same block as a transfer.\\n    /// @param _tokenId .\\n    /// @return Voting power\\n    function balanceOfNFT(uint256 _tokenId) external view returns (uint256);\\n\\n    /// @notice Get the voting power for _tokenId at a given timestamp\\n    /// @param _tokenId .\\n    /// @param _t Timestamp to query voting power\\n    /// @return Voting power\\n    function balanceOfNFTAt(\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at current timestamp\\n    /// @return Total voting power at current timestamp\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at a given timestamp\\n    /// @param _t Timestamp to query total voting power\\n    /// @return Total voting power at given timestamp\\n    function totalSupplyAt(uint256 _t) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            GAUGE VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice See if a queried _tokenId has actively voted\\n    /// @param _tokenId .\\n    /// @return True if voted, else false\\n    function voted(uint256 _tokenId) external view returns (bool);\\n\\n    /// @notice Set the global state voter and distributor\\n    /// @dev This is only called once, at setup\\n    function setVoterAndDistributor(\\n        address _voter,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Set `voted` for _tokenId to true or false\\n    /// @dev Only callable by voter\\n    /// @param _tokenId .\\n    /// @param _voted .\\n    function voting(uint256 _tokenId, bool _voted) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            DAO VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The number of checkpoints for each tokenId\\n    function numCheckpoints(uint256 tokenId) external view returns (uint48);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    function nonces(address account) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function delegates(uint256 delegator) external view returns (uint256);\\n\\n    /// @notice A record of delegated token checkpoints for each account, by index\\n    /// @param tokenId .\\n    /// @param index .\\n    /// @return Checkpoint\\n    function checkpoints(\\n        uint256 tokenId,\\n        uint48 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @inheritdoc IVotes\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function getPastTotalSupply(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             DAO VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotes\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /// @inheritdoc IVotes\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6372 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC6372\\n    function clock() external view returns (uint48);\\n\\n    /// @inheritdoc IERC6372\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x750244098d437d0e068657b768ad60432fef157c36b110234f00fedf784656ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001d8938038062001d898339810160408190526200003491620004ef565b600062093a8062000046814262000521565b62000052919062000544565b600081815560028290556001600160a01b038416608081905260408051637e062a3560e11b815290519394509192909163fc0c546a9160048083019260209291908290030181865afa158015620000ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000d39190620004ef565b66038d7ea4c6800380546001600160a01b0383166001600160a01b0319918216811790925566038d7ea4c680048054909116331790559091506200011b908460001962000124565b50505062000627565b801580620001a25750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156200017a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a0919062000570565b155b6200021a5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002729185916200027716565b505050565b6040805180820190915260208082527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490820152600090620002c6906001600160a01b0385169084906200034b565b9050805160001480620002ea575080806020019051810190620002ea91906200058a565b620002725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000211565b60606200035c848460008562000364565b949350505050565b606082471015620003c75760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840162000211565b600080866001600160a01b03168587604051620003e59190620005d4565b60006040518083038185875af1925050503d806000811462000424576040519150601f19603f3d011682016040523d82523d6000602084013e62000429565b606091505b5090925090506200043d8783838762000448565b979650505050505050565b60608315620004bc578251600003620004b4576001600160a01b0385163b620004b45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640162000211565b50816200035c565b6200035c8383815115620004d35781518083602001fd5b8060405162461bcd60e51b8152600401620002119190620005f2565b6000602082840312156200050257600080fd5b81516001600160a01b03811681146200051a57600080fd5b9392505050565b6000826200053f57634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176200056a57634e487b7160e01b600052601160045260246000fd5b92915050565b6000602082840312156200058357600080fd5b5051919050565b6000602082840312156200059d57600080fd5b815180151581146200051a57600080fd5b60005b83811015620005cb578181015183820152602001620005b1565b50506000910152565b60008251620005e8818460208701620005ae565b9190910192915050565b602081526000825180602084015262000613816040850160208701620005ae565b601f01601f19169190910160400192915050565b6080516116f3620006966000396000818160d4015281816102e2015281816103d0015281816104790152818161052f015281816106f0015281816107cd015281816108760152818161092c01528181610e0201528181610eb201528181610f8a015261103c01526116f36000f3fe608060405234801561001057600080fd5b50600436106100ca5760003560e01c8063925489a81161007c578063925489a814610188578063939ea66b146101ab578063bee5dc32146101b4578063c7c4ff46146101be578063d1d58b25146101d7578063f2c098b7146101ea578063fc0c546a146101fd57600080fd5b80631f850716146100cf578063379607f5146101135780634607bf60146101345780634995b4581461015457806378e979251461015d578063899519be146101665780638ec8468a14610179575b600080fd5b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610126610121366004611349565b610216565b60405190815260200161010a565b610126610142366004611349565b60016020526000908152604090205481565b62093a80610126565b61012660005481565b610126610174366004611349565b6105bb565b61012666038d7ea4c680055481565b61019b610196366004611362565b6105d8565b604051901515815260200161010a565b61012660025481565b6101bc6109dd565b005b66038d7ea4c68004546100f6906001600160a01b031681565b6101266101e5366004611349565b610a18565b6101bc6101f83660046113ef565b610a4d565b66038d7ea4c68003546100f6906001600160a01b031681565b600062093a806102268142611429565b610230919061144b565b66038d7ea4c6800460009054906101000a90046001600160a01b03166001600160a01b0316630a441f7b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190611462565b10156102cc5760405163465a1c3560e01b815260040160405180910390fd5b600160405161f8e560ef1b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637c72800090602401602060405180830381865afa158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190611491565b60028111156103665761036661147b565b0361038457604051635eb32db160e11b815260040160405180910390fd5b600254429062093a806103978183611429565b6103a1919061144b565b905060006103af8583610aa6565b905080156105b357604051635a2d1e0760e11b8152600481018690526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b45a3c0e90602401606060405180830381865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044391906114d9565b90508060200151841015801561045b57508060400151155b15610512576040516331a9108f60e11b8152600481018790526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec919061154c565b66038d7ea4c680035490915061050c906001600160a01b03168285610b28565b50610594565b60405163076426ed60e11b815260048101879052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630ec84dda90604401600060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050505b8166038d7ea4c6800560008282546105ac9190611569565b9091555050505b949350505050565b60038166038d7ea4c6800081106105d157600080fd5b0154905081565b600062093a806105e88142611429565b6105f2919061144b565b66038d7ea4c6800460009054906101000a90046001600160a01b03166001600160a01b0316630a441f7b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190611462565b101561068e5760405163465a1c3560e01b815260040160405180910390fd5b600254429062093a806106a18183611429565b6106ab919061144b565b9050600084815b818110156109a95760008888838181106106ce576106ce61157c565b602002919091013591506001905060405161f8e560ef1b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637c72800090602401602060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611491565b60028111156107745761077461147b565b0361079257604051635eb32db160e11b815260040160405180910390fd5b806000036107a057506109a9565b60006107ac8287610aa6565b9050801561099f57604051635a2d1e0760e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b45a3c0e90602401606060405180830381865afa15801561081c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084091906114d9565b90508060200151881015801561085857508060400151155b1561090f576040516331a9108f60e11b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061154c565b66038d7ea4c6800354909150610909906001600160a01b03168285610b28565b50610991565b60405163076426ed60e11b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630ec84dda90604401600060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050505b61099b8287611592565b9550505b50506001016106b2565b5081156109ce578166038d7ea4c6800560008282546109c89190611569565b90915550505b60019450505050505b92915050565b66038d7ea4c68004546001600160a01b03163314610a0e57604051633cc50b4560e01b815260040160405180910390fd5b610a16610b7f565b565b60008062093a8080600254610a2d9190611429565b610a37919061144b565b9050610a438382610dd5565b5090949350505050565b66038d7ea4c68004546001600160a01b03163314610a7e57604051633cc50b4560e01b815260040160405180910390fd5b66038d7ea4c6800480546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080610ab68686610dd5565b60008981526001602052604081208290559295509093509150839003610ae257600093505050506109d7565b8082877fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f0086604051610b1691815260200190565b60405180910390a45090949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b7a90849061114c565b505050565b66038d7ea4c68003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611462565b9050600066038d7ea4c680055482610c0a9190611569565b66038d7ea4c680058390556002549091506000610c278242611569565b426002559050600062093a80610c3d8185611429565b610c47919061144b565b9050600042815b6014811015610d9257610c6462093a8085611592565b925082821015610ced5784158015610c7b57508582145b15610cb5578660038566038d7ea4c680008110610c9a57610c9a61157c565b016000828254610caa9190611592565b90915550610d929050565b84610cc08784611569565b610cca908961144b565b610cd49190611429565b60038566038d7ea4c680008110610c9a57610c9a61157c565b84158015610cfa57508583145b15610d34578660038566038d7ea4c680008110610d1957610d1961157c565b016000828254610d299190611592565b90915550610d829050565b84610d3f8785611569565b610d49908961144b565b610d539190611429565b60038566038d7ea4c680008110610d6c57610d6c61157c565b016000828254610d7c9190611592565b90915550505b9194508492508291600101610c4e565b5060408051828152602081018890527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a150505050505050565b600080548382526001602052604080832054905163e58f594760e01b8152600481018690529091829184907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e58f594790602401602060405180830381865afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e759190611462565b905080600003610e8a57600094505050611145565b82600003610f4c576040516322565a1560e11b815260048101889052600160248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906344acb42a9060440160a060405180830381865afa158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2591906115a5565b905062093a80808260400151610f3b9190611429565b610f45919061144b565b9350839450505b858310610f5e57600094505050611145565b81831015610f6a578192505b60005b603281101561114157868410156111415760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e0514aba8a6001610fbf62093a808a611592565b610fc99190611569565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa15801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e9190611462565b905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663981b24d0600161107062093a808a611592565b61107a9190611569565b6040518263ffffffff1660e01b815260040161109891815260200190565b602060405180830381865afa1580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190611462565b905080156110e757806110ea565b60015b90508060038766038d7ea4c6800081106111065761110661157c565b0154611112908461144b565b61111c9190611429565b6111269089611592565b975061113562093a8087611592565b95505050600101610f6d565b5050505b9250925092565b60006111a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112269092919063ffffffff16565b90508051600014806111c25750808060200190518101906111c2919061162f565b610b7a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606105b3848460008585600080866001600160a01b0316858760405161124d919061166e565b60006040518083038185875af1925050503d806000811461128a576040519150601f19603f3d011682016040523d82523d6000602084013e61128f565b606091505b50915091506112a0878383876112ab565b979650505050505050565b6060831561131a578251600003611313576001600160a01b0385163b6113135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161121d565b50816105b3565b6105b3838381511561132f5781518083602001fd5b8060405162461bcd60e51b815260040161121d919061168a565b60006020828403121561135b57600080fd5b5035919050565b6000806020838503121561137557600080fd5b823567ffffffffffffffff8082111561138d57600080fd5b818501915085601f8301126113a157600080fd5b8135818111156113b057600080fd5b8660208260051b85010111156113c557600080fd5b60209290920196919550909350505050565b6001600160a01b03811681146113ec57600080fd5b50565b60006020828403121561140157600080fd5b813561140c816113d7565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008261144657634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176109d7576109d7611413565b60006020828403121561147457600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156114a357600080fd5b81516003811061140c57600080fd5b8051600f81900b81146114c457600080fd5b919050565b805180151581146114c457600080fd5b6000606082840312156114eb57600080fd5b6040516060810181811067ffffffffffffffff8211171561151c57634e487b7160e01b600052604160045260246000fd5b604052611528836114b2565b815260208301516020820152611540604084016114c9565b60408201529392505050565b60006020828403121561155e57600080fd5b815161140c816113d7565b818103818111156109d7576109d7611413565b634e487b7160e01b600052603260045260246000fd5b808201808211156109d7576109d7611413565b600060a082840312156115b757600080fd5b60405160a0810181811067ffffffffffffffff821117156115e857634e487b7160e01b600052604160045260246000fd5b6040526115f4836114b2565b8152611602602084016114b2565b60208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561164157600080fd5b61140c826114c9565b60005b8381101561166557818101518382015260200161164d565b50506000910152565b6000825161168081846020870161164a565b9190910192915050565b60208152600082518060208401526116a981604085016020870161164a565b601f01601f1916919091016040019291505056fea26469706673582212202da388d221fde23160d3994fd479b43101bd0f7f5cb702016d7dcca6d61c85cd64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ca5760003560e01c8063925489a81161007c578063925489a814610188578063939ea66b146101ab578063bee5dc32146101b4578063c7c4ff46146101be578063d1d58b25146101d7578063f2c098b7146101ea578063fc0c546a146101fd57600080fd5b80631f850716146100cf578063379607f5146101135780634607bf60146101345780634995b4581461015457806378e979251461015d578063899519be146101665780638ec8468a14610179575b600080fd5b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b610126610121366004611349565b610216565b60405190815260200161010a565b610126610142366004611349565b60016020526000908152604090205481565b62093a80610126565b61012660005481565b610126610174366004611349565b6105bb565b61012666038d7ea4c680055481565b61019b610196366004611362565b6105d8565b604051901515815260200161010a565b61012660025481565b6101bc6109dd565b005b66038d7ea4c68004546100f6906001600160a01b031681565b6101266101e5366004611349565b610a18565b6101bc6101f83660046113ef565b610a4d565b66038d7ea4c68003546100f6906001600160a01b031681565b600062093a806102268142611429565b610230919061144b565b66038d7ea4c6800460009054906101000a90046001600160a01b03166001600160a01b0316630a441f7b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610289573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ad9190611462565b10156102cc5760405163465a1c3560e01b815260040160405180910390fd5b600160405161f8e560ef1b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637c72800090602401602060405180830381865afa158015610331573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103559190611491565b60028111156103665761036661147b565b0361038457604051635eb32db160e11b815260040160405180910390fd5b600254429062093a806103978183611429565b6103a1919061144b565b905060006103af8583610aa6565b905080156105b357604051635a2d1e0760e11b8152600481018690526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b45a3c0e90602401606060405180830381865afa15801561041f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044391906114d9565b90508060200151841015801561045b57508060400151155b15610512576040516331a9108f60e11b8152600481018790526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa1580156104c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ec919061154c565b66038d7ea4c680035490915061050c906001600160a01b03168285610b28565b50610594565b60405163076426ed60e11b815260048101879052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630ec84dda90604401600060405180830381600087803b15801561057b57600080fd5b505af115801561058f573d6000803e3d6000fd5b505050505b8166038d7ea4c6800560008282546105ac9190611569565b9091555050505b949350505050565b60038166038d7ea4c6800081106105d157600080fd5b0154905081565b600062093a806105e88142611429565b6105f2919061144b565b66038d7ea4c6800460009054906101000a90046001600160a01b03166001600160a01b0316630a441f7b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190611462565b101561068e5760405163465a1c3560e01b815260040160405180910390fd5b600254429062093a806106a18183611429565b6106ab919061144b565b9050600084815b818110156109a95760008888838181106106ce576106ce61157c565b602002919091013591506001905060405161f8e560ef1b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637c72800090602401602060405180830381865afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611491565b60028111156107745761077461147b565b0361079257604051635eb32db160e11b815260040160405180910390fd5b806000036107a057506109a9565b60006107ac8287610aa6565b9050801561099f57604051635a2d1e0760e11b8152600481018390526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b45a3c0e90602401606060405180830381865afa15801561081c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084091906114d9565b90508060200151881015801561085857508060400151155b1561090f576040516331a9108f60e11b8152600481018490526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa1580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e9919061154c565b66038d7ea4c6800354909150610909906001600160a01b03168285610b28565b50610991565b60405163076426ed60e11b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630ec84dda90604401600060405180830381600087803b15801561097857600080fd5b505af115801561098c573d6000803e3d6000fd5b505050505b61099b8287611592565b9550505b50506001016106b2565b5081156109ce578166038d7ea4c6800560008282546109c89190611569565b90915550505b60019450505050505b92915050565b66038d7ea4c68004546001600160a01b03163314610a0e57604051633cc50b4560e01b815260040160405180910390fd5b610a16610b7f565b565b60008062093a8080600254610a2d9190611429565b610a37919061144b565b9050610a438382610dd5565b5090949350505050565b66038d7ea4c68004546001600160a01b03163314610a7e57604051633cc50b4560e01b815260040160405180910390fd5b66038d7ea4c6800480546001600160a01b0319166001600160a01b0392909216919091179055565b600080600080610ab68686610dd5565b60008981526001602052604081208290559295509093509150839003610ae257600093505050506109d7565b8082877fcae2990aa9af8eb1c64713b7eddb3a80bf18e49a94a13fe0d0002b5d61d58f0086604051610b1691815260200190565b60405180910390a45090949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b7a90849061114c565b505050565b66038d7ea4c68003546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190611462565b9050600066038d7ea4c680055482610c0a9190611569565b66038d7ea4c680058390556002549091506000610c278242611569565b426002559050600062093a80610c3d8185611429565b610c47919061144b565b9050600042815b6014811015610d9257610c6462093a8085611592565b925082821015610ced5784158015610c7b57508582145b15610cb5578660038566038d7ea4c680008110610c9a57610c9a61157c565b016000828254610caa9190611592565b90915550610d929050565b84610cc08784611569565b610cca908961144b565b610cd49190611429565b60038566038d7ea4c680008110610c9a57610c9a61157c565b84158015610cfa57508583145b15610d34578660038566038d7ea4c680008110610d1957610d1961157c565b016000828254610d299190611592565b90915550610d829050565b84610d3f8785611569565b610d49908961144b565b610d539190611429565b60038566038d7ea4c680008110610d6c57610d6c61157c565b016000828254610d7c9190611592565b90915550505b9194508492508291600101610c4e565b5060408051828152602081018890527fce749457b74e10f393f2c6b1ce4261b78791376db5a3f501477a809f03f500d6910160405180910390a150505050505050565b600080548382526001602052604080832054905163e58f594760e01b8152600481018690529091829184907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e58f594790602401602060405180830381865afa158015610e51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e759190611462565b905080600003610e8a57600094505050611145565b82600003610f4c576040516322565a1560e11b815260048101889052600160248201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906344acb42a9060440160a060405180830381865afa158015610f01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2591906115a5565b905062093a80808260400151610f3b9190611429565b610f45919061144b565b9350839450505b858310610f5e57600094505050611145565b81831015610f6a578192505b60005b603281101561114157868410156111415760006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e0514aba8a6001610fbf62093a808a611592565b610fc99190611569565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401602060405180830381865afa15801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e9190611462565b905060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663981b24d0600161107062093a808a611592565b61107a9190611569565b6040518263ffffffff1660e01b815260040161109891815260200190565b602060405180830381865afa1580156110b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d99190611462565b905080156110e757806110ea565b60015b90508060038766038d7ea4c6800081106111065761110661157c565b0154611112908461144b565b61111c9190611429565b6111269089611592565b975061113562093a8087611592565b95505050600101610f6d565b5050505b9250925092565b60006111a1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166112269092919063ffffffff16565b90508051600014806111c25750808060200190518101906111c2919061162f565b610b7a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606105b3848460008585600080866001600160a01b0316858760405161124d919061166e565b60006040518083038185875af1925050503d806000811461128a576040519150601f19603f3d011682016040523d82523d6000602084013e61128f565b606091505b50915091506112a0878383876112ab565b979650505050505050565b6060831561131a578251600003611313576001600160a01b0385163b6113135760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161121d565b50816105b3565b6105b3838381511561132f5781518083602001fd5b8060405162461bcd60e51b815260040161121d919061168a565b60006020828403121561135b57600080fd5b5035919050565b6000806020838503121561137557600080fd5b823567ffffffffffffffff8082111561138d57600080fd5b818501915085601f8301126113a157600080fd5b8135818111156113b057600080fd5b8660208260051b85010111156113c557600080fd5b60209290920196919550909350505050565b6001600160a01b03811681146113ec57600080fd5b50565b60006020828403121561140157600080fd5b813561140c816113d7565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60008261144657634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176109d7576109d7611413565b60006020828403121561147457600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156114a357600080fd5b81516003811061140c57600080fd5b8051600f81900b81146114c457600080fd5b919050565b805180151581146114c457600080fd5b6000606082840312156114eb57600080fd5b6040516060810181811067ffffffffffffffff8211171561151c57634e487b7160e01b600052604160045260246000fd5b604052611528836114b2565b815260208301516020820152611540604084016114c9565b60408201529392505050565b60006020828403121561155e57600080fd5b815161140c816113d7565b818103818111156109d7576109d7611413565b634e487b7160e01b600052603260045260246000fd5b808201808211156109d7576109d7611413565b600060a082840312156115b757600080fd5b60405160a0810181811067ffffffffffffffff821117156115e857634e487b7160e01b600052604160045260246000fd5b6040526115f4836114b2565b8152611602602084016114b2565b60208201526040830151604082015260608301516060820152608083015160808201528091505092915050565b60006020828403121561164157600080fd5b61140c826114c9565b60005b8381101561166557818101518382015260200161164d565b50506000910152565b6000825161168081846020870161164a565b9190910192915050565b60208152600082518060208401526116a981604085016020870161164a565b601f01601f1916919091016040019291505056fea26469706673582212202da388d221fde23160d3994fd479b43101bd0f7f5cb702016d7dcca6d61c85cd64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "details": "Allows claiming of rebases up to 50 epochs old      `Splitter.updatePeriod()` must be called before claiming",
        "params": {
          "tokenId": "The token ID to claim for"
        },
        "returns": {
          "_0": "The amount of rebases claimed"
        }
      },
      "claimMany(uint256[])": {
        "details": "`Splitter.updatePeriod()` must be called before claiming",
        "params": {
          "tokenIds": "The token IDs to claim for"
        },
        "returns": {
          "_0": "Whether or not the claim succeeded"
        }
      },
      "claimable(uint256)": {
        "details": "Allows claiming of rebases up to 50 epochs old",
        "params": {
          "tokenId": "The token ID to check"
        },
        "returns": {
          "claimable_": "The amount of rebases claimable for the given token ID"
        }
      },
      "setDepositor(address)": {
        "details": "Callable once by Splitter only, Splitter is immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkpointToken()": {
        "notice": "Called by Splitter to notify Distributor of rebases"
      },
      "claim(uint256)": {
        "notice": "Claims rebases for a given token ID"
      },
      "claimMany(uint256[])": {
        "notice": "Claims rebases for a list of token IDs"
      },
      "claimable(uint256)": {
        "notice": "Returns the amount of rebases claimable for a given token ID"
      },
      "depositor()": {
        "notice": "Address of Splitter.sol         Authorized caller of checkpointToken()"
      },
      "lastTokenTime()": {
        "notice": "The last timestamp Splitter has called checkpointToken()"
      },
      "setDepositor(address)": {
        "notice": "Used to set splitter once on initialization"
      },
      "startTime()": {
        "notice": "Timestamp of contract creation"
      },
      "timeCursorOf(uint256)": {
        "notice": "Timestamp of most recent claim of tokenId"
      },
      "token()": {
        "notice": "Address of token used for distributions"
      },
      "tokenLastBalance()": {
        "notice": "Amount of token in contract when checkpointToken() was last called"
      },
      "ve()": {
        "notice": "Interface of VotingEscrow.sol"
      },
      "week()": {
        "notice": "7 days in seconds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13817,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "startTime",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 13822,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "timeCursorOf",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13825,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "lastTokenTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13829,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokensPerWeek",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)1000000000000000_storage"
      },
      {
        "astId": 13836,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "token",
        "offset": 0,
        "slot": "1000000000000003",
        "type": "t_address"
      },
      {
        "astId": 13839,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "depositor",
        "offset": 0,
        "slot": "1000000000000004",
        "type": "t_address"
      },
      {
        "astId": 13842,
        "contract": "contracts/RewardsDistributor.sol:RewardsDistributor",
        "label": "tokenLastBalance",
        "offset": 0,
        "slot": "1000000000000005",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)1000000000000000_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[1000000000000000]",
        "numberOfBytes": "32000000000000000"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}