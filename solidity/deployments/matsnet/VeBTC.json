{
  "address": "0x41c919D87382c9C14A3A1f6B378439abEdA9f253",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btc",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factoryRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721ReceiverRejectedTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721TransferToNonERC721ReceiverImplementer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidManagedNFTId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationNotInFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockDurationTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockNotExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoLockFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NonExistentToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotApprovedOrOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotDistributor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEmergencyCouncilOrGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLockedNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManagedNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotManagedOrNormalNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotNormalNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTeam",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotVoter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OwnershipChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermanentLock",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeCastOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeCastUnderflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameState",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitNoOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SplitNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyTokenIDs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockedManagedReward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_freeManagedReward",
          "type": "address"
        }
      ],
      "name": "CreateManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "fromDelegate",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "toDelegate",
          "type": "uint256"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum IVotingEscrow.DepositType",
          "name": "depositType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "name": "DepositManaged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "name": "LockPermanent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountFrom",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountTo",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountFinal",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "name": "Merge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_allowedManager",
          "type": "address"
        }
      ],
      "name": "SetAllowedManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_splitAmount1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_splitAmount2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "name": "Split",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "name": "UnlockPermanent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ts",
          "type": "uint256"
        }
      ],
      "name": "WithdrawManaged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLOCK_MODE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowedManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "artProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOfNFTAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canSplit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "_index",
          "type": "uint48"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "fromTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "delegatedBalance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delegatee",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVotingEscrow.Checkpoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clock",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "createLockFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "createManagedLockFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deactivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delegator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegatee",
          "type": "uint256"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delegator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "delegatee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delegator",
          "type": "uint256"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        }
      ],
      "name": "depositManaged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "escrowType",
      "outputs": [
        {
          "internalType": "enum IVotingEscrow.EscrowType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getPastTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getPastVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToManaged",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockDuration",
          "type": "uint256"
        }
      ],
      "name": "increaseUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "lockPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "amount",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "end",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPermanent",
              "type": "bool"
            }
          ],
          "internalType": "struct IVotingEscrow.LockedBalance",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "managedToFree",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "managedToLocked",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "merge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ownerToNFTokenIdList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "permanentLockBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loc",
          "type": "uint256"
        }
      ],
      "name": "pointHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "bias",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "slope",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permanentLockBalance",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVotingEscrow.GlobalPoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_allowedManager",
          "type": "address"
        }
      ],
      "name": "setAllowedManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "name": "setArtProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mTokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setManagedState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_team",
          "type": "address"
        }
      ],
      "name": "setTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "setVoterAndDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slopeChanges",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "split",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId2",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "team",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "toggleSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "unlockPermanent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userPointEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loc",
          "type": "uint256"
        }
      ],
      "name": "userPointHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "bias",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "slope",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "ts",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "blk",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "permanent",
              "type": "uint256"
            }
          ],
          "internalType": "struct IVotingEscrow.UserPoint",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_voted",
          "type": "bool"
        }
      ],
      "name": "voting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "weights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "withdrawManaged",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c961585d2bcb46811bd479f1a3aa94c9430fc6661e273e4295de3a55588c791",
  "receipt": {
    "to": null,
    "from": "0x123694886DBf5Ac94DDA07135349534536D14cAf",
    "contractAddress": "0x41c919D87382c9C14A3A1f6B378439abEdA9f253",
    "transactionIndex": 0,
    "gasUsed": "5582862",
    "logsBloom": "0x
    "blockHash": "0x2c1200bb892f4b80993f10e98d2b851de6ca448b8fe8ccb8f71eae9b280a8966",
    "transactionHash": "0x7c961585d2bcb46811bd479f1a3aa94c9430fc6661e273e4295de3a55588c791",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2608966,
        "transactionHash": "0x7c961585d2bcb46811bd479f1a3aa94c9430fc6661e273e4295de3a55588c791",
        "address": "0x41c919D87382c9C14A3A1f6B378439abEdA9f253",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000041c919d87382c9c14a3a1f6b378439abeda9f253",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2c1200bb892f4b80993f10e98d2b851de6ca448b8fe8ccb8f71eae9b280a8966"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2608966,
        "transactionHash": "0x7c961585d2bcb46811bd479f1a3aa94c9430fc6661e273e4295de3a55588c791",
        "address": "0x41c919D87382c9C14A3A1f6B378439abEdA9f253",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x00000000000000000000000041c919d87382c9c14a3a1f6b378439abeda9f253",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x2c1200bb892f4b80993f10e98d2b851de6ca448b8fe8ccb8f71eae9b280a8966"
      }
    ],
    "blockNumber": 2608966,
    "cumulativeGasUsed": "5582862",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x472cf77ec6fe955f0E9bB3B2aa2Ff162ae563218",
    "0x7b7c000000000000000000000000000000000000",
    "0xbB59f486135145aD247B82F9cdF52bE4a58A0B81"
  ],
  "numDeployments": 1,
  "solcInputHash": "6e51939a73557ccc85605868276db4eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btc\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyVoted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721ReceiverRejectedTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721TransferToNonERC721ReceiverImplementer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidManagedNFTId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationNotInFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockDurationTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoLockFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonExistentToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDistributor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEmergencyCouncilOrGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLockedNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManagedNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotManagedOrNormalNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNormalNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTeam\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotVoter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnershipChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermanentLock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeCastOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeCastUnderflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitNoOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SplitNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyTokenIDs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockedManagedReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_freeManagedReward\",\"type\":\"address\"}],\"name\":\"CreateManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"fromDelegate\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"toDelegate\",\"type\":\"uint256\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IVotingEscrow.DepositType\",\"name\":\"depositType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"DepositManaged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"LockPermanent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountTo\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountFinal\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"Merge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_allowedManager\",\"type\":\"address\"}],\"name\":\"SetAllowedManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_splitAmount1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_splitAmount2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"Split\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"UnlockPermanent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ts\",\"type\":\"uint256\"}],\"name\":\"WithdrawManaged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowedManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"artProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOfNFTAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canSplit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"_index\",\"type\":\"uint48\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"delegatedBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatee\",\"type\":\"uint256\"}],\"internalType\":\"struct IVotingEscrow.Checkpoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createLockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"createManagedLockFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deactivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatee\",\"type\":\"uint256\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delegatee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delegator\",\"type\":\"uint256\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"}],\"name\":\"depositManaged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"escrowType\",\"outputs\":[{\"internalType\":\"enum IVotingEscrow.EscrowType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToManaged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDuration\",\"type\":\"uint256\"}],\"name\":\"increaseUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"lockPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"locked\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPermanent\",\"type\":\"bool\"}],\"internalType\":\"struct IVotingEscrow.LockedBalance\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managedToFree\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managedToLocked\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"merge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ownerToNFTokenIdList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permanentLockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loc\",\"type\":\"uint256\"}],\"name\":\"pointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanentLockBalance\",\"type\":\"uint256\"}],\"internalType\":\"struct IVotingEscrow.GlobalPoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_allowedManager\",\"type\":\"address\"}],\"name\":\"setAllowedManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"setArtProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mTokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setManagedState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"setTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setVoterAndDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slopeChanges\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"split\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId2\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"toggleSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"unlockPermanent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPointEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loc\",\"type\":\"uint256\"}],\"name\":\"userPointHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"permanent\",\"type\":\"uint256\"}],\"internalType\":\"struct IVotingEscrow.UserPoint\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_voted\",\"type\":\"bool\"}],\"name\":\"voting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawManaged\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"DelegateChanged(address,uint256,uint256)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Description of the clock\"},\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"balanceOfNFT(uint256)\":{\"details\":\"Returns 0 if called in the same block as a transfer.\",\"params\":{\"_tokenId\":\".\"},\"returns\":{\"_0\":\"Voting power\"}},\"balanceOfNFTAt(uint256,uint256)\":{\"params\":{\"_t\":\"Timestamp to query voting power\",\"_tokenId\":\".\"},\"returns\":{\"_0\":\"Voting power\"}},\"checkpoints(uint256,uint48)\":{\"params\":{\"index\":\".\",\"tokenId\":\".\"},\"returns\":{\"_0\":\"Checkpoint\"}},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\"},\"createLock(uint256,uint256)\":{\"params\":{\"_lockDuration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_value\":\"Amount to deposit\"},\"returns\":{\"_0\":\"TokenId of created veNFT\"}},\"createLockFor(uint256,uint256,address)\":{\"params\":{\"_lockDuration\":\"Number of seconds to lock tokens for (rounded down to nearest week)\",\"_to\":\"Address to deposit\",\"_value\":\"Amount to deposit\"},\"returns\":{\"_0\":\"TokenId of created veNFT\"}},\"createManagedLockFor(address)\":{\"details\":\"Throws if address already owns a managed NFT.\",\"returns\":{\"_mTokenId\":\"managed token id.\"}},\"delegate(uint256,uint256)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from `delegator` to `delegatee`. Signer must own `delegator`.\"},\"delegates(uint256)\":{\"details\":\"Returns the delegate that `tokenId` has chosen. Can never be equal to the delegator's `tokenId`.      Returns 0 if not delegated.\"},\"depositFor(uint256,uint256)\":{\"details\":\"Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user\",\"params\":{\"_tokenId\":\"lock NFT\",\"_value\":\"Amount to add to user's lock\"}},\"depositManaged(uint256,uint256)\":{\"details\":\"Managed nft will remain max-locked as long as there is at least one      deposit or withdrawal per week.      Throws if deposit nft is managed.      Throws if recipient nft is not managed.      Throws if deposit nft is already locked.      Throws if not called by voter.\",\"params\":{\"_mTokenId\":\"tokenId of managed NFT that will receive the deposit\",\"_tokenId\":\"tokenId of NFT being deposited\"}},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote.\"},\"getPastVotes(address,uint256,uint256)\":{\"details\":\"Returns the amount of votes that `tokenId` had at a specific moment in the past.      If the account passed in is not the owner, returns 0.\"},\"increaseAmount(uint256,uint256)\":{\"params\":{\"_value\":\"Amount of tokens to deposit and add to the lock\"}},\"increaseUnlockTime(uint256,uint256)\":{\"params\":{\"_lockDuration\":\"New number of seconds until tokens unlock\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"isApprovedOrOwner(address,uint256)\":{\"params\":{\"_spender\":\".\",\"_tokenId\":\".\"}},\"lockPermanent(uint256)\":{\"details\":\"Only callable by unlocked normal veNFTs.\",\"params\":{\"_tokenId\":\"tokenId to lock.\"}},\"locked(uint256)\":{\"params\":{\"_tokenId\":\".\"},\"returns\":{\"_0\":\"LockedBalance of _tokenId\"}},\"merge(uint256,uint256)\":{\"details\":\"Cannot merge `_from` locks that are permanent or have already voted this epoch.      Cannot merge `_to` locks that have already expired.      This will burn the veNFT. Any rebases or rewards that are unclaimed      will no longer be claimable. Claim all rebases and rewards prior to calling this.\",\"params\":{\"_from\":\"VeNFT to merge from.\",\"_to\":\"VeNFT to merge into.\"}},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"setManagedState(uint256,bool)\":{\"params\":{\"_mTokenId\":\"managed nft state to set\",\"_state\":\"true => inactive, false => active\"}},\"setVoterAndDistributor(address,address)\":{\"details\":\"This is only called once, at setup\"},\"split(uint256,uint256)\":{\"details\":\"This burns the tokenId of the target veNFT         Callable by approved or owner         If this is called by approved, approved will not have permissions to manipulate the newly created veNFTs         Returns the two new split veNFTs to owner         If `from` is permanent, will automatically dedelegate.         This will burn the veNFT. Any rebases or rewards that are unclaimed         will no longer be claimable. Claim all rebases and rewards prior to calling this.\",\"params\":{\"_amount\":\"Amount to split from veNFT.\",\"_from\":\"VeNFT to split.\"},\"returns\":{\"_tokenId1\":\"Return tokenId of veNFT with oldLocked.amount - `_amount`.\",\"_tokenId2\":\"Return tokenId of veNFT with `_amount`.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"toggleSplit(address,bool)\":{\"details\":\"Toggle split for address(0) to enable or disable for all.\",\"params\":{\"_account\":\"Address to toggle split permissions\",\"_bool\":\"True to allow, false to disallow\"}},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"totalSupply()\":{\"returns\":{\"_0\":\"Total voting power at current timestamp\"}},\"totalSupplyAt(uint256)\":{\"params\":{\"_t\":\"Timestamp to query total voting power\"},\"returns\":{\"_0\":\"Total voting power at given timestamp\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"},\"unlockPermanent(uint256)\":{\"details\":\"Only callable by permanently locked veNFTs.      Cannot unlock if already voted this epoch.\",\"params\":{\"_tokenId\":\"tokenId to unlock.\"}},\"voting(uint256,bool)\":{\"details\":\"Only callable by voter\",\"params\":{\"_tokenId\":\".\",\"_voted\":\".\"}},\"withdraw(uint256)\":{\"details\":\"Only possible if the lock is both expired and not permanent      This will burn the veNFT. Any rebases or rewards that are unclaimed      will no longer be claimable. Claim all rebases and rewards prior to calling this.\"},\"withdrawManaged(uint256)\":{\"details\":\"Throws if NFT not locked.      Throws if not called by voter.\",\"params\":{\"_tokenId\":\"tokenId of NFT being deposited.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"artProxy()\":{\"notice\":\"Address of art proxy used for on-chain art generation\"},\"balanceOfNFT(uint256)\":{\"notice\":\"Get the voting power for _tokenId at the current timestamp\"},\"balanceOfNFTAt(uint256,uint256)\":{\"notice\":\"Get the voting power for _tokenId at a given timestamp\"},\"canSplit(address)\":{\"notice\":\"account -> can split\"},\"checkpoint()\":{\"notice\":\"Record global data to checkpoint\"},\"checkpoints(uint256,uint48)\":{\"notice\":\"A record of delegated token checkpoints for each account, by index\"},\"createLock(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\"},\"createLockFor(uint256,uint256,address)\":{\"notice\":\"Deposit `_value` tokens for `_to` and lock for `_lockDuration`\"},\"createManagedLockFor(address)\":{\"notice\":\"Create managed NFT (a permanent lock) for use within ecosystem.\"},\"depositFor(uint256,uint256)\":{\"notice\":\"Deposit `_value` tokens for `_tokenId` and add to the lock\"},\"depositManaged(uint256,uint256)\":{\"notice\":\"Delegates balance to managed nft         Note that NFTs deposited into a managed NFT will be re-locked         to the maximum lock time on withdrawal.         Permanent locks that are deposited will automatically unlock.\"},\"distributor()\":{\"notice\":\"Address of RewardsDistributor.sol\"},\"epoch()\":{\"notice\":\"Total count of epochs witnessed since contract creation\"},\"factoryRegistry()\":{\"notice\":\"Address of FactoryRegistry.sol\"},\"forwarder()\":{\"notice\":\"Address of Meta-tx Forwarder\"},\"increaseAmount(uint256,uint256)\":{\"notice\":\"Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\"},\"increaseUnlockTime(uint256,uint256)\":{\"notice\":\"Extend the unlock time for `_tokenId`         Cannot extend lock time of permanent locks\"},\"isApprovedOrOwner(address,uint256)\":{\"notice\":\"Check whether spender is owner or an approved user for a given veNFT\"},\"lockPermanent(uint256)\":{\"notice\":\"Permanently lock a veNFT. Voting power will be equal to         `LockedBalance.amount` with no decay. Required to delegate.\"},\"locked(uint256)\":{\"notice\":\"Get the LockedBalance (amount, end) of a _tokenId\"},\"merge(uint256,uint256)\":{\"notice\":\"Merges `_from` into `_to`.\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(uint256)\":{\"notice\":\"The number of checkpoints for each tokenId\"},\"permanentLockBalance()\":{\"notice\":\"Aggregate permanent locked balances\"},\"pointHistory(uint256)\":{\"notice\":\"Global point history at a given index\"},\"setAllowedManager(address)\":{\"notice\":\"Permit one address to call createManagedLockFor() that is not Voter.governor()\"},\"setManagedState(uint256,bool)\":{\"notice\":\"Set Managed NFT state. Inactive NFTs cannot be deposited into.\"},\"setVoterAndDistributor(address,address)\":{\"notice\":\"Set the global state voter and distributor\"},\"slopeChanges(uint256)\":{\"notice\":\"time -> signed slope change\"},\"split(uint256,uint256)\":{\"notice\":\"Splits veNFT into two new veNFTS - one with oldLocked.amount - `_amount`, and the second with `_amount`\"},\"supply()\":{\"notice\":\"Total amount of token() deposited\"},\"team()\":{\"notice\":\"Address of Protocol Team multisig\"},\"toggleSplit(address,bool)\":{\"notice\":\"Toggle split for a specific address.\"},\"token()\":{\"notice\":\"Address of token used to create a veNFT\"},\"totalSupply()\":{\"notice\":\"Calculate total voting power at current timestamp\"},\"totalSupplyAt(uint256)\":{\"notice\":\"Calculate total voting power at a given timestamp\"},\"unlockPermanent(uint256)\":{\"notice\":\"Unlock a permanently locked veNFT. Voting power will decay.         Will automatically dedelegate if delegated.\"},\"userPointHistory(uint256,uint256)\":{\"notice\":\"User -> UserPoint[userEpoch]\"},\"voted(uint256)\":{\"notice\":\"See if a queried _tokenId has actively voted\"},\"voter()\":{\"notice\":\"Address of Voter.sol\"},\"voting(uint256,bool)\":{\"notice\":\"Set `voted` for _tokenId to true or false\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw all tokens for `_tokenId`\"},\"withdrawManaged(uint256)\":{\"notice\":\"Retrieves locked rewards and withdraws balance from managed nft.         Note that the NFT withdrawn is re-locked to the maximum lock time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VeBTC.sol\":\"VeBTC\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/VeBTC.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.24;\\n\\nimport {VotingEscrow} from \\\"./VotingEscrow.sol\\\";\\n\\ncontract VeBTC is VotingEscrow {\\n    constructor(\\n        address _forwarder,\\n        address _btc,\\n        address _factoryRegistry\\n    ) VotingEscrow(_forwarder, _btc, _factoryRegistry) {}\\n\\n    function name() external pure returns (string memory) {\\n        return \\\"veBTC\\\";\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return \\\"veBTC\\\";\\n    }\\n\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return 18;\\n    }\\n}\\n\",\"keccak256\":\"0x01fddc039bf801d00287925c37f43562d649505fe83c1791573542cd348caf56\",\"license\":\"GPL-3.0-or-later\"},\"contracts/VotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.24;\\n\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IVeArtProxy} from \\\"./interfaces/IVeArtProxy.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IVoter} from \\\"./interfaces/IVoter.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IReward} from \\\"./interfaces/IReward.sol\\\";\\nimport {IFactoryRegistry} from \\\"./interfaces/factories/IFactoryRegistry.sol\\\";\\nimport {IManagedRewardsFactory} from \\\"./interfaces/factories/IManagedRewardsFactory.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {DelegationLogicLibrary} from \\\"./libraries/DelegationLogicLibrary.sol\\\";\\nimport {BalanceLogicLibrary} from \\\"./libraries/BalanceLogicLibrary.sol\\\";\\nimport {SafeCastLibrary} from \\\"./libraries/SafeCastLibrary.sol\\\";\\n\\n/// @title Voting Escrow\\n/// @notice veNFT implementation that escrows ERC-20 tokens in the form of an ERC-721 NFT\\n/// @notice Votes have a weight depending on time, so that users are committed to the future of (whatever they are voting for)\\n/// @author Modified from Solidly (https://github.com/solidlyexchange/solidly/blob/master/contracts/ve.sol)\\n/// @author Modified from Curve (https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/VotingEscrow.vy)\\n/// @author velodrome.finance, @figs999, @pegahcarter\\n/// @dev Vote weight decays linearly over time. Lock time cannot be more than `MAXTIME` (4 years).\\nabstract contract VotingEscrow is\\n    IVotingEscrow,\\n    ERC2771Context,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeCastLibrary for uint256;\\n    using SafeCastLibrary for int128;\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    address public immutable forwarder;\\n    /// @inheritdoc IVotingEscrow\\n    address public immutable factoryRegistry;\\n    /// @inheritdoc IVotingEscrow\\n    address public immutable token;\\n    /// @inheritdoc IVotingEscrow\\n    address public distributor;\\n    /// @inheritdoc IVotingEscrow\\n    address public voter;\\n    /// @inheritdoc IVotingEscrow\\n    address public team;\\n    /// @inheritdoc IVotingEscrow\\n    address public artProxy;\\n    /// @inheritdoc IVotingEscrow\\n    address public allowedManager;\\n\\n    mapping(uint256 => GlobalPoint) internal _pointHistory; // epoch -> unsigned global point\\n\\n    /// @dev Mapping of interface id to bool about whether or not it's supported\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\n\\n    /// @dev ERC165 interface ID of ERC165\\n    bytes4 internal constant ERC165_INTERFACE_ID = 0x01ffc9a7;\\n\\n    /// @dev ERC165 interface ID of ERC721\\n    bytes4 internal constant ERC721_INTERFACE_ID = 0x80ac58cd;\\n\\n    /// @dev ERC165 interface ID of ERC721Metadata\\n    bytes4 internal constant ERC721_METADATA_INTERFACE_ID = 0x5b5e139f;\\n\\n    /// @dev ERC165 interface ID of ERC4906\\n    bytes4 internal constant ERC4906_INTERFACE_ID = 0x49064906;\\n\\n    /// @dev ERC165 interface ID of ERC6372\\n    bytes4 internal constant ERC6372_INTERFACE_ID = 0xda287a1d;\\n\\n    /// @inheritdoc IVotingEscrow\\n    uint256 public tokenId;\\n\\n    /// @param _forwarder address of trusted forwarder\\n    /// @param _token token address\\n    /// @param _factoryRegistry Factory Registry address\\n    constructor(\\n        address _forwarder,\\n        address _token,\\n        address _factoryRegistry\\n    ) ERC2771Context(_forwarder) {\\n        forwarder = _forwarder;\\n        token = _token;\\n        factoryRegistry = _factoryRegistry;\\n        team = _msgSender();\\n        voter = _msgSender();\\n\\n        _pointHistory[0].blk = block.number;\\n        _pointHistory[0].ts = block.timestamp;\\n\\n        supportedInterfaces[ERC165_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC721_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC721_METADATA_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC4906_INTERFACE_ID] = true;\\n        supportedInterfaces[ERC6372_INTERFACE_ID] = true;\\n\\n        // mint-ish\\n        emit Transfer(address(0), address(this), tokenId);\\n        // burn-ish\\n        emit Transfer(address(this), address(0), tokenId);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => EscrowType) public escrowType;\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => uint256) public idToManaged;\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => mapping(uint256 => uint256)) public weights;\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => bool) public deactivated;\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => address) public managedToLocked;\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => address) public managedToFree;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    function createManagedLockFor(\\n        address _to\\n    ) external nonReentrant returns (uint256 _mTokenId) {\\n        address sender = _msgSender();\\n        if (sender != allowedManager && sender != IVoter(voter).governor())\\n            revert NotGovernorOrManager();\\n\\n        _mTokenId = ++tokenId;\\n        _mint(_to, _mTokenId);\\n        _depositFor(\\n            _mTokenId,\\n            0,\\n            0,\\n            LockedBalance(0, 0, true),\\n            DepositType.CREATE_LOCK_TYPE\\n        );\\n\\n        escrowType[_mTokenId] = EscrowType.MANAGED;\\n\\n        (\\n            address _lockedManagedReward,\\n            address _freeManagedReward\\n        ) = IManagedRewardsFactory(\\n                IFactoryRegistry(factoryRegistry).managedRewardsFactory()\\n            ).createRewards(forwarder, voter);\\n        managedToLocked[_mTokenId] = _lockedManagedReward;\\n        managedToFree[_mTokenId] = _freeManagedReward;\\n\\n        emit CreateManaged(\\n            _to,\\n            _mTokenId,\\n            sender,\\n            _lockedManagedReward,\\n            _freeManagedReward\\n        );\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function depositManaged(\\n        uint256 _tokenId,\\n        uint256 _mTokenId\\n    ) external nonReentrant {\\n        if (_msgSender() != voter) revert NotVoter();\\n        if (escrowType[_mTokenId] != EscrowType.MANAGED) revert NotManagedNFT();\\n        if (escrowType[_tokenId] != EscrowType.NORMAL) revert NotNormalNFT();\\n        if (_balanceOfNFTAt(_tokenId, block.timestamp) == 0)\\n            revert ZeroBalance();\\n\\n        // adjust user nft\\n        int128 _amount = _locked[_tokenId].amount;\\n        if (_locked[_tokenId].isPermanent) {\\n            permanentLockBalance -= _amount.toUint256();\\n            _delegate(_tokenId, 0);\\n        }\\n        _checkpoint(_tokenId, _locked[_tokenId], LockedBalance(0, 0, false));\\n        _locked[_tokenId] = LockedBalance(0, 0, false);\\n\\n        // adjust managed nft\\n        uint256 _weight = _amount.toUint256();\\n        permanentLockBalance += _weight;\\n        LockedBalance memory newLocked = _locked[_mTokenId];\\n        newLocked.amount += _amount;\\n        _checkpointDelegatee(_delegates[_mTokenId], _weight, true);\\n        _checkpoint(_mTokenId, _locked[_mTokenId], newLocked);\\n        _locked[_mTokenId] = newLocked;\\n\\n        weights[_tokenId][_mTokenId] = _weight;\\n        idToManaged[_tokenId] = _mTokenId;\\n        escrowType[_tokenId] = EscrowType.LOCKED;\\n\\n        address _lockedManagedReward = managedToLocked[_mTokenId];\\n        IReward(_lockedManagedReward)._deposit(_weight, _tokenId);\\n        address _freeManagedReward = managedToFree[_mTokenId];\\n        IReward(_freeManagedReward)._deposit(_weight, _tokenId);\\n\\n        emit DepositManaged(\\n            _ownerOf(_tokenId),\\n            _tokenId,\\n            _mTokenId,\\n            _weight,\\n            block.timestamp\\n        );\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function withdrawManaged(uint256 _tokenId) external nonReentrant {\\n        uint256 _mTokenId = idToManaged[_tokenId];\\n        if (_msgSender() != voter) revert NotVoter();\\n        if (_mTokenId == 0) revert InvalidManagedNFTId();\\n        if (escrowType[_tokenId] != EscrowType.LOCKED) revert NotLockedNFT();\\n\\n        // update accrued rewards\\n        address _lockedManagedReward = managedToLocked[_mTokenId];\\n        address _freeManagedReward = managedToFree[_mTokenId];\\n        uint256 _weight = weights[_tokenId][_mTokenId];\\n        uint256 _reward = IReward(_lockedManagedReward).earned(\\n            address(token),\\n            _tokenId\\n        );\\n        uint256 _total = _weight + _reward;\\n        uint256 _unlockTime = ((block.timestamp + MAXTIME) / WEEK) * WEEK;\\n\\n        // claim locked rewards (rebases + compounded reward)\\n        address[] memory rewards = new address[](1);\\n        rewards[0] = address(token);\\n        IReward(_lockedManagedReward).getReward(_tokenId, rewards);\\n\\n        // adjust user nft\\n        LockedBalance memory newLockedNormal = LockedBalance(\\n            _total.toInt128(),\\n            _unlockTime,\\n            false\\n        );\\n        _checkpoint(_tokenId, _locked[_tokenId], newLockedNormal);\\n        _locked[_tokenId] = newLockedNormal;\\n\\n        // adjust managed nft\\n        LockedBalance memory newLockedManaged = _locked[_mTokenId];\\n        // do not expect _total > locked.amount / permanentLockBalance but just in case\\n        newLockedManaged.amount -= (\\n            _total.toInt128() < newLockedManaged.amount\\n                ? _total.toInt128()\\n                : newLockedManaged.amount\\n        );\\n        permanentLockBalance -= (\\n            _total < permanentLockBalance ? _total : permanentLockBalance\\n        );\\n        _checkpointDelegatee(_delegates[_mTokenId], _total, false);\\n        _checkpoint(_mTokenId, _locked[_mTokenId], newLockedManaged);\\n        _locked[_mTokenId] = newLockedManaged;\\n\\n        IReward(_lockedManagedReward)._withdraw(_weight, _tokenId);\\n        IReward(_freeManagedReward)._withdraw(_weight, _tokenId);\\n\\n        delete idToManaged[_tokenId];\\n        delete weights[_tokenId][_mTokenId];\\n        delete escrowType[_tokenId];\\n\\n        emit WithdrawManaged(\\n            _ownerOf(_tokenId),\\n            _tokenId,\\n            _mTokenId,\\n            _total,\\n            block.timestamp\\n        );\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function setAllowedManager(address _allowedManager) external {\\n        if (_msgSender() != IVoter(voter).governor()) revert NotGovernor();\\n        if (_allowedManager == allowedManager) revert SameAddress();\\n        if (_allowedManager == address(0)) revert ZeroAddress();\\n        allowedManager = _allowedManager;\\n        emit SetAllowedManager(_allowedManager);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function setManagedState(uint256 _mTokenId, bool _state) external {\\n        if (\\n            _msgSender() != IVoter(voter).emergencyCouncil() &&\\n            _msgSender() != IVoter(voter).governor()\\n        ) revert NotEmergencyCouncilOrGovernor();\\n        if (escrowType[_mTokenId] != EscrowType.MANAGED) revert NotManagedNFT();\\n        if (deactivated[_mTokenId] == _state) revert SameState();\\n        deactivated[_mTokenId] = _state;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setTeam(address _team) external {\\n        if (_msgSender() != team) revert NotTeam();\\n        if (_team == address(0)) revert ZeroAddress();\\n        team = _team;\\n    }\\n\\n    function setArtProxy(address _proxy) external {\\n        if (_msgSender() != team) revert NotTeam();\\n        artProxy = _proxy;\\n        emit BatchMetadataUpdate(0, type(uint256).max);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function tokenURI(uint256 _tokenId) external view returns (string memory) {\\n        if (_ownerOf(_tokenId) == address(0)) revert NonExistentToken();\\n        return IVeArtProxy(artProxy).tokenURI(_tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from NFT ID to the address that owns it.\\n    mapping(uint256 => address) internal idToOwner;\\n\\n    /// @dev Mapping from owner address to count of his tokens.\\n    mapping(address => uint256) internal ownerToNFTokenCount;\\n\\n    function _ownerOf(uint256 _tokenId) internal view returns (address) {\\n        return idToOwner[_tokenId];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function ownerOf(uint256 _tokenId) external view returns (address) {\\n        return _ownerOf(_tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function balanceOf(address _owner) external view returns (uint256) {\\n        return ownerToNFTokenCount[_owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from NFT ID to approved address.\\n    mapping(uint256 => address) internal idToApprovals;\\n\\n    /// @dev Mapping from owner address to mapping of operator addresses.\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    mapping(uint256 => uint256) internal ownershipChange;\\n\\n    /// @inheritdoc IVotingEscrow\\n    function getApproved(uint256 _tokenId) external view returns (address) {\\n        return idToApprovals[_tokenId];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function isApprovedForAll(\\n        address _owner,\\n        address _operator\\n    ) external view returns (bool) {\\n        return (ownerToOperators[_owner])[_operator];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function isApprovedOrOwner(\\n        address _spender,\\n        uint256 _tokenId\\n    ) external view returns (bool) {\\n        return _isApprovedOrOwner(_spender, _tokenId);\\n    }\\n\\n    function _isApprovedOrOwner(\\n        address _spender,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        address owner = _ownerOf(_tokenId);\\n        bool spenderIsOwner = owner == _spender;\\n        bool spenderIsApproved = _spender == idToApprovals[_tokenId];\\n        bool spenderIsApprovedForAll = (ownerToOperators[owner])[_spender];\\n        return spenderIsOwner || spenderIsApproved || spenderIsApprovedForAll;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    function approve(address _approved, uint256 _tokenId) external {\\n        address sender = _msgSender();\\n        address owner = _ownerOf(_tokenId);\\n        // Throws if `_tokenId` is not a valid NFT\\n        if (owner == address(0)) revert ZeroAddress();\\n        // Throws if `_approved` is the current owner\\n        if (owner == _approved) revert SameAddress();\\n        // Check requirements\\n        bool senderIsOwner = (_ownerOf(_tokenId) == sender);\\n        bool senderIsApprovedForAll = (ownerToOperators[owner])[sender];\\n        if (!senderIsOwner && !senderIsApprovedForAll)\\n            revert NotApprovedOrOwner();\\n        // Set the approval\\n        idToApprovals[_tokenId] = _approved;\\n        emit Approval(owner, _approved, _tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function setApprovalForAll(address _operator, bool _approved) external {\\n        address sender = _msgSender();\\n        // Throws if `_operator` is the `msg.sender`\\n        if (_operator == sender) revert SameAddress();\\n        ownerToOperators[sender][_operator] = _approved;\\n        emit ApprovalForAll(sender, _operator, _approved);\\n    }\\n\\n    /* TRANSFER FUNCTIONS */\\n\\n    function _transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        address _sender\\n    ) internal {\\n        if (escrowType[_tokenId] == EscrowType.LOCKED)\\n            revert NotManagedOrNormalNFT();\\n        // Check requirements\\n        if (!_isApprovedOrOwner(_sender, _tokenId)) revert NotApprovedOrOwner();\\n        // Clear approval. Throws if `_from` is not the current owner\\n        if (_ownerOf(_tokenId) != _from) revert NotOwner();\\n        delete idToApprovals[_tokenId];\\n        // Remove NFT. Throws if `_tokenId` is not a valid NFT\\n        _removeTokenFrom(_from, _tokenId);\\n        // Update voting checkpoints\\n        _checkpointDelegator(_tokenId, 0, _to);\\n        // Add NFT\\n        _addTokenTo(_to, _tokenId);\\n        // Set the block of ownership transfer (for Flash NFT protection)\\n        ownershipChange[_tokenId] = block.number;\\n        // Log the transfer\\n        emit Transfer(_from, _to, _tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external {\\n        _transferFrom(_from, _to, _tokenId, _msgSender());\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId\\n    ) external {\\n        safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n    }\\n\\n    function _isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function safeTransferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _tokenId,\\n        bytes memory _data\\n    ) public {\\n        address sender = _msgSender();\\n        _transferFrom(_from, _to, _tokenId, sender);\\n\\n        if (_isContract(_to)) {\\n            // Throws if transfer destination is a contract which does not implement 'onERC721Received'\\n            try\\n                IERC721Receiver(_to).onERC721Received(\\n                    sender,\\n                    _from,\\n                    _tokenId,\\n                    _data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC721Receiver(_to).onERC721Received.selector\\n                ) {\\n                    revert ERC721ReceiverRejectedTokens();\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721TransferToNonERC721ReceiverImplementer();\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    function supportsInterface(\\n        bytes4 _interfaceID\\n    ) external view returns (bool) {\\n        return supportedInterfaces[_interfaceID];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(address => mapping(uint256 => uint256)) public ownerToNFTokenIdList;\\n\\n    /// @dev Mapping from NFT ID to index of owner\\n    mapping(uint256 => uint256) internal tokenToOwnerIndex;\\n\\n    /// @dev Add a NFT to an index mapping to a given address\\n    /// @param _to address of the receiver\\n    /// @param _tokenId uint ID Of the token to be added\\n    function _addTokenToOwnerList(address _to, uint256 _tokenId) internal {\\n        uint256 currentCount = ownerToNFTokenCount[_to];\\n\\n        ownerToNFTokenIdList[_to][currentCount] = _tokenId;\\n        tokenToOwnerIndex[_tokenId] = currentCount;\\n    }\\n\\n    /// @dev Add a NFT to a given address\\n    ///      Throws if `_tokenId` is owned by someone.\\n    function _addTokenTo(address _to, uint256 _tokenId) internal {\\n        // Throws if `_tokenId` is owned by someone\\n        assert(_ownerOf(_tokenId) == address(0));\\n        // Change the owner\\n        idToOwner[_tokenId] = _to;\\n        // Update owner token index tracking\\n        _addTokenToOwnerList(_to, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_to] += 1;\\n    }\\n\\n    /// @dev Function to mint tokens\\n    ///      Throws if `_to` is zero address.\\n    ///      Throws if `_tokenId` is owned by someone.\\n    /// @param _to The address that will receive the minted tokens.\\n    /// @param _tokenId The token id to mint.\\n    /// @return A boolean that indicates if the operation was successful.\\n    function _mint(address _to, uint256 _tokenId) internal returns (bool) {\\n        // Throws if `_to` is zero address\\n        assert(_to != address(0));\\n        // Add NFT. Throws if `_tokenId` is owned by someone\\n        _addTokenTo(_to, _tokenId);\\n        // Update voting checkpoints\\n        _checkpointDelegator(_tokenId, 0, _to);\\n        emit Transfer(address(0), _to, _tokenId);\\n        return true;\\n    }\\n\\n    /// @dev Remove a NFT from an index mapping to a given address\\n    /// @param _from address of the sender\\n    /// @param _tokenId uint ID Of the token to be removed\\n    function _removeTokenFromOwnerList(\\n        address _from,\\n        uint256 _tokenId\\n    ) internal {\\n        // Delete\\n        uint256 currentCount = ownerToNFTokenCount[_from] - 1;\\n        uint256 currentIndex = tokenToOwnerIndex[_tokenId];\\n\\n        if (currentCount == currentIndex) {\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][currentCount] = 0;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[_tokenId] = 0;\\n        } else {\\n            uint256 lastTokenId = ownerToNFTokenIdList[_from][currentCount];\\n\\n            // Add\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][currentIndex] = lastTokenId;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[lastTokenId] = currentIndex;\\n\\n            // Delete\\n            // update ownerToNFTokenIdList\\n            ownerToNFTokenIdList[_from][currentCount] = 0;\\n            // update tokenToOwnerIndex\\n            tokenToOwnerIndex[_tokenId] = 0;\\n        }\\n    }\\n\\n    /// @dev Remove a NFT from a given address\\n    ///      Throws if `_from` is not the current owner.\\n    function _removeTokenFrom(address _from, uint256 _tokenId) internal {\\n        // Throws if `_from` is not the current owner\\n        assert(_ownerOf(_tokenId) == _from);\\n        // Change the owner\\n        idToOwner[_tokenId] = address(0);\\n        // Update owner token index tracking\\n        _removeTokenFromOwnerList(_from, _tokenId);\\n        // Change count tracking\\n        ownerToNFTokenCount[_from] -= 1;\\n    }\\n\\n    /// @dev Must be called prior to updating `LockedBalance`\\n    function _burn(uint256 _tokenId) internal {\\n        address sender = _msgSender();\\n        if (!_isApprovedOrOwner(sender, _tokenId)) revert NotApprovedOrOwner();\\n        address owner = _ownerOf(_tokenId);\\n\\n        // Clear approval\\n        delete idToApprovals[_tokenId];\\n        // Update voting checkpoints\\n        _checkpointDelegator(_tokenId, 0, address(0));\\n        // Remove token\\n        _removeTokenFrom(owner, _tokenId);\\n        emit Transfer(owner, address(0), _tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ESCROW STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WEEK = 1 weeks;\\n    uint256 internal constant MAXTIME = 4 * 365 * 86400;\\n    int128 internal constant iMAXTIME = 4 * 365 * 86400;\\n    uint256 internal constant MULTIPLIER = 1 ether;\\n\\n    /// @inheritdoc IVotingEscrow\\n    uint256 public epoch;\\n    /// @inheritdoc IVotingEscrow\\n    uint256 public supply;\\n\\n    mapping(uint256 => LockedBalance) internal _locked;\\n    mapping(uint256 => UserPoint[1000000000]) internal _userPointHistory;\\n    mapping(uint256 => uint256) public userPointEpoch;\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => int128) public slopeChanges;\\n    /// @inheritdoc IVotingEscrow\\n    mapping(address => bool) public canSplit;\\n    /// @inheritdoc IVotingEscrow\\n    uint256 public permanentLockBalance;\\n\\n    /// @inheritdoc IVotingEscrow\\n    function locked(\\n        uint256 _tokenId\\n    ) external view returns (LockedBalance memory) {\\n        return _locked[_tokenId];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function userPointHistory(\\n        uint256 _tokenId,\\n        uint256 _loc\\n    ) external view returns (UserPoint memory) {\\n        return _userPointHistory[_tokenId][_loc];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function pointHistory(\\n        uint256 _loc\\n    ) external view returns (GlobalPoint memory) {\\n        return _pointHistory[_loc];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ESCROW LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Record global and per-user data to checkpoints. Used by VotingEscrow system.\\n    /// @param _tokenId NFT token ID. No user checkpoint if 0\\n    /// @param _oldLocked Pevious locked amount / end lock time for the user\\n    /// @param _newLocked New locked amount / end lock time for the user\\n    function _checkpoint(\\n        uint256 _tokenId,\\n        LockedBalance memory _oldLocked,\\n        LockedBalance memory _newLocked\\n    ) internal {\\n        UserPoint memory uOld;\\n        UserPoint memory uNew;\\n        int128 oldDslope = 0;\\n        int128 newDslope = 0;\\n        uint256 _epoch = epoch;\\n\\n        if (_tokenId != 0) {\\n            uNew.permanent = _newLocked.isPermanent\\n                ? _newLocked.amount.toUint256()\\n                : 0;\\n            // Calculate slopes and biases\\n            // Kept at zero when they have to\\n            if (_oldLocked.end > block.timestamp && _oldLocked.amount > 0) {\\n                uOld.slope = _oldLocked.amount / iMAXTIME;\\n                uOld.bias =\\n                    uOld.slope *\\n                    (_oldLocked.end - block.timestamp).toInt128();\\n            }\\n            if (_newLocked.end > block.timestamp && _newLocked.amount > 0) {\\n                uNew.slope = _newLocked.amount / iMAXTIME;\\n                uNew.bias =\\n                    uNew.slope *\\n                    (_newLocked.end - block.timestamp).toInt128();\\n            }\\n\\n            // Read values of scheduled changes in the slope\\n            // _oldLocked.end can be in the past and in the future\\n            // _newLocked.end can ONLY by in the FUTURE unless everything expired: than zeros\\n            oldDslope = slopeChanges[_oldLocked.end];\\n            if (_newLocked.end != 0) {\\n                if (_newLocked.end == _oldLocked.end) {\\n                    newDslope = oldDslope;\\n                } else {\\n                    newDslope = slopeChanges[_newLocked.end];\\n                }\\n            }\\n        }\\n\\n        GlobalPoint memory lastPoint = GlobalPoint({\\n            bias: 0,\\n            slope: 0,\\n            ts: block.timestamp,\\n            blk: block.number,\\n            permanentLockBalance: 0\\n        });\\n        if (_epoch > 0) {\\n            lastPoint = _pointHistory[_epoch];\\n        }\\n        uint256 lastCheckpoint = lastPoint.ts;\\n        // initialLastPoint is used for extrapolation to calculate block number\\n        // (approximately, for *At methods) and save them\\n        // as we cannot figure that out exactly from inside the contract\\n        GlobalPoint memory initialLastPoint = GlobalPoint({\\n            bias: lastPoint.bias,\\n            slope: lastPoint.slope,\\n            ts: lastPoint.ts,\\n            blk: lastPoint.blk,\\n            permanentLockBalance: lastPoint.permanentLockBalance\\n        });\\n        uint256 blockSlope = 0; // dblock/dt\\n        if (block.timestamp > lastPoint.ts) {\\n            blockSlope =\\n                (MULTIPLIER * (block.number - lastPoint.blk)) /\\n                (block.timestamp - lastPoint.ts);\\n        }\\n        // If last point is already recorded in this block, slope=0\\n        // But that's ok b/c we know the block in such case\\n\\n        // Go over weeks to fill history and calculate what the current point is\\n        {\\n            uint256 t_i = (lastCheckpoint / WEEK) * WEEK;\\n            for (uint256 i = 0; i < 255; ++i) {\\n                // Hopefully it won't happen that this won't get used in 5 years!\\n                // If it does, users will be able to withdraw but vote weight will be broken\\n                t_i += WEEK; // Initial value of t_i is always larger than the ts of the last point\\n                int128 d_slope = 0;\\n                if (t_i > block.timestamp) {\\n                    t_i = block.timestamp;\\n                } else {\\n                    d_slope = slopeChanges[t_i];\\n                }\\n                lastPoint.bias -=\\n                    lastPoint.slope *\\n                    (t_i - lastCheckpoint).toInt128();\\n                lastPoint.slope += d_slope;\\n                if (lastPoint.bias < 0) {\\n                    // This can happen\\n                    lastPoint.bias = 0;\\n                }\\n                if (lastPoint.slope < 0) {\\n                    // This cannot happen - just in case\\n                    lastPoint.slope = 0;\\n                }\\n                lastCheckpoint = t_i;\\n                lastPoint.ts = t_i;\\n                lastPoint.blk =\\n                    initialLastPoint.blk +\\n                    (blockSlope * (t_i - initialLastPoint.ts)) /\\n                    MULTIPLIER;\\n                _epoch += 1;\\n                if (t_i == block.timestamp) {\\n                    lastPoint.blk = block.number;\\n                    break;\\n                } else {\\n                    _pointHistory[_epoch] = lastPoint;\\n                }\\n            }\\n        }\\n\\n        if (_tokenId != 0) {\\n            // If last point was in this block, the slope change has been applied already\\n            // But in such case we have 0 slope(s)\\n            lastPoint.slope += (uNew.slope - uOld.slope);\\n            lastPoint.bias += (uNew.bias - uOld.bias);\\n            if (lastPoint.slope < 0) {\\n                lastPoint.slope = 0;\\n            }\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            lastPoint.permanentLockBalance = permanentLockBalance;\\n        }\\n\\n        // If timestamp of last global point is the same, overwrite the last global point\\n        // Else record the new global point into history\\n        // Exclude epoch 0 (note: _epoch is always >= 1, see above)\\n        // Two possible outcomes:\\n        // Missing global checkpoints in prior weeks. In this case, _epoch = epoch + x, where x > 1\\n        // No missing global checkpoints, but timestamp != block.timestamp. Create new checkpoint.\\n        // No missing global checkpoints, but timestamp == block.timestamp. Overwrite last checkpoint.\\n        if (_epoch != 1 && _pointHistory[_epoch - 1].ts == block.timestamp) {\\n            // _epoch = epoch + 1, so we do not increment epoch\\n            _pointHistory[_epoch - 1] = lastPoint;\\n        } else {\\n            // more than one global point may have been written, so we update epoch\\n            epoch = _epoch;\\n            _pointHistory[_epoch] = lastPoint;\\n        }\\n\\n        if (_tokenId != 0) {\\n            // Schedule the slope changes (slope is going down)\\n            // We subtract new_user_slope from [_newLocked.end]\\n            // and add old_user_slope to [_oldLocked.end]\\n            if (_oldLocked.end > block.timestamp) {\\n                // oldDslope was <something> - uOld.slope, so we cancel that\\n                oldDslope += uOld.slope;\\n                if (_newLocked.end == _oldLocked.end) {\\n                    oldDslope -= uNew.slope; // It was a new deposit, not extension\\n                }\\n                slopeChanges[_oldLocked.end] = oldDslope;\\n            }\\n\\n            if (_newLocked.end > block.timestamp) {\\n                // update slope if new lock is greater than old lock and is not permanent or if old lock is permanent\\n                if ((_newLocked.end > _oldLocked.end)) {\\n                    newDslope -= uNew.slope; // old slope disappeared at this point\\n                    slopeChanges[_newLocked.end] = newDslope;\\n                }\\n                // else: we recorded it already in oldDslope\\n            }\\n            // If timestamp of last user point is the same, overwrite the last user point\\n            // Else record the new user point into history\\n            // Exclude epoch 0\\n            uNew.ts = block.timestamp;\\n            uNew.blk = block.number;\\n            uint256 userEpoch = userPointEpoch[_tokenId];\\n            if (\\n                userEpoch != 0 &&\\n                _userPointHistory[_tokenId][userEpoch].ts == block.timestamp\\n            ) {\\n                _userPointHistory[_tokenId][userEpoch] = uNew;\\n            } else {\\n                userPointEpoch[_tokenId] = ++userEpoch;\\n                _userPointHistory[_tokenId][userEpoch] = uNew;\\n            }\\n        }\\n    }\\n\\n    /// @notice Deposit and lock tokens for a user\\n    /// @param _tokenId NFT that holds lock\\n    /// @param _value Amount to deposit\\n    /// @param _unlockTime New time when to unlock the tokens, or 0 if unchanged\\n    /// @param _oldLocked Previous locked amount / timestamp\\n    /// @param _depositType The type of deposit\\n    function _depositFor(\\n        uint256 _tokenId,\\n        uint256 _value,\\n        uint256 _unlockTime,\\n        LockedBalance memory _oldLocked,\\n        DepositType _depositType\\n    ) internal {\\n        uint256 supplyBefore = supply;\\n        supply = supplyBefore + _value;\\n\\n        // Set newLocked to _oldLocked without mangling memory\\n        LockedBalance memory newLocked;\\n        (newLocked.amount, newLocked.end, newLocked.isPermanent) = (\\n            _oldLocked.amount,\\n            _oldLocked.end,\\n            _oldLocked.isPermanent\\n        );\\n\\n        // Adding to existing lock, or if a lock is expired - creating a new one\\n        newLocked.amount += _value.toInt128();\\n        if (_unlockTime != 0) {\\n            newLocked.end = _unlockTime;\\n        }\\n        _locked[_tokenId] = newLocked;\\n\\n        // Possibilities:\\n        // Both _oldLocked.end could be current or expired (>/< block.timestamp)\\n        // or if the lock is a permanent lock, then _oldLocked.end == 0\\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\\n        // newLocked.end > block.timestamp (always)\\n        _checkpoint(_tokenId, _oldLocked, newLocked);\\n\\n        address from = _msgSender();\\n        if (_value != 0) {\\n            IERC20(token).safeTransferFrom(from, address(this), _value);\\n        }\\n\\n        emit Deposit(\\n            from,\\n            _tokenId,\\n            _depositType,\\n            _value,\\n            newLocked.end,\\n            block.timestamp\\n        );\\n        emit Supply(supplyBefore, supplyBefore + _value);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function checkpoint() external nonReentrant {\\n        _checkpoint(0, LockedBalance(0, 0, false), LockedBalance(0, 0, false));\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function depositFor(\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external nonReentrant {\\n        if (\\n            escrowType[_tokenId] == EscrowType.MANAGED &&\\n            _msgSender() != distributor\\n        ) revert NotDistributor();\\n        _increaseAmountFor(_tokenId, _value, DepositType.DEPOSIT_FOR_TYPE);\\n    }\\n\\n    /// @dev Deposit `_value` tokens for `_to` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    function _createLock(\\n        uint256 _value,\\n        uint256 _lockDuration,\\n        address _to\\n    ) internal returns (uint256) {\\n        uint256 unlockTime = ((block.timestamp + _lockDuration) / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        if (_value == 0) revert ZeroAmount();\\n        if (unlockTime <= block.timestamp) revert LockDurationNotInFuture();\\n        if (unlockTime > block.timestamp + MAXTIME)\\n            revert LockDurationTooLong();\\n\\n        uint256 _tokenId = ++tokenId;\\n        _mint(_to, _tokenId);\\n\\n        _depositFor(\\n            _tokenId,\\n            _value,\\n            unlockTime,\\n            _locked[_tokenId],\\n            DepositType.CREATE_LOCK_TYPE\\n        );\\n        return _tokenId;\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function createLock(\\n        uint256 _value,\\n        uint256 _lockDuration\\n    ) external nonReentrant returns (uint256) {\\n        return _createLock(_value, _lockDuration, _msgSender());\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function createLockFor(\\n        uint256 _value,\\n        uint256 _lockDuration,\\n        address _to\\n    ) external nonReentrant returns (uint256) {\\n        return _createLock(_value, _lockDuration, _to);\\n    }\\n\\n    function _increaseAmountFor(\\n        uint256 _tokenId,\\n        uint256 _value,\\n        DepositType _depositType\\n    ) internal {\\n        EscrowType _escrowType = escrowType[_tokenId];\\n        if (_escrowType == EscrowType.LOCKED) revert NotManagedOrNormalNFT();\\n\\n        LockedBalance memory oldLocked = _locked[_tokenId];\\n\\n        if (_value == 0) revert ZeroAmount();\\n        if (oldLocked.amount <= 0) revert NoLockFound();\\n        if (oldLocked.end <= block.timestamp && !oldLocked.isPermanent)\\n            revert LockExpired();\\n\\n        if (oldLocked.isPermanent) permanentLockBalance += _value;\\n        _checkpointDelegatee(_delegates[_tokenId], _value, true);\\n        _depositFor(_tokenId, _value, 0, oldLocked, _depositType);\\n\\n        if (_escrowType == EscrowType.MANAGED) {\\n            // increaseAmount called on managed tokens are treated as locked rewards\\n            address _lockedManagedReward = managedToLocked[_tokenId];\\n            address _token = token;\\n            IERC20(_token).safeApprove(_lockedManagedReward, _value);\\n            IReward(_lockedManagedReward).notifyRewardAmount(_token, _value);\\n            IERC20(_token).safeApprove(_lockedManagedReward, 0);\\n        }\\n\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function increaseAmount(\\n        uint256 _tokenId,\\n        uint256 _value\\n    ) external nonReentrant {\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId))\\n            revert NotApprovedOrOwner();\\n        _increaseAmountFor(_tokenId, _value, DepositType.INCREASE_LOCK_AMOUNT);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function increaseUnlockTime(\\n        uint256 _tokenId,\\n        uint256 _lockDuration\\n    ) external nonReentrant {\\n        if (!_isApprovedOrOwner(_msgSender(), _tokenId))\\n            revert NotApprovedOrOwner();\\n        if (escrowType[_tokenId] != EscrowType.NORMAL) revert NotNormalNFT();\\n\\n        LockedBalance memory oldLocked = _locked[_tokenId];\\n        if (oldLocked.isPermanent) revert PermanentLock();\\n        uint256 unlockTime = ((block.timestamp + _lockDuration) / WEEK) * WEEK; // Locktime is rounded down to weeks\\n\\n        if (oldLocked.end <= block.timestamp) revert LockExpired();\\n        if (oldLocked.amount <= 0) revert NoLockFound();\\n        if (unlockTime <= oldLocked.end) revert LockDurationNotInFuture();\\n        if (unlockTime > block.timestamp + MAXTIME)\\n            revert LockDurationTooLong();\\n\\n        _depositFor(\\n            _tokenId,\\n            0,\\n            unlockTime,\\n            oldLocked,\\n            DepositType.INCREASE_UNLOCK_TIME\\n        );\\n\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function withdraw(uint256 _tokenId) external nonReentrant {\\n        address sender = _msgSender();\\n        if (!_isApprovedOrOwner(sender, _tokenId)) revert NotApprovedOrOwner();\\n        if (voted[_tokenId]) revert AlreadyVoted();\\n        if (escrowType[_tokenId] != EscrowType.NORMAL) revert NotNormalNFT();\\n\\n        LockedBalance memory oldLocked = _locked[_tokenId];\\n        if (oldLocked.isPermanent) revert PermanentLock();\\n        if (block.timestamp < oldLocked.end) revert LockNotExpired();\\n        uint256 value = oldLocked.amount.toUint256();\\n\\n        // Burn the NFT\\n        _burn(_tokenId);\\n        _locked[_tokenId] = LockedBalance(0, 0, false);\\n        uint256 supplyBefore = supply;\\n        supply = supplyBefore - value;\\n\\n        // oldLocked can have either expired <= timestamp or zero end\\n        // oldLocked has only 0 end\\n        // Both can have >= 0 amount\\n        _checkpoint(_tokenId, oldLocked, LockedBalance(0, 0, false));\\n\\n        IERC20(token).safeTransfer(sender, value);\\n\\n        emit Withdraw(sender, _tokenId, value, block.timestamp);\\n        emit Supply(supplyBefore, supplyBefore - value);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function merge(uint256 _from, uint256 _to) external nonReentrant {\\n        address sender = _msgSender();\\n        if (voted[_from]) revert AlreadyVoted();\\n        if (escrowType[_from] != EscrowType.NORMAL) revert NotNormalNFT();\\n        if (escrowType[_to] != EscrowType.NORMAL) revert NotNormalNFT();\\n        if (_from == _to) revert SameNFT();\\n        if (!_isApprovedOrOwner(sender, _from)) revert NotApprovedOrOwner();\\n        if (!_isApprovedOrOwner(sender, _to)) revert NotApprovedOrOwner();\\n        LockedBalance memory oldLockedTo = _locked[_to];\\n        if (oldLockedTo.end <= block.timestamp && !oldLockedTo.isPermanent)\\n            revert LockExpired();\\n\\n        LockedBalance memory oldLockedFrom = _locked[_from];\\n        if (oldLockedFrom.isPermanent) revert PermanentLock();\\n        uint256 end = oldLockedFrom.end >= oldLockedTo.end\\n            ? oldLockedFrom.end\\n            : oldLockedTo.end;\\n\\n        _burn(_from);\\n        _locked[_from] = LockedBalance(0, 0, false);\\n        _checkpoint(_from, oldLockedFrom, LockedBalance(0, 0, false));\\n\\n        LockedBalance memory newLockedTo;\\n        newLockedTo.amount = oldLockedTo.amount + oldLockedFrom.amount;\\n        newLockedTo.isPermanent = oldLockedTo.isPermanent;\\n        if (newLockedTo.isPermanent) {\\n            permanentLockBalance += oldLockedFrom.amount.toUint256();\\n        } else {\\n            newLockedTo.end = end;\\n        }\\n        _checkpointDelegatee(\\n            _delegates[_to],\\n            oldLockedFrom.amount.toUint256(),\\n            true\\n        );\\n        _checkpoint(_to, oldLockedTo, newLockedTo);\\n        _locked[_to] = newLockedTo;\\n\\n        emit Merge(\\n            sender,\\n            _from,\\n            _to,\\n            oldLockedFrom.amount.toUint256(),\\n            oldLockedTo.amount.toUint256(),\\n            newLockedTo.amount.toUint256(),\\n            newLockedTo.end,\\n            block.timestamp\\n        );\\n        emit MetadataUpdate(_to);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function split(\\n        uint256 _from,\\n        uint256 _amount\\n    ) external nonReentrant returns (uint256 _tokenId1, uint256 _tokenId2) {\\n        address sender = _msgSender();\\n        address owner = _ownerOf(_from);\\n        if (owner == address(0)) revert SplitNoOwner();\\n        if (!canSplit[owner] && !canSplit[address(0)]) revert SplitNotAllowed();\\n        if (escrowType[_from] != EscrowType.NORMAL) revert NotNormalNFT();\\n        if (voted[_from]) revert AlreadyVoted();\\n        if (!_isApprovedOrOwner(sender, _from)) revert NotApprovedOrOwner();\\n        LockedBalance memory newLocked = _locked[_from];\\n        if (newLocked.end <= block.timestamp && !newLocked.isPermanent)\\n            revert LockExpired();\\n        int128 _splitAmount = _amount.toInt128();\\n        if (_splitAmount == 0) revert ZeroAmount();\\n        if (newLocked.amount <= _splitAmount) revert AmountTooBig();\\n\\n        // Zero out and burn old veNFT\\n        _burn(_from);\\n        _locked[_from] = LockedBalance(0, 0, false);\\n        _checkpoint(_from, newLocked, LockedBalance(0, 0, false));\\n\\n        // Create new veNFT using old balance - amount\\n        newLocked.amount -= _splitAmount;\\n        _tokenId1 = _createSplitNFT(owner, newLocked);\\n\\n        // Create new veNFT using amount\\n        newLocked.amount = _splitAmount;\\n        _tokenId2 = _createSplitNFT(owner, newLocked);\\n\\n        emit Split(\\n            _from,\\n            _tokenId1,\\n            _tokenId2,\\n            sender,\\n            _locked[_tokenId1].amount.toUint256(),\\n            _splitAmount.toUint256(),\\n            newLocked.end,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _createSplitNFT(\\n        address _to,\\n        LockedBalance memory _newLocked\\n    ) private returns (uint256 _tokenId) {\\n        _tokenId = ++tokenId;\\n        _locked[_tokenId] = _newLocked;\\n        _checkpoint(_tokenId, LockedBalance(0, 0, false), _newLocked);\\n        _mint(_to, _tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function toggleSplit(address _account, bool _bool) external {\\n        if (_msgSender() != team) revert NotTeam();\\n        canSplit[_account] = _bool;\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function lockPermanent(uint256 _tokenId) external {\\n        address sender = _msgSender();\\n        if (!_isApprovedOrOwner(sender, _tokenId)) revert NotApprovedOrOwner();\\n        if (escrowType[_tokenId] != EscrowType.NORMAL) revert NotNormalNFT();\\n        LockedBalance memory _newLocked = _locked[_tokenId];\\n        if (_newLocked.isPermanent) revert PermanentLock();\\n        if (_newLocked.end <= block.timestamp) revert LockExpired();\\n        if (_newLocked.amount <= 0) revert NoLockFound();\\n\\n        uint256 _amount = _newLocked.amount.toUint256();\\n        permanentLockBalance += _amount;\\n        _newLocked.end = 0;\\n        _newLocked.isPermanent = true;\\n        _checkpoint(_tokenId, _locked[_tokenId], _newLocked);\\n        _locked[_tokenId] = _newLocked;\\n\\n        emit LockPermanent(sender, _tokenId, _amount, block.timestamp);\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function unlockPermanent(uint256 _tokenId) external {\\n        address sender = _msgSender();\\n        if (!_isApprovedOrOwner(sender, _tokenId)) revert NotApprovedOrOwner();\\n        if (escrowType[_tokenId] != EscrowType.NORMAL) revert NotNormalNFT();\\n        if (voted[_tokenId]) revert AlreadyVoted();\\n        LockedBalance memory _newLocked = _locked[_tokenId];\\n        if (!_newLocked.isPermanent) revert NotPermanentLock();\\n\\n        uint256 _amount = _newLocked.amount.toUint256();\\n        permanentLockBalance -= _amount;\\n        _newLocked.end = ((block.timestamp + MAXTIME) / WEEK) * WEEK;\\n        _newLocked.isPermanent = false;\\n        _delegate(_tokenId, 0);\\n        _checkpoint(_tokenId, _locked[_tokenId], _newLocked);\\n        _locked[_tokenId] = _newLocked;\\n\\n        emit UnlockPermanent(sender, _tokenId, _amount, block.timestamp);\\n        emit MetadataUpdate(_tokenId);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           GAUGE VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _balanceOfNFTAt(\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) internal view returns (uint256) {\\n        return\\n            BalanceLogicLibrary.balanceOfNFTAt(\\n                userPointEpoch,\\n                _userPointHistory,\\n                _tokenId,\\n                _t\\n            );\\n    }\\n\\n    function _supplyAt(uint256 _timestamp) internal view returns (uint256) {\\n        return\\n            BalanceLogicLibrary.supplyAt(\\n                slopeChanges,\\n                _pointHistory,\\n                epoch,\\n                _timestamp\\n            );\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function balanceOfNFT(uint256 _tokenId) public view returns (uint256) {\\n        if (ownershipChange[_tokenId] == block.number) return 0;\\n        return _balanceOfNFTAt(_tokenId, block.timestamp);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function balanceOfNFTAt(\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) external view returns (uint256) {\\n        return _balanceOfNFTAt(_tokenId, _t);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function totalSupply() external view returns (uint256) {\\n        return _supplyAt(block.timestamp);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function totalSupplyAt(uint256 _timestamp) external view returns (uint256) {\\n        return _supplyAt(_timestamp);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            GAUGE VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => bool) public voted;\\n\\n    /// @inheritdoc IVotingEscrow\\n    function setVoterAndDistributor(\\n        address _voter,\\n        address _distributor\\n    ) external {\\n        if (_msgSender() != voter) revert NotVoter();\\n        voter = _voter;\\n        distributor = _distributor;\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function voting(uint256 _tokenId, bool _voted) external {\\n        if (_msgSender() != voter) revert NotVoter();\\n        voted[_tokenId] = _voted;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            DAO VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\n            \\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"\\n        );\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\n            \\\"Delegation(uint256 delegator,uint256 delegatee,uint256 nonce,uint256 expiry)\\\"\\n        );\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(uint256 => uint256) private _delegates;\\n\\n    /// @notice A record of delegated token checkpoints for each tokenId, by index\\n    mapping(uint256 => mapping(uint48 => Checkpoint)) private _checkpoints;\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(uint256 => uint48) public numCheckpoints;\\n\\n    /// @inheritdoc IVotingEscrow\\n    mapping(address => uint256) public nonces;\\n\\n    /// @inheritdoc IVotingEscrow\\n    function delegates(uint256 delegator) external view returns (uint256) {\\n        return _delegates[delegator];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function checkpoints(\\n        uint256 _tokenId,\\n        uint48 _index\\n    ) external view returns (Checkpoint memory) {\\n        return _checkpoints[_tokenId][_index];\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function getPastVotes(\\n        address _account,\\n        uint256 _tokenId,\\n        uint256 _timestamp\\n    ) external view returns (uint256) {\\n        return\\n            DelegationLogicLibrary.getPastVotes(\\n                numCheckpoints,\\n                _checkpoints,\\n                _account,\\n                _tokenId,\\n                _timestamp\\n            );\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function getPastTotalSupply(\\n        uint256 _timestamp\\n    ) external view returns (uint256) {\\n        return _supplyAt(_timestamp);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             DAO VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _checkpointDelegator(\\n        uint256 _delegator,\\n        uint256 _delegatee,\\n        address _owner\\n    ) internal {\\n        DelegationLogicLibrary.checkpointDelegator(\\n            _locked,\\n            numCheckpoints,\\n            _checkpoints,\\n            _delegates,\\n            _delegator,\\n            _delegatee,\\n            _owner\\n        );\\n    }\\n\\n    function _checkpointDelegatee(\\n        uint256 _delegatee,\\n        uint256 balance_,\\n        bool _increase\\n    ) internal {\\n        DelegationLogicLibrary.checkpointDelegatee(\\n            numCheckpoints,\\n            _checkpoints,\\n            _delegatee,\\n            balance_,\\n            _increase\\n        );\\n    }\\n\\n    /// @notice Record user delegation checkpoints. Used by voting system.\\n    /// @dev Skips delegation if already delegated to `delegatee`.\\n    function _delegate(uint256 _delegator, uint256 _delegatee) internal {\\n        LockedBalance memory delegateLocked = _locked[_delegator];\\n        if (!delegateLocked.isPermanent) revert NotPermanentLock();\\n        if (_delegatee != 0 && _ownerOf(_delegatee) == address(0))\\n            revert NonExistentToken();\\n        if (ownershipChange[_delegator] == block.number)\\n            revert OwnershipChange();\\n        if (_delegatee == _delegator) _delegatee = 0;\\n        uint256 currentDelegate = _delegates[_delegator];\\n        if (currentDelegate == _delegatee) return;\\n\\n        uint256 delegatedBalance = delegateLocked.amount.toUint256();\\n        _checkpointDelegator(_delegator, _delegatee, _ownerOf(_delegator));\\n        _checkpointDelegatee(_delegatee, delegatedBalance, true);\\n\\n        emit DelegateChanged(_msgSender(), currentDelegate, _delegatee);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function delegate(uint256 delegator, uint256 delegatee) external {\\n        if (!_isApprovedOrOwner(_msgSender(), delegator))\\n            revert NotApprovedOrOwner();\\n        return _delegate(delegator, delegatee);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (\\n            uint256(s) >\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\\n        ) revert InvalidSignatureS();\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(this.name())),\\n                keccak256(bytes(this.version())),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n        bytes32 structHash = keccak256(\\n            abi.encode(DELEGATION_TYPEHASH, delegator, delegatee, nonce, expiry)\\n        );\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash)\\n        );\\n        address signatory = ecrecover(digest, v, r, s);\\n        if (!_isApprovedOrOwner(signatory, delegator))\\n            revert NotApprovedOrOwner();\\n        if (signatory == address(0)) revert InvalidSignature();\\n        if (nonce != nonces[signatory]++) revert InvalidNonce();\\n        if (block.timestamp > expiry) revert SignatureExpired();\\n        return _delegate(delegator, delegatee);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6372 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotingEscrow\\n    function clock() external view returns (uint48) {\\n        return uint48(block.timestamp);\\n    }\\n\\n    /// @inheritdoc IVotingEscrow\\n    function CLOCK_MODE() external pure returns (string memory) {\\n        return \\\"mode=timestamp\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xc269b25605a0905770b5b0e1eabfa900787ce1e7becc30f7c05c1ddd860dfae0\",\"license\":\"BUSL-1.1\"},\"contracts/governance/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// Modified IVotes interface for tokenId based voting\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(\\n        address indexed delegator,\\n        uint256 indexed fromDelegate,\\n        uint256 indexed toDelegate\\n    );\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(\\n        address indexed delegate,\\n        uint256 previousBalance,\\n        uint256 newBalance\\n    );\\n\\n    /**\\n     * @dev Returns the amount of votes that `tokenId` had at a specific moment in the past.\\n     *      If the account passed in is not the owner, returns 0.\\n     */\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(\\n        uint256 timepoint\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `tokenId` has chosen. Can never be equal to the delegator's `tokenId`.\\n     *      Returns 0 if not delegated.\\n     */\\n    function delegates(uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from `delegator` to `delegatee`. Signer must own `delegator`.\\n     */\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb4886474bc559202c8004ffba54c1d11dd14c3bbbc3a107bd522cc0f99b2ba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IReward {\\n    error InvalidReward();\\n    error NotAuthorized();\\n    error NotGauge();\\n    error NotEscrowToken();\\n    error NotSingleToken();\\n    error NotVotingEscrow();\\n    error NotWhitelisted();\\n    error ZeroAmount();\\n\\n    event Deposit(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event Withdraw(\\n        address indexed from,\\n        uint256 indexed tokenId,\\n        uint256 amount\\n    );\\n    event NotifyReward(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 indexed epoch,\\n        uint256 amount\\n    );\\n    event ClaimRewards(\\n        address indexed from,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n\\n    /// @notice Deposit an amount into the rewards contract to earn future rewards associated to a veNFT\\n    /// @dev Internal notation used as only callable internally by `authorized`.\\n    /// @param amount   Amount deposited for the veNFT\\n    /// @param tokenId  Unique identifier of the veNFT\\n    function _deposit(uint256 amount, uint256 tokenId) external;\\n\\n    /// @notice Withdraw an amount from the rewards contract associated to a veNFT\\n    /// @dev Internal notation used as only callable internally by `authorized`.\\n    /// @param amount   Amount deposited for the veNFT\\n    /// @param tokenId  Unique identifier of the veNFT\\n    function _withdraw(uint256 amount, uint256 tokenId) external;\\n\\n    /// @notice Claim the rewards earned by a veNFT staker\\n    /// @param tokenId  Unique identifier of the veNFT\\n    /// @param tokens   Array of tokens to claim rewards of\\n    function getReward(uint256 tokenId, address[] memory tokens) external;\\n\\n    /// @notice Add rewards for stakers to earn\\n    /// @param token    Address of token to reward\\n    /// @param amount   Amount of token to transfer to rewards\\n    function notifyRewardAmount(address token, uint256 amount) external;\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param tokenId      The token of the NFT to check\\n    /// @param timestamp    The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function getPriorBalanceIndex(\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @notice Determine the prior index of supply staked by of a timestamp\\n    /// @dev Timestamp must be <= current timestamp\\n    /// @param timestamp The timestamp to get the index at\\n    /// @return Index of supply checkpoint\\n    function getPriorSupplyIndex(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculate how much in rewards are earned for a specific token and veNFT\\n    /// @param token Address of token to fetch rewards of\\n    /// @param tokenId Unique identifier of the veNFT\\n    /// @return Amount of token earned in rewards\\n    function earned(\\n        address token,\\n        uint256 tokenId\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc104a752430a186c1052b2fb4b6e16f99d111dc1113369421dc22d7a6fce9086\",\"license\":\"MIT\"},\"contracts/interfaces/IVeArtProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IVeArtProxy {\\n    function tokenURI(\\n        uint256 _tokenId\\n    ) external view returns (string memory output);\\n}\\n\",\"keccak256\":\"0x6dfdb4b1d8f01ecf556c59cd43b8ba8715cdaaf3e9872ba8f840f8be323bfb3d\",\"license\":\"MIT\"},\"contracts/interfaces/IVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\ninterface IVoter {\\n    error AlreadyVotedOrDeposited();\\n    error DistributeWindow();\\n    error FactoryPathNotApproved();\\n    error GaugeAlreadyKilled();\\n    error GaugeAlreadyRevived();\\n    error GaugeExists();\\n    error GaugeDoesNotExist(address _pool);\\n    error GaugeNotAlive(address _gauge);\\n    error InactiveManagedNFT();\\n    error MaximumVotingNumberTooLow();\\n    error NonZeroVotes();\\n    error NotAPool();\\n    error NotApprovedOrOwner();\\n    error NotGovernor();\\n    error NotEmergencyCouncil();\\n    error NotMinter();\\n    error NotWhitelistedNFT();\\n    error NotWhitelistedToken();\\n    error SameValue();\\n    error SpecialVotingWindow();\\n    error TooManyPools();\\n    error UnequalLengths();\\n    error ZeroBalance();\\n    error ZeroAddress();\\n\\n    event GaugeCreated(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory,\\n        address pool,\\n        address bribeVotingReward,\\n        address feeVotingReward,\\n        address gauge,\\n        address creator\\n    );\\n    event GaugeKilled(address indexed gauge);\\n    event GaugeRevived(address indexed gauge);\\n    event Voted(\\n        address indexed voter,\\n        address indexed pool,\\n        uint256 indexed tokenId,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event Abstained(\\n        address indexed voter,\\n        address indexed pool,\\n        uint256 indexed tokenId,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event NotifyReward(\\n        address indexed sender,\\n        address indexed reward,\\n        uint256 amount\\n    );\\n    event DistributeReward(\\n        address indexed sender,\\n        address indexed gauge,\\n        uint256 amount\\n    );\\n    event WhitelistToken(\\n        address indexed whitelister,\\n        address indexed token,\\n        bool indexed _bool\\n    );\\n    event WhitelistNFT(\\n        address indexed whitelister,\\n        uint256 indexed tokenId,\\n        bool indexed _bool\\n    );\\n\\n    /// @notice Store trusted forwarder address to pass into factories\\n    function forwarder() external view returns (address);\\n\\n    /// @notice The ve token that governs these contracts\\n    function ve() external view returns (address);\\n\\n    /// @notice Factory registry for valid pool / gauge / rewards factories\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of Minter.sol\\n    function minter() external view returns (address);\\n\\n    /// @notice Standard OZ IGovernor using ve for vote weights.\\n    function governor() external view returns (address);\\n\\n    /// @notice Custom Epoch Governor using ve for vote weights.\\n    function epochGovernor() external view returns (address);\\n\\n    /// @notice credibly neutral party similar to Curve's Emergency DAO\\n    function emergencyCouncil() external view returns (address);\\n\\n    /// @dev Total Voting Weights\\n    function totalWeight() external view returns (uint256);\\n\\n    /// @dev Most number of pools one voter can vote for at once\\n    function maxVotingNum() external view returns (uint256);\\n\\n    // mappings\\n    /// @dev Pool => Gauge\\n    function gauges(address pool) external view returns (address);\\n\\n    /// @dev Gauge => Pool\\n    function poolForGauge(address gauge) external view returns (address);\\n\\n    /// @dev Gauge => Fees Voting Reward\\n    function gaugeToFees(address gauge) external view returns (address);\\n\\n    /// @dev Gauge => Bribes Voting Reward\\n    function gaugeToBribe(address gauge) external view returns (address);\\n\\n    /// @dev Pool => Weights\\n    function weights(address pool) external view returns (uint256);\\n\\n    /// @dev NFT => Pool => Votes\\n    function votes(\\n        uint256 tokenId,\\n        address pool\\n    ) external view returns (uint256);\\n\\n    /// @dev NFT => Total voting weight of NFT\\n    function usedWeights(uint256 tokenId) external view returns (uint256);\\n\\n    /// @dev Nft => Timestamp of last vote (ensures single vote per epoch)\\n    function lastVoted(uint256 tokenId) external view returns (uint256);\\n\\n    /// @dev Address => Gauge\\n    function isGauge(address) external view returns (bool);\\n\\n    /// @dev Token => Whitelisted status\\n    function isWhitelistedToken(address token) external view returns (bool);\\n\\n    /// @dev TokenId => Whitelisted status\\n    function isWhitelistedNFT(uint256 tokenId) external view returns (bool);\\n\\n    /// @dev Gauge => Liveness status\\n    function isAlive(address gauge) external view returns (bool);\\n\\n    /// @dev Gauge => Amount claimable\\n    function claimable(address gauge) external view returns (uint256);\\n\\n    /// @notice Number of pools with a Gauge\\n    function length() external view returns (uint256);\\n\\n    /// @notice Called by Minter to distribute weekly emissions rewards for disbursement amongst gauges.\\n    /// @dev Assumes totalWeight != 0 (Will never be zero as long as users are voting).\\n    ///      Throws if not called by minter.\\n    /// @param _amount Amount of rewards to distribute.\\n    function notifyRewardAmount(uint256 _amount) external;\\n\\n    /// @dev Utility to distribute to gauges of pools in range _start to _finish.\\n    /// @param _start   Starting index of gauges to distribute to.\\n    /// @param _finish  Ending index of gauges to distribute to.\\n    function distribute(uint256 _start, uint256 _finish) external;\\n\\n    /// @dev Utility to distribute to gauges of pools in array.\\n    /// @param _gauges Array of gauges to distribute to.\\n    function distribute(address[] memory _gauges) external;\\n\\n    /// @notice Called by users to update voting balances in voting rewards contracts.\\n    /// @param _tokenId Id of veNFT whose balance you wish to update.\\n    function poke(uint256 _tokenId) external;\\n\\n    /// @notice Called by users to vote for pools. Votes distributed proportionally based on weights.\\n    ///         Can only vote or deposit into a managed NFT once per epoch.\\n    ///         Can only vote for gauges that have not been killed.\\n    /// @dev Weights are distributed proportional to the sum of the weights in the array.\\n    ///      Throws if length of _poolVote and _weights do not match.\\n    /// @param _tokenId     Id of veNFT you are voting with.\\n    /// @param _poolVote    Array of pools you are voting for.\\n    /// @param _weights     Weights of pools.\\n    function vote(\\n        uint256 _tokenId,\\n        address[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external;\\n\\n    /// @notice Called by users to reset voting state. Required if you wish to make changes to\\n    ///         veNFT state (e.g. merge, split, deposit into managed etc).\\n    ///         Cannot reset in the same epoch that you voted in.\\n    ///         Can vote or deposit into a managed NFT again after reset.\\n    /// @param _tokenId Id of veNFT you are reseting.\\n    function reset(uint256 _tokenId) external;\\n\\n    /// @notice Called by users to deposit into a managed NFT.\\n    ///         Can only vote or deposit into a managed NFT once per epoch.\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    /// @dev Throws if not approved or owner.\\n    ///      Throws if managed NFT is inactive.\\n    ///      Throws if depositing within privileged window (one hour prior to epoch flip).\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Called by users to withdraw from a managed NFT.\\n    ///         Cannot do it in the same epoch that you deposited into a managed NFT.\\n    ///         Can vote or deposit into a managed NFT again after withdrawing.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Claim emissions from gauges.\\n    /// @param _gauges Array of gauges to collect emissions from.\\n    function claimRewards(address[] memory _gauges) external;\\n\\n    /// @notice Claim bribes for a given NFT.\\n    /// @dev Utility to help batch bribe claims.\\n    /// @param _bribes  Array of BribeVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as bribes.\\n    /// @param _tokenId Id of veNFT that you wish to claim bribes for.\\n    function claimBribes(\\n        address[] memory _bribes,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Claim fees for a given NFT.\\n    /// @dev Utility to help batch fee claims.\\n    /// @param _fees    Array of FeesVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as fees.\\n    /// @param _tokenId Id of veNFT that you wish to claim fees for.\\n    function claimFees(\\n        address[] memory _fees,\\n        address[][] memory _tokens,\\n        uint256 _tokenId\\n    ) external;\\n\\n    /// @notice Set new governor.\\n    /// @dev Throws if not called by governor.\\n    /// @param _governor .\\n    function setGovernor(address _governor) external;\\n\\n    /// @notice Set new epoch based governor.\\n    /// @dev Throws if not called by governor.\\n    /// @param _epochGovernor .\\n    function setEpochGovernor(address _epochGovernor) external;\\n\\n    /// @notice Set new emergency council.\\n    /// @dev Throws if not called by emergency council.\\n    /// @param _emergencyCouncil .\\n    function setEmergencyCouncil(address _emergencyCouncil) external;\\n\\n    /// @notice Set maximum number of gauges that can be voted for.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _maxVotingNum is too low.\\n    ///      Throws if the values are the same.\\n    /// @param _maxVotingNum .\\n    function setMaxVotingNum(uint256 _maxVotingNum) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token for use in bribes.\\n    /// @dev Throws if not called by governor.\\n    /// @param _token .\\n    /// @param _bool .\\n    function whitelistToken(address _token, bool _bool) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token id for voting in last hour prior to epoch flip.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if already whitelisted.\\n    /// @param _tokenId .\\n    /// @param _bool .\\n    function whitelistNFT(uint256 _tokenId, bool _bool) external;\\n\\n    /// @notice Create a new gauge (unpermissioned).\\n    /// @dev Governor can create a new gauge for a pool with any address.\\n    /// @param _poolFactory .\\n    /// @param _votingRewardsFactory .\\n    /// @param _gaugeFactory .\\n    /// @param _pool .\\n    function createGauge(\\n        address _poolFactory,\\n        address _votingRewardsFactory,\\n        address _gaugeFactory,\\n        address _pool\\n    ) external returns (address);\\n\\n    /// @notice Kills a gauge. The gauge will not receive any new emissions and cannot be deposited into.\\n    ///         Can still withdraw from gauge.\\n    /// @dev Throws if not called by emergency council.\\n    ///      Throws if gauge already killed.\\n    /// @param _gauge .\\n    function killGauge(address _gauge) external;\\n\\n    /// @notice Revives a killed gauge. Gauge will can receive emissions and deposits again.\\n    /// @dev Throws if not called by emergency council.\\n    ///      Throws if gauge is not killed.\\n    /// @param _gauge .\\n    function reviveGauge(address _gauge) external;\\n\\n    /// @dev Update claims to emissions for an array of gauges.\\n    /// @param _gauges Array of gauges to update emissions for.\\n    function updateFor(address[] memory _gauges) external;\\n\\n    /// @dev Update claims to emissions for gauges based on their pool id as stored in Voter.\\n    /// @param _start   Starting index of pools.\\n    /// @param _end     Ending index of pools.\\n    function updateFor(uint256 _start, uint256 _end) external;\\n\\n    /// @dev Update claims to emissions for single gauge\\n    /// @param _gauge .\\n    function updateFor(address _gauge) external;\\n}\\n\",\"keccak256\":\"0x7a4c39774a63f2670ecb7ec1369f296d3460ba39675611ebe35b7de51f688718\",\"license\":\"MIT\"},\"contracts/interfaces/IVotingEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.24;\\n\\nimport {IERC165, IERC721, IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {IERC6372} from \\\"@openzeppelin/contracts/interfaces/IERC6372.sol\\\";\\nimport {IERC4906} from \\\"@openzeppelin/contracts/interfaces/IERC4906.sol\\\";\\nimport {IVotes} from \\\"../governance/IVotes.sol\\\";\\n\\ninterface IVotingEscrow is IVotes, IERC4906, IERC6372, IERC721Metadata {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n        bool isPermanent;\\n    }\\n\\n    struct UserPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanent;\\n    }\\n\\n    struct GlobalPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n        uint256 permanentLockBalance;\\n    }\\n\\n    /// @notice A checkpoint for recorded delegated voting weights at a certain timestamp\\n    struct Checkpoint {\\n        uint256 fromTimestamp;\\n        address owner;\\n        uint256 delegatedBalance;\\n        uint256 delegatee;\\n    }\\n\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    /// @dev Different types of veNFTs:\\n    /// NORMAL  - typical veNFT\\n    /// LOCKED  - veNFT which is locked into a MANAGED veNFT\\n    /// MANAGED - veNFT which can accept the deposit of NORMAL veNFTs\\n    enum EscrowType {\\n        NORMAL,\\n        LOCKED,\\n        MANAGED\\n    }\\n\\n    error AlreadyVoted();\\n    error AmountTooBig();\\n    error ERC721ReceiverRejectedTokens();\\n    error ERC721TransferToNonERC721ReceiverImplementer();\\n    error InvalidNonce();\\n    error InvalidSignature();\\n    error InvalidSignatureS();\\n    error InvalidManagedNFTId();\\n    error LockDurationNotInFuture();\\n    error LockDurationTooLong();\\n    error LockExpired();\\n    error LockNotExpired();\\n    error NoLockFound();\\n    error NonExistentToken();\\n    error NotApprovedOrOwner();\\n    error NotDistributor();\\n    error NotEmergencyCouncilOrGovernor();\\n    error NotGovernor();\\n    error NotGovernorOrManager();\\n    error NotManagedNFT();\\n    error NotManagedOrNormalNFT();\\n    error NotLockedNFT();\\n    error NotNormalNFT();\\n    error NotPermanentLock();\\n    error NotOwner();\\n    error NotTeam();\\n    error NotVoter();\\n    error OwnershipChange();\\n    error PermanentLock();\\n    error SameAddress();\\n    error SameNFT();\\n    error SameState();\\n    error SplitNoOwner();\\n    error SplitNotAllowed();\\n    error SignatureExpired();\\n    error TooManyTokenIDs();\\n    error ZeroAddress();\\n    error ZeroAmount();\\n    error ZeroBalance();\\n\\n    event Deposit(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        DepositType indexed depositType,\\n        uint256 value,\\n        uint256 locktime,\\n        uint256 ts\\n    );\\n    event Withdraw(\\n        address indexed provider,\\n        uint256 indexed tokenId,\\n        uint256 value,\\n        uint256 ts\\n    );\\n    event LockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event UnlockPermanent(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 amount,\\n        uint256 _ts\\n    );\\n    event Supply(uint256 prevSupply, uint256 supply);\\n    event Merge(\\n        address indexed _sender,\\n        uint256 indexed _from,\\n        uint256 indexed _to,\\n        uint256 _amountFrom,\\n        uint256 _amountTo,\\n        uint256 _amountFinal,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event Split(\\n        uint256 indexed _from,\\n        uint256 indexed _tokenId1,\\n        uint256 indexed _tokenId2,\\n        address _sender,\\n        uint256 _splitAmount1,\\n        uint256 _splitAmount2,\\n        uint256 _locktime,\\n        uint256 _ts\\n    );\\n    event CreateManaged(\\n        address indexed _to,\\n        uint256 indexed _mTokenId,\\n        address indexed _from,\\n        address _lockedManagedReward,\\n        address _freeManagedReward\\n    );\\n    event DepositManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event WithdrawManaged(\\n        address indexed _owner,\\n        uint256 indexed _tokenId,\\n        uint256 indexed _mTokenId,\\n        uint256 _weight,\\n        uint256 _ts\\n    );\\n    event SetAllowedManager(address indexed _allowedManager);\\n\\n    // State variables\\n    /// @notice Address of Meta-tx Forwarder\\n    function forwarder() external view returns (address);\\n\\n    /// @notice Address of FactoryRegistry.sol\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of token used to create a veNFT\\n    function token() external view returns (address);\\n\\n    /// @notice Address of RewardsDistributor.sol\\n    function distributor() external view returns (address);\\n\\n    /// @notice Address of Voter.sol\\n    function voter() external view returns (address);\\n\\n    /// @notice Address of Protocol Team multisig\\n    function team() external view returns (address);\\n\\n    /// @notice Address of art proxy used for on-chain art generation\\n    function artProxy() external view returns (address);\\n\\n    /// @dev address which can create managed NFTs\\n    function allowedManager() external view returns (address);\\n\\n    /// @dev Current count of token\\n    function tokenId() external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping of token id to escrow type\\n    ///      Takes advantage of the fact default value is EscrowType.NORMAL\\n    function escrowType(uint256 tokenId) external view returns (EscrowType);\\n\\n    /// @dev Mapping of token id to managed id\\n    function idToManaged(\\n        uint256 tokenId\\n    ) external view returns (uint256 managedTokenId);\\n\\n    /// @dev Mapping of user token id to managed token id to weight of token id\\n    function weights(\\n        uint256 tokenId,\\n        uint256 managedTokenId\\n    ) external view returns (uint256 weight);\\n\\n    /// @dev Mapping of managed id to deactivated state\\n    function deactivated(uint256 tokenId) external view returns (bool inactive);\\n\\n    /// @dev Mapping from managed nft id to locked managed rewards\\n    ///      `token` denominated rewards (rebases/rewards) stored in locked managed rewards contract\\n    ///      to prevent co-mingling of assets\\n    function managedToLocked(uint256 tokenId) external view returns (address);\\n\\n    /// @dev Mapping from managed nft id to free managed rewards contract\\n    ///      these rewards can be freely withdrawn by users\\n    function managedToFree(uint256 tokenId) external view returns (address);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            MANAGED NFT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Create managed NFT (a permanent lock) for use within ecosystem.\\n    /// @dev Throws if address already owns a managed NFT.\\n    /// @return _mTokenId managed token id.\\n    function createManagedLockFor(\\n        address _to\\n    ) external returns (uint256 _mTokenId);\\n\\n    /// @notice Delegates balance to managed nft\\n    ///         Note that NFTs deposited into a managed NFT will be re-locked\\n    ///         to the maximum lock time on withdrawal.\\n    ///         Permanent locks that are deposited will automatically unlock.\\n    /// @dev Managed nft will remain max-locked as long as there is at least one\\n    ///      deposit or withdrawal per week.\\n    ///      Throws if deposit nft is managed.\\n    ///      Throws if recipient nft is not managed.\\n    ///      Throws if deposit nft is already locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited\\n    /// @param _mTokenId tokenId of managed NFT that will receive the deposit\\n    function depositManaged(uint256 _tokenId, uint256 _mTokenId) external;\\n\\n    /// @notice Retrieves locked rewards and withdraws balance from managed nft.\\n    ///         Note that the NFT withdrawn is re-locked to the maximum lock time.\\n    /// @dev Throws if NFT not locked.\\n    ///      Throws if not called by voter.\\n    /// @param _tokenId tokenId of NFT being deposited.\\n    function withdrawManaged(uint256 _tokenId) external;\\n\\n    /// @notice Permit one address to call createManagedLockFor() that is not Voter.governor()\\n    function setAllowedManager(address _allowedManager) external;\\n\\n    /// @notice Set Managed NFT state. Inactive NFTs cannot be deposited into.\\n    /// @param _mTokenId managed nft state to set\\n    /// @param _state true => inactive, false => active\\n    function setManagedState(uint256 _mTokenId, bool _state) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function version() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function setTeam(address _team) external;\\n\\n    function setArtProxy(address _proxy) external;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                      ERC721 BALANCE/OWNER STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Mapping from owner address to mapping of index to tokenId\\n    function ownerToNFTokenIdList(\\n        address _owner,\\n        uint256 _index\\n    ) external view returns (uint256 _tokenId);\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                         ERC721 APPROVAL STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(\\n        uint256 _tokenId\\n    ) external view returns (address operator);\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n\\n    /// @notice Check whether spender is owner or an approved user for a given veNFT\\n    /// @param _spender .\\n    /// @param _tokenId .\\n    function isApprovedOrOwner(\\n        address _spender,\\n        uint256 _tokenId\\n    ) external returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC721 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @inheritdoc IERC721\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /// @inheritdoc IERC721\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC165 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(\\n        bytes4 _interfaceID\\n    ) external view returns (bool);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             ESCROW STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Total count of epochs witnessed since contract creation\\n    function epoch() external view returns (uint256);\\n\\n    /// @notice Total amount of token() deposited\\n    function supply() external view returns (uint256);\\n\\n    /// @notice Aggregate permanent locked balances\\n    function permanentLockBalance() external view returns (uint256);\\n\\n    function userPointEpoch(\\n        uint256 _tokenId\\n    ) external view returns (uint256 _epoch);\\n\\n    /// @notice time -> signed slope change\\n    function slopeChanges(uint256 _timestamp) external view returns (int128);\\n\\n    /// @notice account -> can split\\n    function canSplit(address _account) external view returns (bool);\\n\\n    /// @notice Global point history at a given index\\n    function pointHistory(\\n        uint256 _loc\\n    ) external view returns (GlobalPoint memory);\\n\\n    /// @notice Get the LockedBalance (amount, end) of a _tokenId\\n    /// @param _tokenId .\\n    /// @return LockedBalance of _tokenId\\n    function locked(\\n        uint256 _tokenId\\n    ) external view returns (LockedBalance memory);\\n\\n    /// @notice User -> UserPoint[userEpoch]\\n    function userPointHistory(\\n        uint256 _tokenId,\\n        uint256 _loc\\n    ) external view returns (UserPoint memory);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ESCROW LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Record global data to checkpoint\\n    function checkpoint() external;\\n\\n    /// @notice Deposit `_value` tokens for `_tokenId` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    ///      cannot extend their locktime and deposit for a brand new user\\n    /// @param _tokenId lock NFT\\n    /// @param _value Amount to add to user's lock\\n    function depositFor(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @return TokenId of created veNFT\\n    function createLock(\\n        uint256 _value,\\n        uint256 _lockDuration\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` tokens for `_to` and lock for `_lockDuration`\\n    /// @param _value Amount to deposit\\n    /// @param _lockDuration Number of seconds to lock tokens for (rounded down to nearest week)\\n    /// @param _to Address to deposit\\n    /// @return TokenId of created veNFT\\n    function createLockFor(\\n        uint256 _value,\\n        uint256 _lockDuration,\\n        address _to\\n    ) external returns (uint256);\\n\\n    /// @notice Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increaseAmount(uint256 _tokenId, uint256 _value) external;\\n\\n    /// @notice Extend the unlock time for `_tokenId`\\n    ///         Cannot extend lock time of permanent locks\\n    /// @param _lockDuration New number of seconds until tokens unlock\\n    function increaseUnlockTime(\\n        uint256 _tokenId,\\n        uint256 _lockDuration\\n    ) external;\\n\\n    /// @notice Withdraw all tokens for `_tokenId`\\n    /// @dev Only possible if the lock is both expired and not permanent\\n    ///      This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///      will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    function withdraw(uint256 _tokenId) external;\\n\\n    /// @notice Merges `_from` into `_to`.\\n    /// @dev Cannot merge `_from` locks that are permanent or have already voted this epoch.\\n    ///      Cannot merge `_to` locks that have already expired.\\n    ///      This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///      will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    /// @param _from VeNFT to merge from.\\n    /// @param _to VeNFT to merge into.\\n    function merge(uint256 _from, uint256 _to) external;\\n\\n    /// @notice Splits veNFT into two new veNFTS - one with oldLocked.amount - `_amount`, and the second with `_amount`\\n    /// @dev    This burns the tokenId of the target veNFT\\n    ///         Callable by approved or owner\\n    ///         If this is called by approved, approved will not have permissions to manipulate the newly created veNFTs\\n    ///         Returns the two new split veNFTs to owner\\n    ///         If `from` is permanent, will automatically dedelegate.\\n    ///         This will burn the veNFT. Any rebases or rewards that are unclaimed\\n    ///         will no longer be claimable. Claim all rebases and rewards prior to calling this.\\n    /// @param _from VeNFT to split.\\n    /// @param _amount Amount to split from veNFT.\\n    /// @return _tokenId1 Return tokenId of veNFT with oldLocked.amount - `_amount`.\\n    /// @return _tokenId2 Return tokenId of veNFT with `_amount`.\\n    function split(\\n        uint256 _from,\\n        uint256 _amount\\n    ) external returns (uint256 _tokenId1, uint256 _tokenId2);\\n\\n    /// @notice Toggle split for a specific address.\\n    /// @dev Toggle split for address(0) to enable or disable for all.\\n    /// @param _account Address to toggle split permissions\\n    /// @param _bool True to allow, false to disallow\\n    function toggleSplit(address _account, bool _bool) external;\\n\\n    /// @notice Permanently lock a veNFT. Voting power will be equal to\\n    ///         `LockedBalance.amount` with no decay. Required to delegate.\\n    /// @dev Only callable by unlocked normal veNFTs.\\n    /// @param _tokenId tokenId to lock.\\n    function lockPermanent(uint256 _tokenId) external;\\n\\n    /// @notice Unlock a permanently locked veNFT. Voting power will decay.\\n    ///         Will automatically dedelegate if delegated.\\n    /// @dev Only callable by permanently locked veNFTs.\\n    ///      Cannot unlock if already voted this epoch.\\n    /// @param _tokenId tokenId to unlock.\\n    function unlockPermanent(uint256 _tokenId) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                           GAUGE VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Get the voting power for _tokenId at the current timestamp\\n    /// @dev Returns 0 if called in the same block as a transfer.\\n    /// @param _tokenId .\\n    /// @return Voting power\\n    function balanceOfNFT(uint256 _tokenId) external view returns (uint256);\\n\\n    /// @notice Get the voting power for _tokenId at a given timestamp\\n    /// @param _tokenId .\\n    /// @param _t Timestamp to query voting power\\n    /// @return Voting power\\n    function balanceOfNFTAt(\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at current timestamp\\n    /// @return Total voting power at current timestamp\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Calculate total voting power at a given timestamp\\n    /// @param _t Timestamp to query total voting power\\n    /// @return Total voting power at given timestamp\\n    function totalSupplyAt(uint256 _t) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            GAUGE VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice See if a queried _tokenId has actively voted\\n    /// @param _tokenId .\\n    /// @return True if voted, else false\\n    function voted(uint256 _tokenId) external view returns (bool);\\n\\n    /// @notice Set the global state voter and distributor\\n    /// @dev This is only called once, at setup\\n    function setVoterAndDistributor(\\n        address _voter,\\n        address _distributor\\n    ) external;\\n\\n    /// @notice Set `voted` for _tokenId to true or false\\n    /// @dev Only callable by voter\\n    /// @param _tokenId .\\n    /// @param _voted .\\n    function voting(uint256 _tokenId, bool _voted) external;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            DAO VOTING STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice The number of checkpoints for each tokenId\\n    function numCheckpoints(uint256 tokenId) external view returns (uint48);\\n\\n    /// @notice A record of states for signing / validating signatures\\n    function nonces(address account) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function delegates(uint256 delegator) external view returns (uint256);\\n\\n    /// @notice A record of delegated token checkpoints for each account, by index\\n    /// @param tokenId .\\n    /// @param index .\\n    /// @return Checkpoint\\n    function checkpoints(\\n        uint256 tokenId,\\n        uint48 index\\n    ) external view returns (Checkpoint memory);\\n\\n    /// @inheritdoc IVotes\\n    function getPastVotes(\\n        address account,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /// @inheritdoc IVotes\\n    function getPastTotalSupply(\\n        uint256 timestamp\\n    ) external view returns (uint256);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                             DAO VOTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IVotes\\n    function delegate(uint256 delegator, uint256 delegatee) external;\\n\\n    /// @inheritdoc IVotes\\n    function delegateBySig(\\n        uint256 delegator,\\n        uint256 delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC6372 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IERC6372\\n    function clock() external view returns (uint48);\\n\\n    /// @inheritdoc IERC6372\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x98987ce08f208b6eef4481d4f85bb64c7477164150c7dba176f8f77adbd9b8cf\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IFactoryRegistry {\\n    error PathAlreadyApproved();\\n    error PathNotApproved();\\n    error PoolFactoryAlreadyApproved();\\n    error SameAddress();\\n    error ZeroAddress();\\n\\n    event Approve(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event Unapprove(\\n        address indexed poolFactory,\\n        address indexed votingRewardsFactory,\\n        address indexed gaugeFactory\\n    );\\n    event SetManagedRewardsFactory(address indexed _newRewardsFactory);\\n\\n    /// @notice Approve a set of factories used in Mezodrome Protocol.  Router is now able to swap with pools created\\n    //          by the poolFactory\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    function approve(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external;\\n\\n    /// @notice Unapprove a set of factories used in Mezodrome Protocol. Router is no longer able to swap with pools\\n    ///         created by the poolFactory\\n    /// @dev Callable by onlyOwner\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    function unapprove(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external;\\n\\n    /// @notice Check if a set of factories are approved for use in Mezodrome Protocol\\n    /// @param poolFactory .\\n    /// @param votingRewardsFactory .\\n    /// @param gaugeFactory .\\n    /// @return True if set of factories are approved, else false\\n    function isApproved(\\n        address poolFactory,\\n        address votingRewardsFactory,\\n        address gaugeFactory\\n    ) external view returns (bool);\\n\\n    /// @notice Factory to create free and locked rewards for a managed veNFT\\n    function managedRewardsFactory() external view returns (address);\\n\\n    /// @notice Set the rewards factory address\\n    /// @dev Callable by onlyOwner\\n    /// @param _newManagedRewardsFactory address of new managedRewardsFactory\\n    function setManagedRewardsFactory(\\n        address _newManagedRewardsFactory\\n    ) external;\\n\\n    /// @notice Get all PoolFactories used by the registry\\n    /// @dev The same PoolFactory address cannot be used twice\\n    /// @return Array of PoolFactory addresses\\n    function poolFactories() external view returns (address[] memory);\\n\\n    /// @notice Check if a PoolFactory is registered within the factory registry.  Router uses this method to\\n    ///         ensure a pool swapped from is approved.\\n    /// @param poolFactory .\\n    /// @return True if PoolFactory is approved, else false\\n    function poolFactoryExists(\\n        address poolFactory\\n    ) external view returns (bool);\\n\\n    /// @notice Get the length of the poolFactories array\\n    function poolFactoriesLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdfb7b5d58ac04eefc2be484a2866c7a5a4611982777688f604b8883bc6320a61\",\"license\":\"MIT\"},\"contracts/interfaces/factories/IManagedRewardsFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IManagedRewardsFactory {\\n    event ManagedRewardCreated(\\n        address indexed voter,\\n        address indexed lockedManagedReward,\\n        address indexed freeManagedReward\\n    );\\n\\n    /// @notice creates a LockedManagedReward and a FreeManagedReward contract for a managed veNFT\\n    /// @param _forwarder Address of trusted forwarder\\n    /// @param _voter Address of Voter.sol\\n    /// @return lockedManagedReward Address of LockedManagedReward contract created\\n    /// @return freeManagedReward   Address of FreeManagedReward contract created\\n    function createRewards(\\n        address _forwarder,\\n        address _voter\\n    ) external returns (address lockedManagedReward, address freeManagedReward);\\n}\\n\",\"keccak256\":\"0x3f4ef0d7d8c7d30564245dcf352f5459f9f50ae196abe0a0baf431adc93f7bb7\",\"license\":\"MIT\"},\"contracts/libraries/BalanceLogicLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {IVotingEscrow} from \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport {SafeCastLibrary} from \\\"./SafeCastLibrary.sol\\\";\\n\\nlibrary BalanceLogicLibrary {\\n    using SafeCastLibrary for uint256;\\n    using SafeCastLibrary for int128;\\n\\n    uint256 internal constant WEEK = 1 weeks;\\n\\n    /// @notice Binary search to get the user point index for a token id at or prior to a given timestamp\\n    /// @dev If a user point does not exist prior to the timestamp, this will return 0.\\n    /// @param _userPointEpoch State of all user point epochs\\n    /// @param _userPointHistory State of all user point history\\n    /// @param _tokenId .\\n    /// @param _timestamp .\\n    /// @return User point index\\n    function getPastUserPointIndex(\\n        mapping(uint256 => uint256) storage _userPointEpoch,\\n        mapping(uint256 => IVotingEscrow.UserPoint[1000000000])\\n            storage _userPointHistory,\\n        uint256 _tokenId,\\n        uint256 _timestamp\\n    ) internal view returns (uint256) {\\n        uint256 _userEpoch = _userPointEpoch[_tokenId];\\n        if (_userEpoch == 0) return 0;\\n        // First check most recent balance\\n        if (_userPointHistory[_tokenId][_userEpoch].ts <= _timestamp)\\n            return (_userEpoch);\\n        // Next check implicit zero balance\\n        if (_userPointHistory[_tokenId][1].ts > _timestamp) return 0;\\n\\n        uint256 lower = 0;\\n        uint256 upper = _userEpoch;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            IVotingEscrow.UserPoint storage userPoint = _userPointHistory[\\n                _tokenId\\n            ][center];\\n            if (userPoint.ts == _timestamp) {\\n                return center;\\n            } else if (userPoint.ts < _timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    /// @notice Binary search to get the global point index at or prior to a given timestamp\\n    /// @dev If a checkpoint does not exist prior to the timestamp, this will return 0.\\n    /// @param _epoch Current global point epoch\\n    /// @param _pointHistory State of all global point history\\n    /// @param _timestamp .\\n    /// @return Global point index\\n    function getPastGlobalPointIndex(\\n        uint256 _epoch,\\n        mapping(uint256 => IVotingEscrow.GlobalPoint) storage _pointHistory,\\n        uint256 _timestamp\\n    ) internal view returns (uint256) {\\n        if (_epoch == 0) return 0;\\n        // First check most recent balance\\n        if (_pointHistory[_epoch].ts <= _timestamp) return (_epoch);\\n        // Next check implicit zero balance\\n        if (_pointHistory[1].ts > _timestamp) return 0;\\n\\n        uint256 lower = 0;\\n        uint256 upper = _epoch;\\n        while (upper > lower) {\\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            IVotingEscrow.GlobalPoint storage globalPoint = _pointHistory[\\n                center\\n            ];\\n            if (globalPoint.ts == _timestamp) {\\n                return center;\\n            } else if (globalPoint.ts < _timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    /// @notice Get the current voting power for `_tokenId`\\n    /// @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n    ///      Fetches last user point prior to a certain timestamp, then walks forward to timestamp.\\n    /// @param _userPointEpoch State of all user point epochs\\n    /// @param _userPointHistory State of all user point history\\n    /// @param _tokenId NFT for lock\\n    /// @param _t Epoch time to return voting power at\\n    /// @return User voting power\\n    function balanceOfNFTAt(\\n        mapping(uint256 => uint256) storage _userPointEpoch,\\n        mapping(uint256 => IVotingEscrow.UserPoint[1000000000])\\n            storage _userPointHistory,\\n        uint256 _tokenId,\\n        uint256 _t\\n    ) external view returns (uint256) {\\n        uint256 _epoch = getPastUserPointIndex(\\n            _userPointEpoch,\\n            _userPointHistory,\\n            _tokenId,\\n            _t\\n        );\\n        // epoch 0 is an empty point\\n        if (_epoch == 0) return 0;\\n        IVotingEscrow.UserPoint memory lastPoint = _userPointHistory[_tokenId][\\n            _epoch\\n        ];\\n        if (lastPoint.permanent != 0) {\\n            return lastPoint.permanent;\\n        } else {\\n            lastPoint.bias -= lastPoint.slope * (_t - lastPoint.ts).toInt128();\\n            if (lastPoint.bias < 0) {\\n                lastPoint.bias = 0;\\n            }\\n            return lastPoint.bias.toUint256();\\n        }\\n    }\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param _slopeChanges State of all slopeChanges\\n    /// @param _pointHistory State of all global point history\\n    /// @param _epoch The epoch to start search from\\n    /// @param _t Time to calculate the total voting power at\\n    /// @return Total voting power at that time\\n    function supplyAt(\\n        mapping(uint256 => int128) storage _slopeChanges,\\n        mapping(uint256 => IVotingEscrow.GlobalPoint) storage _pointHistory,\\n        uint256 _epoch,\\n        uint256 _t\\n    ) external view returns (uint256) {\\n        uint256 epoch_ = getPastGlobalPointIndex(_epoch, _pointHistory, _t);\\n        // epoch 0 is an empty point\\n        if (epoch_ == 0) return 0;\\n        IVotingEscrow.GlobalPoint memory _point = _pointHistory[epoch_];\\n        int128 bias = _point.bias;\\n        int128 slope = _point.slope;\\n        uint256 ts = _point.ts;\\n        uint256 t_i = (ts / WEEK) * WEEK;\\n        for (uint256 i = 0; i < 255; ++i) {\\n            t_i += WEEK;\\n            int128 dSlope = 0;\\n            if (t_i > _t) {\\n                t_i = _t;\\n            } else {\\n                dSlope = _slopeChanges[t_i];\\n            }\\n            bias -= slope * (t_i - ts).toInt128();\\n            if (t_i == _t) {\\n                break;\\n            }\\n            slope += dSlope;\\n            ts = t_i;\\n        }\\n\\n        if (bias < 0) {\\n            bias = 0;\\n        }\\n        return bias.toUint256() + _point.permanentLockBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x619c67e04efdb68afad5e860fb1ea01e3544163ca0eaf0df1a1c3a8ac7fcf7ac\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/DelegationLogicLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\nimport {IVotingEscrow} from \\\"../interfaces/IVotingEscrow.sol\\\";\\nimport {SafeCastLibrary} from \\\"./SafeCastLibrary.sol\\\";\\n\\nlibrary DelegationLogicLibrary {\\n    using SafeCastLibrary for int128;\\n\\n    /// @notice Used by `_mint`, `_transferFrom`, `_burn` and `delegate`\\n    ///         to update delegator voting checkpoints.\\n    ///         Automatically dedelegates, then updates checkpoint.\\n    /// @dev This function depends on `_locked` and must be called prior to token state changes.\\n    ///      If you wish to dedelegate only, use `_delegate(tokenId, 0)` instead.\\n    /// @param _locked State of all locked balances\\n    /// @param _numCheckpoints State of all user checkpoint counts\\n    /// @param _checkpoints State of all user checkpoints\\n    /// @param _delegates State of all user delegatees\\n    /// @param _delegator The delegator to update checkpoints for\\n    /// @param _delegatee The new delegatee for the delegator. Cannot be equal to `_delegator` (use 0 instead).\\n    /// @param _owner The new (or current) owner for the delegator\\n    function checkpointDelegator(\\n        mapping(uint256 => IVotingEscrow.LockedBalance) storage _locked,\\n        mapping(uint256 => uint48) storage _numCheckpoints,\\n        mapping(uint256 => mapping(uint48 => IVotingEscrow.Checkpoint))\\n            storage _checkpoints,\\n        mapping(uint256 => uint256) storage _delegates,\\n        uint256 _delegator,\\n        uint256 _delegatee,\\n        address _owner\\n    ) external {\\n        uint256 delegatedBalance = _locked[_delegator].amount.toUint256();\\n        uint48 numCheckpoint = _numCheckpoints[_delegator];\\n        IVotingEscrow.Checkpoint storage cpOld = numCheckpoint > 0\\n            ? _checkpoints[_delegator][numCheckpoint - 1]\\n            : _checkpoints[_delegator][0];\\n        // Dedelegate from delegatee if delegated\\n        checkpointDelegatee(\\n            _numCheckpoints,\\n            _checkpoints,\\n            cpOld.delegatee,\\n            delegatedBalance,\\n            false\\n        );\\n        IVotingEscrow.Checkpoint storage cp = _checkpoints[_delegator][\\n            numCheckpoint\\n        ];\\n        cp.fromTimestamp = block.timestamp;\\n        cp.delegatedBalance = cpOld.delegatedBalance;\\n        cp.delegatee = _delegatee;\\n        cp.owner = _owner;\\n\\n        if (\\n            _isCheckpointInNewBlock(_numCheckpoints, _checkpoints, _delegator)\\n        ) {\\n            _numCheckpoints[_delegator]++;\\n        } else {\\n            _checkpoints[_delegator][numCheckpoint - 1] = cp;\\n            delete _checkpoints[_delegator][numCheckpoint];\\n        }\\n\\n        _delegates[_delegator] = _delegatee;\\n    }\\n\\n    /// @notice Update delegatee's `delegatedBalance` by `balance`.\\n    ///         Only updates if delegating to a new delegatee.\\n    /// @dev If used with `balance` == `_locked[_tokenId].amount`, then this is the same as\\n    ///      delegating or dedelegating from `_tokenId`\\n    ///      If used with `balance` < `_locked[_tokenId].amount`, then this is used to adjust\\n    ///      `delegatedBalance` when a user's balance is modified (e.g. `increaseAmount`, `merge` etc).\\n    ///      If `delegatee` is 0 (i.e. user is not delegating), then do nothing.\\n    /// @param _numCheckpoints State of all user checkpoint counts\\n    /// @param _checkpoints State of all user checkpoints\\n    /// @param _delegatee The delegatee's tokenId\\n    /// @param balance_ The delta in balance change\\n    /// @param _increase True if balance is increasing, false if decreasing\\n    function checkpointDelegatee(\\n        mapping(uint256 => uint48) storage _numCheckpoints,\\n        mapping(uint256 => mapping(uint48 => IVotingEscrow.Checkpoint))\\n            storage _checkpoints,\\n        uint256 _delegatee,\\n        uint256 balance_,\\n        bool _increase\\n    ) public {\\n        if (_delegatee == 0) return;\\n        uint48 numCheckpoint = _numCheckpoints[_delegatee];\\n        IVotingEscrow.Checkpoint storage cpOld = numCheckpoint > 0\\n            ? _checkpoints[_delegatee][numCheckpoint - 1]\\n            : _checkpoints[_delegatee][0];\\n        IVotingEscrow.Checkpoint storage cp = _checkpoints[_delegatee][\\n            numCheckpoint\\n        ];\\n        cp.fromTimestamp = block.timestamp;\\n        cp.owner = cpOld.owner;\\n        // do not expect balance_ > cpOld.delegatedBalance when decrementing but just in case\\n        cp.delegatedBalance = _increase\\n            ? cpOld.delegatedBalance + balance_\\n            : (\\n                balance_ < cpOld.delegatedBalance\\n                    ? cpOld.delegatedBalance - balance_\\n                    : 0\\n            );\\n        cp.delegatee = cpOld.delegatee;\\n\\n        if (\\n            _isCheckpointInNewBlock(_numCheckpoints, _checkpoints, _delegatee)\\n        ) {\\n            _numCheckpoints[_delegatee]++;\\n        } else {\\n            _checkpoints[_delegatee][numCheckpoint - 1] = cp;\\n            delete _checkpoints[_delegatee][numCheckpoint];\\n        }\\n    }\\n\\n    function _isCheckpointInNewBlock(\\n        mapping(uint256 => uint48) storage _numCheckpoints,\\n        mapping(uint256 => mapping(uint48 => IVotingEscrow.Checkpoint))\\n            storage _checkpoints,\\n        uint256 _tokenId\\n    ) internal view returns (bool) {\\n        uint48 _nCheckPoints = _numCheckpoints[_tokenId];\\n\\n        if (\\n            _nCheckPoints > 0 &&\\n            _checkpoints[_tokenId][_nCheckPoints - 1].fromTimestamp ==\\n            block.timestamp\\n        ) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Binary search to get the voting checkpoint for a token id at or prior to a given timestamp.\\n    /// @dev If a checkpoint does not exist prior to the timestamp, this will return 0.\\n    /// @param _numCheckpoints State of all user checkpoint counts\\n    /// @param _checkpoints State of all user checkpoints\\n    /// @param _tokenId .\\n    /// @param _timestamp .\\n    /// @return The index of the checkpoint.\\n    function getPastVotesIndex(\\n        mapping(uint256 => uint48) storage _numCheckpoints,\\n        mapping(uint256 => mapping(uint48 => IVotingEscrow.Checkpoint))\\n            storage _checkpoints,\\n        uint256 _tokenId,\\n        uint256 _timestamp\\n    ) internal view returns (uint48) {\\n        uint48 nCheckpoints = _numCheckpoints[_tokenId];\\n        if (nCheckpoints == 0) return 0;\\n        // First check most recent balance\\n        if (\\n            _checkpoints[_tokenId][nCheckpoints - 1].fromTimestamp <= _timestamp\\n        ) return (nCheckpoints - 1);\\n        // Next check implicit zero balance\\n        if (_checkpoints[_tokenId][0].fromTimestamp > _timestamp) return 0;\\n\\n        uint48 lower = 0;\\n        uint48 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint48 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            IVotingEscrow.Checkpoint storage cp = _checkpoints[_tokenId][\\n                center\\n            ];\\n            if (cp.fromTimestamp == _timestamp) {\\n                return center;\\n            } else if (cp.fromTimestamp < _timestamp) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return lower;\\n    }\\n\\n    /// @notice Retrieves historical voting balance for a token id at a given timestamp.\\n    /// @dev If a checkpoint does not exist prior to the timestamp, this will return 0.\\n    ///      The user must also own the token at the time in order to receive a voting balance.\\n    /// @param _numCheckpoints State of all user checkpoint counts\\n    /// @param _checkpoints State of all user checkpoints\\n    /// @param _account .\\n    /// @param _tokenId .\\n    /// @param _timestamp .\\n    /// @return Total voting balance including delegations at a given timestamp.\\n    function getPastVotes(\\n        mapping(uint256 => uint48) storage _numCheckpoints,\\n        mapping(uint256 => mapping(uint48 => IVotingEscrow.Checkpoint))\\n            storage _checkpoints,\\n        address _account,\\n        uint256 _tokenId,\\n        uint256 _timestamp\\n    ) external view returns (uint256) {\\n        uint48 _checkIndex = getPastVotesIndex(\\n            _numCheckpoints,\\n            _checkpoints,\\n            _tokenId,\\n            _timestamp\\n        );\\n        IVotingEscrow.Checkpoint memory lastCheckpoint = _checkpoints[_tokenId][\\n            _checkIndex\\n        ];\\n        // If no point exists prior to the given timestamp, return 0\\n        if (lastCheckpoint.fromTimestamp > _timestamp) return 0;\\n        // Check ownership\\n        if (_account != lastCheckpoint.owner) return 0;\\n        uint256 votes = lastCheckpoint.delegatedBalance;\\n        return\\n            lastCheckpoint.delegatee == 0\\n                ? votes +\\n                    IVotingEscrow(address(this)).balanceOfNFTAt(\\n                        _tokenId,\\n                        _timestamp\\n                    )\\n                : votes;\\n    }\\n}\\n\",\"keccak256\":\"0xf93196d208e09989ddb99d8637f5b2f420a49f58426c8065f5b776d46a0eca1e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/SafeCastLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.24;\\n\\n/// @title SafeCast Library\\n/// @author velodrome.finance\\n/// @notice Safely convert unsigned and signed integers without overflow / underflow\\nlibrary SafeCastLibrary {\\n    error SafeCastOverflow();\\n    error SafeCastUnderflow();\\n\\n    /// @dev Safely convert uint256 to int128\\n    function toInt128(uint256 value) internal pure returns (int128) {\\n        if (value > uint128(type(int128).max)) revert SafeCastOverflow();\\n        return int128(uint128(value));\\n    }\\n\\n    /// @dev Safely convert int128 to uint256\\n    function toUint256(int128 value) internal pure returns (uint256) {\\n        if (value < 0) revert SafeCastUnderflow();\\n        return uint256(int256(value));\\n    }\\n}\\n\",\"keccak256\":\"0xfc419390f2423ffa802e9a3a11ee859b01fee9ffdb0fca855008d6b7d6b25bd6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620062f0380380620062f083398101604081905262000035916200026c565b6001600160a01b038084166080819052600160005560a05280831660e052811660c0528282826200006562000227565b600380546001600160a01b0319166001600160a01b03929092169190911790556200008f62000227565b600280546001600160a01b0319166001600160a01b0392909216919091179055437f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4fa55427f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f95560076020527f1142c8ae8ad77901cd97fce843895a9ccf91a8cbd5b191350a94c1d957b07f74805460ff1990811660019081179092557f2379132be4428a30bdcf8f40c0757cba23c7e3f4204cd933dabcc3d42093e80480548216831790557f7108cf076693445f3e0461801864e91d74eb5e0eee196ef60b5961a16cd35b9380548216831790557fbc48a5b87e2e2cb168c956e8aca8ee5c5d50c657bb1c18b9ad30280d5cf98f5b805482168317905563da287a1d60e01b60009081527f7105fc4c24d760d461c0883f925f50b55888872394b962f52e936e529601d62a8054909216909217905560085460405190913091600080516020620062d0833981519152908290a46008546040516000903090600080516020620062d0833981519152908390a4505050505050620002b6565b6080516000906001600160a01b031633036200024a575060131936013560601c90565b503390565b80516001600160a01b03811681146200026757600080fd5b919050565b6000806000606084860312156200028257600080fd5b6200028d846200024f565b92506200029d602085016200024f565b9150620002ad604085016200024f565b90509250925092565b60805160a05160c05160e051615faf6200032160003960008181610d29015281816112210152818161175a0152818161182601528181613f3e0152614e670152600081816106d70152611f97015260008181610d02015261202a015260006126080152615faf6000f3fe608060405234801561001057600080fd5b50600436106104805760003560e01c806370a0823111610257578063b45a3c0e11610146578063e58f5947116100c3578063ec32e6df11610087578063ec32e6df14610c65578063f04cb3a814610c78578063f52a36f714610cc7578063f645d4f914610cfd578063fc0c546a14610d2457600080fd5b8063e58f594714610bbc578063e75b1c2e14610bdc578063e7a324dc14610bef578063e7e242d414610c16578063e985e9c514610c2957600080fd5b8063c87b56dd1161010a578063c87b56dd14610b5d578063d1c2babb14610b70578063d9a3495214610b83578063e0514aba14610b96578063e0c11f9a14610ba957600080fd5b8063b45a3c0e14610a94578063b52c05fe14610b1c578063b88d4fde14610b2f578063bfe1092814610b42578063c2c4c5c114610b5557600080fd5b806391ddadf4116101d4578063a22cb46511610198578063a22cb46514610a02578063a738da8214610a15578063a899b36c14610a3e578063b1548afc14610a61578063b2383e5514610a8157600080fd5b806391ddadf4146109d657806395d89b41146104de578063981b24d0146109975780639954a989146109dc5780639d507b8b146109ef57600080fd5b80638ad4c4471161021b5780638ad4c447146109595780638bf9d84c1461096c5780638e539e8c146109975780638fbb38ff146109aa578063900cf0cf146109cd57600080fd5b806370a08231146108ba5780637c728000146108e35780637ecebe0014610913578063834b0b691461093357806385f2aef21461094657600080fd5b8063370fb5fa116103735780634bf5d7e9116102f057806354fd4d50116102b457806354fd4d501461084d5780635594a0451461086e578063572b6c05146108815780635a4f459a146108945780636352211e146108a757600080fd5b80634bf5d7e91461079d5780634d01cb66146107c75780634d6fb775146107d057806350589793146107e3578063515857d41461082257600080fd5b806342842e0e1161033757806342842e0e1461071c578063430c20811461072f57806344acb42a1461074257806346c96aac146107625780634b19becc1461077557600080fd5b8063370fb5fa1461069957806337b1f500146106ac5780633a6396a5146106bf5780633bf0c9fb146106d25780633d085a37146106f957600080fd5b806320606b70116104015780632e720f7d116103c55780632e720f7d1461063e5780632f7f9ba914610651578063313ce5671461066457806333230dc01461067357806335b0f6bd1461068657600080fd5b806320606b70146105b557806323b872dd146105dc57806327a6ee98146105ef5780632d0485ec146106185780632e1a7d4d1461062b57600080fd5b8063095ea7b311610448578063095ea7b31461055e5780630ec84dda1461057157806317d70f7c1461058457806318160ddd1461058d57806319a0a9d51461059557600080fd5b806301ffc9a714610485578063047fc9aa146104c757806306fdde03146104de578063081812fc14610508578063095cf5c614610549575b600080fd5b6104b261049336600461573b565b6001600160e01b03191660009081526007602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6104d060175481565b6040519081526020016104be565b604080518082019091526005815264766542544360d81b60208201525b6040516104be91906157a8565b6105316105163660046157bb565b6000908152601160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016104be565b61055c6105573660046157e9565b610d4b565b005b61055c61056c366004615806565b610dcf565b61055c61057f366004615832565b610f10565b6104d060085481565b6104d0610f9d565b6104d06105a33660046157bb565b600a6020526000908152604090205481565b6104d07f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61055c6105ea366004615854565b610fad565b6105316105fd3660046157bb565b600e602052600090815260409020546001600160a01b031681565b61055c610626366004615895565b610fc5565b61055c6106393660046157bb565b61102e565b61055c61064c3660046157e9565b6112e2565b600554610531906001600160a01b031681565b604051601281526020016104be565b61055c6106813660046158dc565b611376565b61055c6106943660046157bb565b6113dc565b61055c6106a73660046157bb565b61164b565b61055c6106ba36600461590a565b611c4e565b6104d06106cd3660046157e9565b611e34565b6105317f000000000000000000000000000000000000000000000000000000000000000081565b6104b26107073660046157e9565b601c6020526000908152604090205460ff1681565b61055c61072a366004615854565b612136565b6104b261073d366004615806565b612151565b610755610750366004615832565b612166565b6040516104be919061592f565b600254610531906001600160a01b031681565b610788610783366004615832565b6121e4565b604080519283526020830191909152016104be565b60408051808201909152600e81526d06d6f64653d74696d657374616d760941b60208201526104fb565b6104d0601d5481565b6104d06107de36600461596e565b612561565b61080b6107f13660046157bb565b60216020526000908152604090205465ffffffffffff1681565b60405165ffffffffffff90911681526020016104be565b6104d0610830366004615832565b600b60209081526000928352604080842090915290825290205481565b6040805180820190915260058152640312e302e360dc1b60208201526104fb565b600454610531906001600160a01b031681565b6104b261088f3660046157e9565b612606565b61055c6108a236600461590a565b612638565b6105316108b53660046157bb565b612693565b6104d06108c83660046157e9565b6001600160a01b031660009081526010602052604090205490565b6109066108f13660046157bb565b60096020526000908152604090205460ff1681565b6040516104be91906159b9565b6104d06109213660046157e9565b60226020526000908152604090205481565b61055c6109413660046159e1565b61269e565b600354610531906001600160a01b031681565b6107556109673660046157bb565b6129df565b6104d061097a366004615806565b601460209081526000928352604080842090915290825290205481565b6104d06109a53660046157bb565b612a70565b6104b26109b83660046157bb565b601e6020526000908152604090205460ff1681565b6104d060165481565b4261080b565b61055c6109ea3660046157e9565b612a7b565b61055c6109fd366004615832565b612bca565b61055c610a103660046158dc565b612d9e565b610531610a233660046157bb565b600d602052600090815260409020546001600160a01b031681565b6104b2610a4c3660046157bb565b600c6020526000908152604090205460ff1681565b6104d0610a6f3660046157bb565b6000908152601f602052604090205490565b61055c610a8f366004615832565b612e49565b610af5610aa23660046157bb565b6040805160608082018352600080835260208084018290529284018190529384526018825292829020825193840183528054600f0b84526001810154918401919091526002015460ff1615159082015290565b604080518251600f0b815260208084015190820152918101511515908201526060016104be565b6104d0610b2a366004615832565b612e85565b61055c610b3d366004615ab5565b612ead565b600154610531906001600160a01b031681565b61055c612fd0565b6104fb610b6b3660046157bb565b613022565b61055c610b7e366004615832565b6130c5565b61055c610b91366004615832565b613524565b6104d0610ba4366004615832565b613556565b61055c610bb7366004615832565b613562565b6104d0610bca3660046157bb565b601a6020526000908152604090205481565b61055c610bea3660046157bb565b613a1f565b6104d07f9947d5709c1682eaa3946b2d84115c9c0d1c946b149d76e69b457458b42ea29e81565b6104d0610c243660046157bb565b613c4e565b6104b2610c37366004615895565b6001600160a01b03918216600090815260126020908152604080832093909416825291909152205460ff1690565b6104d0610c73366004615b64565b613c76565b610c8b610c86366004615b9d565b613c97565b6040516104be9190815181526020808301516001600160a01b031690820152604080830151908201526060918201519181019190915260800190565b610cea610cd53660046157bb565b601b60205260009081526040902054600f0b81565b604051600f9190910b81526020016104be565b6105317f000000000000000000000000000000000000000000000000000000000000000081565b6105317f000000000000000000000000000000000000000000000000000000000000000081565b6003546001600160a01b0316610d5f613d28565b6001600160a01b031614610d8657604051633a7cfa5d60e21b815260040160405180910390fd5b6001600160a01b038116610dad5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610dd9613d28565b90506000610de683613d4a565b90506001600160a01b038116610e0f5760405163d92e233d60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031603610e415760405163367558c360e01b815260040160405180910390fd5b6000826001600160a01b0316610e5685613d4a565b6001600160a01b0384811660009081526012602090815260408083208985168452909152902054911691909114915060ff16811582610e93575080155b15610eb15760405163390cdd9b60e21b815260040160405180910390fd5b60008581526011602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918716917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b610f18613d65565b600260008381526009602052604090205460ff166002811115610f3d57610f3d6159a3565b148015610f6557506001546001600160a01b0316610f59613d28565b6001600160a01b031614155b15610f835760405163385296d560e01b815260040160405180910390fd5b610f8f82826000613dc3565b610f996001600055565b5050565b6000610fa84261400c565b905090565b610fc0838383610fbb613d28565b61409c565b505050565b6002546001600160a01b0316610fd9613d28565b6001600160a01b0316146110005760405163c18384c160e01b815260040160405180910390fd5b600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055565b611036613d65565b6000611040613d28565b905061104c81836141b8565b6110695760405163390cdd9b60e21b815260040160405180910390fd5b6000828152601e602052604090205460ff161561109957604051637c9a1cf960e01b815260040160405180910390fd5b60008281526009602052604081205460ff1660028111156110bc576110bc6159a3565b146110da576040516317a66f3760e01b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff161580159282019290925290611136576040516334d10f9560e11b815260040160405180910390fd5b806020015142101561115b5760405163342ad40160e11b815260040160405180910390fd5b600061116d8260000151600f0b614222565b90506111788461424e565b6040805160608101825260008082526020808301828152838501838152898452601890925293909120915182546001600160801b0319166001600160801b039091161782559151600182015590516002909101805460ff19169115159190911790556017546111e78282615be3565b601755604080516060810182526000808252602082018190529181019190915261121490869085906142ec565b6112486001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584614ab5565b6040805183815242602082015286916001600160a01b038716917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94910160405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c816112b98482615be3565b6040805192835260208301919091520160405180910390a1505050506112df6001600055565b50565b6003546001600160a01b03166112f6613d28565b6001600160a01b03161461131d57604051633a7cfa5d60e21b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b038316179055604080516000815260001960208201527f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c910160405180910390a150565b6003546001600160a01b031661138a613d28565b6001600160a01b0316146113b157604051633a7cfa5d60e21b815260040160405180910390fd5b6001600160a01b03919091166000908152601c60205260409020805460ff1916911515919091179055565b60006113e6613d28565b90506113f281836141b8565b61140f5760405163390cdd9b60e21b815260040160405180910390fd5b60008281526009602052604081205460ff166002811115611432576114326159a3565b14611450576040516317a66f3760e01b815260040160405180910390fd5b6000828152601e602052604090205460ff161561148057604051637c9a1cf960e01b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff161515918101829052906114da57604051632188f8ab60e01b815260040160405180910390fd5b60006114ec8260000151600f0b614222565b905080601d60008282546115009190615be3565b9091555062093a80905080611519630784ce0042615bf6565b6115239190615c1f565b61152d9190615c33565b6020830152600060408301819052611546908590614b0b565b60008481526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff1615159181019190915261158f908590846142ec565b600084815260186020908152604091829020845181546001600160801b0319166001600160801b03909116178155848201516001820155848301516002909101805460ff19169115159190911790558151838152429181019190915285916001600160a01b038616917f668d293c0a181c1f163fd0d3c757239a9c17bd26c5e483150e374455433b27fa91015b60405180910390a3604051848152600080516020615f5a8339815191529060200160405180910390a150505050565b611653613d65565b6000818152600a60205260409020546002546001600160a01b0316611676613d28565b6001600160a01b03161461169d5760405163c18384c160e01b815260040160405180910390fd5b806000036116be5760405163d7caa26160e01b815260040160405180910390fd5b600160008381526009602052604090205460ff1660028111156116e3576116e36159a3565b1461170157604051630fd82f7760e11b815260040160405180910390fd5b6000818152600d6020908152604080832054600e835281842054868552600b8452828520868652909352818420549151633e491d4760e01b81526001600160a01b039182169491909316928490633e491d4790611784907f0000000000000000000000000000000000000000000000000000000000000000908a90600401615c4a565b602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190615c63565b905060006117d38284615bf6565b9050600062093a80806117ea630784ce0042615bf6565b6117f49190615c1f565b6117fe9190615c33565b60408051600180825281830190925291925060009190602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061185857611858615c7c565b6001600160a01b03928316602091820292909201015260405163f5f8d36560e01b81529088169063f5f8d36590611895908c908590600401615c92565b600060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b50505050600060405180606001604052806118dd86614c73565b600f90810b82526020808301879052600060409384018190528e8152601882528390208351606081018552815490930b83526001810154918301919091526002015460ff1615159181019190915290915061193a908b90836142ec565b60008a8152601860209081526040808320845181546001600160801b0319166001600160801b0390911617815584830151600180830191909155858301516002928301805460ff19169115159190911790558d85529382902082516060810184528154600f0b8082529582015494810194909452015460ff16151590820152906119c386614c73565b600f0b126119d25780516119db565b6119db85614c73565b815182906119ea908390615ceb565b600f0b905250601d548510611a0157601d54611a03565b845b601d6000828254611a149190615be3565b909155505060008a8152601f6020526040812054611a33918790614ca1565b60008a81526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff16151591810191909152611a7c908b90836142ec565b60008a815260186020908152604091829020835181546001600160801b0319166001600160801b03909116178155908301516001820155828201516002909101805460ff19169115159190911790555163278afc8b60e21b815260048101889052602481018c90526001600160a01b038a1690639e2bf22c90604401600060405180830381600087803b158015611b1257600080fd5b505af1158015611b26573d6000803e3d6000fd5b505060405163278afc8b60e21b8152600481018a9052602481018e90526001600160a01b038b169250639e2bf22c9150604401600060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b50505060008c8152600a60209081526040808320839055600b82528083208e845282528083208390558e835260099091529020805460ff1916905550898b611bce81613d4a565b6001600160a01b03167f5319474ec1e9d118585a40e615ea37be254007e6bb5b039756c3813c2d1354898842604051611c11929190918252602082015260400190565b60405180910390a46040518b8152600080516020615f5a8339815191529060200160405180910390a1505050505050505050506112df6001600055565b600260009054906101000a90046001600160a01b03166001600160a01b0316637778960e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190615d18565b6001600160a01b0316611cd6613d28565b6001600160a01b031614158015611d7c5750600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5f9190615d18565b6001600160a01b0316611d70613d28565b6001600160a01b031614155b15611d9a5760405163459d6a3f60e01b815260040160405180910390fd5b600260008381526009602052604090205460ff166002811115611dbf57611dbf6159a3565b14611ddd5760405163054b1e0160e51b815260040160405180910390fd5b6000828152600c602052604090205481151560ff909116151503611e1457604051631490ad1160e01b815260040160405180910390fd5b6000918252600c6020526040909120805460ff1916911515919091179055565b6000611e3e613d65565b6000611e48613d28565b6005549091506001600160a01b03808316911614801590611ef15750600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edb9190615d18565b6001600160a01b0316816001600160a01b031614155b15611f0f57604051633bc1d15f60e01b815260040160405180910390fd5b600860008154611f1e90615d35565b91829055509150611f2f8383614d1e565b50611f618260008060405180606001604052806000600f0b815260200160008152602001600115158152506001614d7b565b6000828152600960209081526040808320805460ff1916600217905580516301a15ccf60e31b8152905183926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692630d0ae67892600480830193928290030181865afa158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190615d18565b60025460405163dabc8e8360e01b81526001600160a01b039283169263dabc8e8392612056927f00000000000000000000000000000000000000000000000000000000000000009290911690600401615d4e565b60408051808303816000875af1158015612074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120989190615d68565b6000868152600d6020908152604080832080546001600160a01b038088166001600160a01b031992831617909255600e909352928190208054848616931692909217909155519294509092508481169186918816907fae65a147ec014982132ce8b32019735e3c5f41457848d2ce2e2c3e0cbc9df7bc9061211c9087908790615d4e565b60405180910390a45050506121316001600055565b919050565b610fc083838360405180602001604052806000815250612ead565b600061215d83836141b8565b90505b92915050565b61216e6156f0565b600083815260196020526040902082633b9aca00811061219057612190615c7c565b6040805160a081018252600492909202929092018054600f81810b8452600160801b909104900b60208301526001810154928201929092526002820154606082015260039091015460808201529392505050565b6000806121ef613d65565b60006121f9613d28565b9050600061220686613d4a565b90506001600160a01b03811661222f57604051632c2151ef60e11b815260040160405180910390fd5b6001600160a01b0381166000908152601c602052604090205460ff16158015612283575060008052601c6020527fb9c6de81004e18dedadca3e5eabaab449ca91dff6f58efc9461da635fe77f8495460ff16155b156122a157604051633df16fd960e21b815260040160405180910390fd5b60008681526009602052604081205460ff1660028111156122c4576122c46159a3565b146122e2576040516317a66f3760e01b815260040160405180910390fd5b6000868152601e602052604090205460ff161561231257604051637c9a1cf960e01b815260040160405180910390fd5b61231c82876141b8565b6123395760405163390cdd9b60e21b815260040160405180910390fd5b60008681526018602090815260409182902082516060810184528154600f0b8152600182015492810183905260029091015460ff16151592810192909252421080159061238857508060400151155b156123a6576040516307b7d7dd60e51b815260040160405180910390fd5b60006123b187614c73565b905080600f0b6000036123d757604051631f2a200560e01b815260040160405180910390fd5b80600f0b8260000151600f0b1361240157604051636b2f218360e01b815260040160405180910390fd5b61240a8861424e565b6040805160608082018352600080835260208084018281528486018381528e845260188352868420955186546001600160801b0319166001600160801b0390911617865590516001860155516002909401805460ff191694151594909417909355835191820184528082529181018290529182015261248c90899084906142ec565b808260000181815161249e9190615ceb565b600f0b9052506124ae8383614f40565b600f82900b835295506124c18383614f40565b600087815260186020526040902054909550859087908a907f8303de8187a6102fdc3fe20c756dddd68df0ae027b77e2391c19a855e0821f3390889061250990600f0b614222565b61251587600f0b614222565b6020808a0151604080516001600160a01b03909616865291850193909352830152606082015242608082015260a00160405180910390a45050505061255a6001600055565b9250929050565b6040516332b53f5360e11b815260216004820152602060248201526001600160a01b03841660448201526064810183905260848101829052600090735E9b95a2CD162382fDF7adb6D3Db03cfb708CbA19063656a7ea69060a401602060405180830381865af41580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc9190615c63565b90505b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b6002546001600160a01b031661264c613d28565b6001600160a01b0316146126735760405163c18384c160e01b815260040160405180910390fd5b6000918252601e6020526040909120805460ff1916911515919091179055565b600061216082613d4a565b6fa2a8918ca85bafe22016d0b997e4df60600160ff1b038111156126d5576040516317e97eb760e31b815260040160405180910390fd5b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866306001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015612736573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261275e9190810190615d97565b80519060200120306001600160a01b03166354fd4d506040518163ffffffff1660e01b8152600401600060405180830381865afa1580156127a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127cb9190810190615d97565b805160209182012060408051808401959095528481019390935260608401524660808401523060a0808501919091528251808503909101815260c0840183528051908201207f9947d5709c1682eaa3946b2d84115c9c0d1c946b149d76e69b457458b42ea29e60e085015261010084018c905261012084018b905261014084018a90526101608085018a90528351808603909101815261018085019093528251929091019190912061190160f01b6101a08401526101a283018290526101c28301819052909250906000906101e20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015612905573d6000803e3d6000fd5b50505060206040510351905061291b818c6141b8565b6129385760405163390cdd9b60e21b815260040160405180910390fd5b6001600160a01b03811661295f57604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038116600090815260226020526040812080549161298383615d35565b9190505589146129a657604051633ab3447f60e11b815260040160405180910390fd5b874211156129c757604051630819bdcd60e01b815260040160405180910390fd5b6129d18b8b614b0b565b505050505b50505050505050565b612a176040518060a001604052806000600f0b81526020016000600f0b81526020016000815260200160008152602001600081525090565b50600090815260066020908152604091829020825160a0810184528154600f81810b8352600160801b909104900b9281019290925260018101549282019290925260028201546060820152600390910154608082015290565b60006121608261400c565b600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af29190615d18565b6001600160a01b0316612b03613d28565b6001600160a01b031614612b2a57604051633b8d9d7560e21b815260040160405180910390fd5b6005546001600160a01b0390811690821603612b595760405163367558c360e01b815260040160405180910390fd5b6001600160a01b038116612b805760405163d92e233d60e01b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f1a6ce72407c68def4b7d2e724c896070d89cf2b2a2dd56b6897b5febd88420f590600090a250565b612bd2613d65565b612be3612bdd613d28565b836141b8565b612c005760405163390cdd9b60e21b815260040160405180910390fd5b60008281526009602052604081205460ff166002811115612c2357612c236159a3565b14612c41576040516317a66f3760e01b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff161580159282019290925290612c9d576040516334d10f9560e11b815260040160405180910390fd5b600062093a8080612cae8542615bf6565b612cb89190615c1f565b612cc29190615c33565b905042826020015111612ce8576040516307b7d7dd60e51b815260040160405180910390fd5b60008260000151600f0b13612d105760405163f90e998d60e01b815260040160405180910390fd5b81602001518111612d3457604051638e6b5b6760e01b815260040160405180910390fd5b612d42630784ce0042615bf6565b811115612d625760405163f761f1cd60e01b815260040160405180910390fd5b612d7184600083856003614d7b565b604051848152600080516020615f5a8339815191529060200160405180910390a15050610f996001600055565b6000612da8613d28565b9050806001600160a01b0316836001600160a01b031603612ddc5760405163367558c360e01b815260040160405180910390fd5b6001600160a01b03818116600081815260126020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612e51613d65565b612e5c612bdd613d28565b612e795760405163390cdd9b60e21b815260040160405180910390fd5b610f8f82826002613dc3565b6000612e8f613d65565b612ea18383612e9c613d28565b614fdb565b90506121606001600055565b6000612eb7613d28565b9050612ec58585858461409c565b833b15612fc957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612efe908490899088908890600401615e05565b6020604051808303816000875af1925050508015612f39575060408051601f3d908101601f19168201909252612f3691810190615e42565b60015b612f96573d808015612f67576040519150601f19603f3d011682016040523d82523d6000602084013e612f6c565b606091505b508051600003612f8e57604051626b5e2960e61b815260040160405180910390fd5b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14612fc75760405163279929b160e21b815260040160405180910390fd5b505b5050505050565b612fd8613d65565b6040805160608082018352600080835260208084018290528385018290528451928301855281835282018190529281018390526130169291906142ec565b6130206001600055565b565b6060600061302f83613d4a565b6001600160a01b03160361305657604051634a1850bf60e11b815260040160405180910390fd5b6004805460405163c87b56dd60e01b81529182018490526001600160a01b03169063c87b56dd90602401600060405180830381865afa15801561309d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121609190810190615d97565b6130cd613d65565b60006130d7613d28565b6000848152601e602052604090205490915060ff161561310a57604051637c9a1cf960e01b815260040160405180910390fd5b60008381526009602052604081205460ff16600281111561312d5761312d6159a3565b1461314b576040516317a66f3760e01b815260040160405180910390fd5b60008281526009602052604081205460ff16600281111561316e5761316e6159a3565b1461318c576040516317a66f3760e01b815260040160405180910390fd5b8183036131ac576040516349da877960e11b815260040160405180910390fd5b6131b681846141b8565b6131d35760405163390cdd9b60e21b815260040160405180910390fd5b6131dd81836141b8565b6131fa5760405163390cdd9b60e21b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b8152600182015492810183905260029091015460ff16151592810192909252421080159061324957508060400151155b15613267576040516307b7d7dd60e51b815260040160405180910390fd5b60008481526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff1615801592820192909252906132c3576040516334d10f9560e11b815260040160405180910390fd5b60008260200151826020015110156132df5782602001516132e5565b81602001515b90506132f08661424e565b6040805160608082018352600080835260208084018281528486018381528c845260188352868420955186546001600160801b0319166001600160801b0390911617865590516001860155516002909401805460ff191694151594909417909355835191820184528082529181018290529182015261337290879084906142ec565b60408051606081018252600080825260208201819052918101919091528251845161339d9190615e5f565b600f0b8152604080850151158015918301919091526133e05782516133c490600f0b614222565b601d60008282546133d59190615bf6565b909155506133e89050565b602081018290525b6000868152601f60205260409020548351613411919061340a90600f0b614222565b6001614ca1565b61341c8685836142ec565b600086815260186020908152604091829020835181546001600160801b0319166001600160801b03909116178155908301516001820155908201516002909101805460ff19169115159190911790558251869088906001600160a01b038816907f986e3c958e3bdf1f58c2150357fc94624dd4e77b08f9802d8e2e885fa0d6a198906134aa90600f0b614222565b88516134b890600f0b614222565b86516134c690600f0b614222565b6020808901516040805195865291850193909352830152606082015242608082015260a00160405180910390a4604051868152600080516020615f5a833981519152906020015b60405180910390a15050505050610f996001600055565b61352f612bdd613d28565b61354c5760405163390cdd9b60e21b815260040160405180910390fd5b610f998282614b0b565b600061215d83836150ed565b61356a613d65565b6002546001600160a01b031661357e613d28565b6001600160a01b0316146135a55760405163c18384c160e01b815260040160405180910390fd5b600260008281526009602052604090205460ff1660028111156135ca576135ca6159a3565b146135e85760405163054b1e0160e51b815260040160405180910390fd5b60008281526009602052604081205460ff16600281111561360b5761360b6159a3565b14613629576040516317a66f3760e01b815260040160405180910390fd5b61363382426150ed565b6000036136535760405163334ab3f560e11b815260040160405180910390fd5b60008281526018602052604090208054600290910154600f9190910b9060ff16156136a65761368481600f0b614222565b601d60008282546136959190615be3565b909155506136a69050836000614b0b565b60008381526018602090815260408083208151606080820184528254600f0b825260018301548286015260029092015460ff161515818401528251918201835284825292810184905290810192909252613702918591906142ec565b60408051606081018252600080825260208083018281528385018381528884526018909252938220925183546001600160801b0319166001600160801b039091161783559251600183015591516002909101805460ff1916911515919091179055613770600f83900b614222565b905080601d60008282546137849190615bf6565b909155505060008381526018602090815260409182902082516060810184528154600f0b80825260018301549382019390935260029091015460ff16151592810192909252839082906137d8908390615e5f565b600f0b9052506000848152601f60205260409020546137f990836001614ca1565b60008481526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff16151591810191909152613842908590836142ec565b6000848152601860209081526040808320845181546001600160801b0319166001600160801b0390911617815584830151600180830191909155858301516002909201805460ff19908116931515939093179055898552600b84528285208986528452828520879055898552600a8452828520899055600984528285208054909216179055868352600d9091529081902054905163f320772360e01b815260048101849052602481018790526001600160a01b0390911690819063f320772390604401600060405180830381600087803b15801561391f57600080fd5b505af1158015613933573d6000803e3d6000fd5b5050506000868152600e60205260409081902054905163f320772360e01b815260048101869052602481018990526001600160a01b039091169150819063f320772390604401600060405180830381600087803b15801561399357600080fd5b505af11580156139a7573d6000803e3d6000fd5b5050505085876139b689613d4a565b6001600160a01b03167ff7757ce35992f4ee014dee2e0c97ed6245758960a6ecc9e124897a5fb7b0142387426040516139f9929190918252602082015260400190565b60405180910390a4604051878152600080516020615f5a8339815191529060200161350d565b6000613a29613d28565b9050613a3581836141b8565b613a525760405163390cdd9b60e21b815260040160405180910390fd5b60008281526009602052604081205460ff166002811115613a7557613a756159a3565b14613a93576040516317a66f3760e01b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff161580159282019290925290613aef576040516334d10f9560e11b815260040160405180910390fd5b42816020015111613b13576040516307b7d7dd60e51b815260040160405180910390fd5b60008160000151600f0b13613b3b5760405163f90e998d60e01b815260040160405180910390fd5b6000613b4d8260000151600f0b614222565b905080601d6000828254613b619190615bf6565b90915550506000602080840182905260016040808601829052878452601883529283902083516060810185528154600f0b8152918101549282019290925260029091015460ff16151591810191909152613bbd908590846142ec565b600084815260186020908152604091829020845181546001600160801b0319166001600160801b03909116178155848201516001820155848301516002909101805460ff19169115159190911790558151838152429181019190915285916001600160a01b038616917f793cb7a30a4bb8669ec607dfcbdc93f5a3e9d282f38191fddab43ccaf79efb80910161161c565b600081815260136020526040812054439003613c6c57506000919050565b61216082426150ed565b6000613c80613d65565b613c8b848484614fdb565b90506125ff6001600055565b613ccb60405180608001604052806000815260200160006001600160a01b0316815260200160008152602001600081525090565b5060009182526020808052604080842065ffffffffffff9390931684529181529181902081516080810183528154815260018201546001600160a01b03169381019390935260028101549183019190915260030154606082015290565b6000613d3333612606565b15613d45575060131936013560601c90565b503390565b6000908152600f60205260409020546001600160a01b031690565b600260005403613dbc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055565b60008381526009602052604090205460ff166001816002811115613de957613de96159a3565b03613e0757604051635eb32db160e11b815260040160405180910390fd5b600084815260186020908152604080832081516060810183528154600f0b81526001820154938101939093526002015460ff1615159082015290849003613e6157604051631f2a200560e01b815260040160405180910390fd5b60008160000151600f0b13613e895760405163f90e998d60e01b815260040160405180910390fd5b42816020015111158015613e9f57508060400151155b15613ebd576040516307b7d7dd60e51b815260040160405180910390fd5b806040015115613edf5783601d6000828254613ed99190615bf6565b90915550505b6000858152601f6020526040902054613efa90856001614ca1565b613f08858560008487614d7b565b6002826002811115613f1c57613f1c6159a3565b03613fe4576000858152600d60205260409020546001600160a01b03908116907f000000000000000000000000000000000000000000000000000000000000000090613f6b9082168388615179565b60405163b66503cf60e01b81526001600160a01b0383169063b66503cf90613f999084908a90600401615c4a565b600060405180830381600087803b158015613fb357600080fd5b505af1158015613fc7573d6000803e3d6000fd5b50613fe1925050506001600160a01b038216836000615179565b50505b604051858152600080516020615f5a8339815191529060200160405180910390a15050505050565b601654604051637259b01960e01b8152601b60048201526006602482015260448101919091526064810182905260009073f6a1CA09e39B32F2D090C0088510f15fcCE5064890637259b01990608401602060405180830381865af4158015614078573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121609190615c63565b600160008381526009602052604090205460ff1660028111156140c1576140c16159a3565b036140df57604051635eb32db160e11b815260040160405180910390fd5b6140e981836141b8565b6141065760405163390cdd9b60e21b815260040160405180910390fd5b836001600160a01b031661411983613d4a565b6001600160a01b031614614140576040516330cd747160e01b815260040160405180910390fd5b600082815260116020526040902080546001600160a01b0319169055614166848361527c565b614172826000856152fd565b61417c8383615367565b6000828152601360205260408082204390555183916001600160a01b038087169290881691600080516020615f3a83398151915291a450505050565b6000806141c483613d4a565b6000848152601160209081526040808320546001600160a01b0380861680865260128552838620828c1680885295529290942054949550908214939216149060ff16828061420f5750815b806142175750805b979650505050505050565b60008082600f0b12156142475760405162406f5d60e21b815260040160405180910390fd5b50600f0b90565b6000614258613d28565b905061426481836141b8565b6142815760405163390cdd9b60e21b815260040160405180910390fd5b600061428c83613d4a565b600084815260116020526040812080546001600160a01b03191690559091506142b7908490806152fd565b6142c1818461527c565b60405183906000906001600160a01b03841690600080516020615f3a833981519152908390a4505050565b6142f46156f0565b6142fc6156f0565b6016546000908190871561444f57856040015161431a576000614328565b855161432890600f0b614222565b6080850152602087015142108015614347575060008760000151600f0b135b1561439557865161435d90630784ce0090615e8c565b600f0b6020808701919091528701516143809061437b904290615be3565b614c73565b856020015161438f9190615eca565b600f0b85525b4286602001511180156143af575060008660000151600f0b135b156143f85785516143c590630784ce0090615e8c565b600f0b6020808601919091528601516143e39061437b904290615be3565b84602001516143f29190615eca565b600f0b84525b6020808801516000908152601b8252604090205490870151600f9190910b93501561444f5786602001518660200151036144345782915061444f565b6020808701516000908152601b9091526040902054600f0b91505b6040805160a0810182526000808252602082018190524292820192909252436060820152608081019190915281156144d85750600081815260066020908152604091829020825160a0810184528154600f81810b8352600160801b909104900b928101929092526001810154928201929092526002820154606082015260039091015460808201525b60008160400151905060006040518060a001604052808460000151600f0b81526020018460200151600f0b8152602001846040015181526020018460600151815260200184608001518152509050600083604001514211156145715760408401516145439042615be3565b60608501516145529043615be3565b61456490670de0b6b3a7640000615c33565b61456e9190615c1f565b90505b600062093a806145818186615c1f565b61458b9190615c33565b905060005b60ff81101561470a576145a662093a8083615bf6565b91506000428311156145ba574292506145ce565b506000828152601b6020526040902054600f0b5b6145db61437b8785615be3565b87602001516145ea9190615eca565b875188906145f9908390615ceb565b600f0b905250602087018051829190614613908390615e5f565b600f90810b90915288516000910b1215905061462e57600087525b60008760200151600f0b121561464657600060208801525b60408088018490528501519295508592670de0b6b3a76400009061466a9085615be3565b6146749086615c33565b61467e9190615c1f565b856060015161468d9190615bf6565b606088015261469d600189615bf6565b97504283036146b2575043606087015261470a565b6000888152600660209081526040918290208951918a01516001600160801b03908116600160801b02921691909117815590880151600182015560608801516002820155608088015160039091015550600101614590565b50508b1561479957886020015188602001516147269190615ceb565b846020018181516147379190615e5f565b600f0b9052508851885161474b9190615ceb565b8451859061475a908390615e5f565b600f90810b90915260208601516000910b1215905061477b57600060208501525b60008460000151600f0b121561479057600084525b601d5460808501525b846001141580156147c9575042600660006147b5600189615be3565b815260200190815260200160002060010154145b156148335783600660006147de600189615be3565b815260208082019290925260409081016000208351928401516001600160801b03908116600160801b029316929092178255820151600182015560608201516002820155608090910151600390910155614888565b60168590556000858152600660209081526040918290208651918701516001600160801b03908116600160801b0292169190911781559085015160018201556060850151600282015560808501516003909101555b8b15614aa757428b6020015111156148fa5760208901516148a99088615e5f565b96508a602001518a60200151036148cc5760208801516148c99088615ceb565b96505b60208b8101516000908152601b9091526040902080546001600160801b0319166001600160801b0389161790555b428a602001511115614955578a602001518a6020015111156149555760208801516149259087615ceb565b60208b8101516000908152601b9091526040902080546001600160801b0319166001600160801b03831617905595505b426040808a01919091524360608a015260008d8152601a602052205480158015906149a9575060008d8152601960205260409020429082633b9aca00811061499f5761499f615c7c565b6004020160010154145b15614a1f5760008d8152601960205260409020899082633b9aca0081106149d2576149d2615c7c565b825160208401516001600160801b03908116600160801b02911617600491909102919091019081556040820151600182015560608201516002820155608090910151600390910155614aa5565b614a2881615d35565b60008e8152601a6020908152604080832084905560199091529020909150899082633b9aca008110614a5c57614a5c615c7c565b825160208401516001600160801b03908116600160801b029116176004919091029190910190815560408201516001820155606082015160028201556080909101516003909101555b505b505050505050505050505050565b610fc08363a9059cbb60e01b8484604051602401614ad4929190615c4a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526153f9565b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff16151591810182905290614b6557604051632188f8ab60e01b815260040160405180910390fd5b8115801590614b8557506000614b7a83613d4a565b6001600160a01b0316145b15614ba357604051634a1850bf60e11b815260040160405180910390fd5b600083815260136020526040902054439003614bd2576040516342d6fce760e01b815260040160405180910390fd5b828203614bde57600091505b6000838152601f6020526040902054828103614bfa5750505050565b6000614c0c8360000151600f0b614222565b9050614c218585614c1c88613d4a565b6152fd565b614c2d84826001614ca1565b8382614c37613d28565b6001600160a01b03167ff1aa2a9e40138176a3ee6099df056f5c175f8511a0d8b8275d94d1ea5de4677360405160405180910390a45050505050565b600060016001607f1b03821115614c9d576040516393dafdf160e01b815260040160405180910390fd5b5090565b6040516375f199b960e11b8152602160048201526020602482015260448101849052606481018390528115156084820152735E9b95a2CD162382fDF7adb6D3Db03cfb708CbA19063ebe333729060a4015b60006040518083038186803b158015614d0a57600080fd5b505af41580156129d6573d6000803e3d6000fd5b60006001600160a01b038316614d3657614d36615eea565b614d408383615367565b614d4c826000856152fd565b60405182906001600160a01b03851690600090600080516020615f3a833981519152908290a450600192915050565b601754614d888582615bf6565b6017556040805160608101825260008082526020808301828152838501928352875191880151948801511515909252929052600f9190910b8152614dcb86614c73565b81518290614dda908390615e5f565b600f0b9052508415614dee57602081018590525b600087815260186020908152604091829020835181546001600160801b0319166001600160801b03909116178155908301516001820155908201516002909101805460ff1916911515919091179055614e488785836142ec565b6000614e52613d28565b90508615614e8f57614e8f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682308a6154ce565b836003811115614ea157614ea16159a3565b602083810151604080518b8152928301919091524282820152518a916001600160a01b038516917f8835c22a0c751188de86681e15904223c054bedd5c68ec8858945b78312902739181900360600190a47f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c83614f1e8982615bf6565b6040805192835260208301919091520160405180910390a15050505050505050565b6000600860008154614f5190615d35565b91829055506000818152601860209081526040808320865181546001600160801b0319166001600160801b03909116178155868301516001820155868201516002909101805460ff19169115159190911790558051606081018252838152918201839052810191909152909150614fca908290846142ec565b614fd48382614d1e565b5092915050565b60008062093a8080614fed8642615bf6565b614ff79190615c1f565b6150019190615c33565b90508460000361502457604051631f2a200560e01b815260040160405180910390fd5b42811161504457604051638e6b5b6760e01b815260040160405180910390fd5b615052630784ce0042615bf6565b8111156150725760405163f761f1cd60e01b815260040160405180910390fd5b600060086000815461508390615d35565b918290555090506150948482614d1e565b5060008181526018602090815260409182902082516060810184528154600f0b81526001808301549382019390935260029091015460ff161515928101929092526150e491839189918691614d7b565b95945050505050565b604051637b29b3d160e01b8152601a600482015260196024820152604481018390526064810182905260009073f6a1CA09e39B32F2D090C0088510f15fcCE5064890637b29b3d190608401602060405180830381865af4158015615155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d9190615c63565b8015806151f25750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906151af9030908690600401615d4e565b602060405180830381865afa1580156151cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151f09190615c63565b155b61525d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401613db3565b610fc08363095ea7b360e01b8484604051602401614ad4929190615c4a565b816001600160a01b031661528f82613d4a565b6001600160a01b0316146152a5576152a5615eea565b6000818152600f6020526040902080546001600160a01b03191690556152cb828261550c565b6001600160a01b03821660009081526010602052604081208054600192906152f4908490615be3565b90915550505050565b60405163690f66bf60e01b8152601860048201526021602482015260206044820152601f60648201526084810184905260a481018390526001600160a01b03821660c4820152735E9b95a2CD162382fDF7adb6D3Db03cfb708CbA19063690f66bf9060e401614cf2565b600061537282613d4a565b6001600160a01b03161461538857615388615eea565b6000818152600f6020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558084526010808452828520805460148652848720818852865284872088905587875260158652938620939093559084529091528054600192906152f4908490615bf6565b600061544e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166155cb9092919063ffffffff16565b905080516000148061546f57508080602001905181019061546f9190615f00565b610fc05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401613db3565b6040516001600160a01b03808516602483015283166044820152606481018290526155069085906323b872dd60e01b90608401614ad4565b50505050565b6001600160a01b03821660009081526010602052604081205461553190600190615be3565b600083815260156020526040902054909150808203615580576001600160a01b038416600090815260146020908152604080832085845282528083208390558583526015909152812055615506565b6001600160a01b039390931660009081526014602090815260408083209383529281528282208054868452848420819055835260159091528282209490945592839055908252812055565b60606125fc848460008585600080866001600160a01b031685876040516155f29190615f1d565b60006040518083038185875af1925050503d806000811461562f576040519150601f19603f3d011682016040523d82523d6000602084013e615634565b606091505b509150915061564587838387615652565b925050505b949350505050565b606083156156c15782516000036156ba576001600160a01b0385163b6156ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401613db3565b508161564a565b61564a83838151156156d65781518083602001fd5b8060405162461bcd60e51b8152600401613db391906157a8565b6040518060a001604052806000600f0b81526020016000600f0b81526020016000815260200160008152602001600081525090565b6001600160e01b0319811681146112df57600080fd5b60006020828403121561574d57600080fd5b81356125ff81615725565b60005b8381101561577357818101518382015260200161575b565b50506000910152565b60008151808452615794816020860160208601615758565b601f01601f19169290920160200192915050565b60208152600061215d602083018461577c565b6000602082840312156157cd57600080fd5b5035919050565b6001600160a01b03811681146112df57600080fd5b6000602082840312156157fb57600080fd5b81356125ff816157d4565b6000806040838503121561581957600080fd5b8235615824816157d4565b946020939093013593505050565b6000806040838503121561584557600080fd5b50508035926020909101359150565b60008060006060848603121561586957600080fd5b8335615874816157d4565b92506020840135615884816157d4565b929592945050506040919091013590565b600080604083850312156158a857600080fd5b82356158b3816157d4565b915060208301356158c3816157d4565b809150509250929050565b80151581146112df57600080fd5b600080604083850312156158ef57600080fd5b82356158fa816157d4565b915060208301356158c3816158ce565b6000806040838503121561591d57600080fd5b8235915060208301356158c3816158ce565b60a0810161216082848051600f0b82526020810151600f0b60208301526040810151604083015260608101516060830152608081015160808301525050565b60008060006060848603121561598357600080fd5b833561598e816157d4565b95602085013595506040909401359392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106159db57634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600080600060e0888a0312156159fc57600080fd5b87359650602088013595506040880135945060608801359350608088013560ff81168114615a2957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715615a8557615a85615a46565b604052919050565b600067ffffffffffffffff821115615aa757615aa7615a46565b50601f01601f191660200190565b60008060008060808587031215615acb57600080fd5b8435615ad6816157d4565b93506020850135615ae6816157d4565b925060408501359150606085013567ffffffffffffffff811115615b0957600080fd5b8501601f81018713615b1a57600080fd5b8035615b2d615b2882615a8d565b615a5c565b818152886020838501011115615b4257600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080600060608486031215615b7957600080fd5b83359250602084013591506040840135615b92816157d4565b809150509250925092565b60008060408385031215615bb057600080fd5b82359150602083013565ffffffffffff811681146158c357600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561216057612160615bcd565b8082018082111561216057612160615bcd565b634e487b7160e01b600052601260045260246000fd5b600082615c2e57615c2e615c09565b500490565b808202811582820484141761216057612160615bcd565b6001600160a01b03929092168252602082015260400190565b600060208284031215615c7557600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006040820184835260206040602085015281855180845260608601915060208701935060005b81811015615cde5784516001600160a01b031683529383019391830191600101615cb9565b5090979650505050505050565b600f82810b9082900b0360016001607f1b0319811260016001607f1b038213171561216057612160615bcd565b600060208284031215615d2a57600080fd5b81516125ff816157d4565b600060018201615d4757615d47615bcd565b5060010190565b6001600160a01b0392831681529116602082015260400190565b60008060408385031215615d7b57600080fd5b8251615d86816157d4565b60208401519092506158c3816157d4565b600060208284031215615da957600080fd5b815167ffffffffffffffff811115615dc057600080fd5b8201601f81018413615dd157600080fd5b8051615ddf615b2882615a8d565b818152856020838501011115615df457600080fd5b6150e4826020830160208601615758565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615e389083018461577c565b9695505050505050565b600060208284031215615e5457600080fd5b81516125ff81615725565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561216057612160615bcd565b600081600f0b83600f0b80615ea357615ea3615c09565b60016001607f1b0319821460001982141615615ec157615ec1615bcd565b90059392505050565b600082600f0b82600f0b0280600f0b9150808214614fd457614fd4615bcd565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615f1257600080fd5b81516125ff816158ce565b60008251615f2f818460208701615758565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3eff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7a264697066735822122002bc500d1824937c5e80fdb1bb185d4e070baa28db46698f49c8ae5a8519eccc64736f6c63430008180033ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104805760003560e01c806370a0823111610257578063b45a3c0e11610146578063e58f5947116100c3578063ec32e6df11610087578063ec32e6df14610c65578063f04cb3a814610c78578063f52a36f714610cc7578063f645d4f914610cfd578063fc0c546a14610d2457600080fd5b8063e58f594714610bbc578063e75b1c2e14610bdc578063e7a324dc14610bef578063e7e242d414610c16578063e985e9c514610c2957600080fd5b8063c87b56dd1161010a578063c87b56dd14610b5d578063d1c2babb14610b70578063d9a3495214610b83578063e0514aba14610b96578063e0c11f9a14610ba957600080fd5b8063b45a3c0e14610a94578063b52c05fe14610b1c578063b88d4fde14610b2f578063bfe1092814610b42578063c2c4c5c114610b5557600080fd5b806391ddadf4116101d4578063a22cb46511610198578063a22cb46514610a02578063a738da8214610a15578063a899b36c14610a3e578063b1548afc14610a61578063b2383e5514610a8157600080fd5b806391ddadf4146109d657806395d89b41146104de578063981b24d0146109975780639954a989146109dc5780639d507b8b146109ef57600080fd5b80638ad4c4471161021b5780638ad4c447146109595780638bf9d84c1461096c5780638e539e8c146109975780638fbb38ff146109aa578063900cf0cf146109cd57600080fd5b806370a08231146108ba5780637c728000146108e35780637ecebe0014610913578063834b0b691461093357806385f2aef21461094657600080fd5b8063370fb5fa116103735780634bf5d7e9116102f057806354fd4d50116102b457806354fd4d501461084d5780635594a0451461086e578063572b6c05146108815780635a4f459a146108945780636352211e146108a757600080fd5b80634bf5d7e91461079d5780634d01cb66146107c75780634d6fb775146107d057806350589793146107e3578063515857d41461082257600080fd5b806342842e0e1161033757806342842e0e1461071c578063430c20811461072f57806344acb42a1461074257806346c96aac146107625780634b19becc1461077557600080fd5b8063370fb5fa1461069957806337b1f500146106ac5780633a6396a5146106bf5780633bf0c9fb146106d25780633d085a37146106f957600080fd5b806320606b70116104015780632e720f7d116103c55780632e720f7d1461063e5780632f7f9ba914610651578063313ce5671461066457806333230dc01461067357806335b0f6bd1461068657600080fd5b806320606b70146105b557806323b872dd146105dc57806327a6ee98146105ef5780632d0485ec146106185780632e1a7d4d1461062b57600080fd5b8063095ea7b311610448578063095ea7b31461055e5780630ec84dda1461057157806317d70f7c1461058457806318160ddd1461058d57806319a0a9d51461059557600080fd5b806301ffc9a714610485578063047fc9aa146104c757806306fdde03146104de578063081812fc14610508578063095cf5c614610549575b600080fd5b6104b261049336600461573b565b6001600160e01b03191660009081526007602052604090205460ff1690565b60405190151581526020015b60405180910390f35b6104d060175481565b6040519081526020016104be565b604080518082019091526005815264766542544360d81b60208201525b6040516104be91906157a8565b6105316105163660046157bb565b6000908152601160205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020016104be565b61055c6105573660046157e9565b610d4b565b005b61055c61056c366004615806565b610dcf565b61055c61057f366004615832565b610f10565b6104d060085481565b6104d0610f9d565b6104d06105a33660046157bb565b600a6020526000908152604090205481565b6104d07f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61055c6105ea366004615854565b610fad565b6105316105fd3660046157bb565b600e602052600090815260409020546001600160a01b031681565b61055c610626366004615895565b610fc5565b61055c6106393660046157bb565b61102e565b61055c61064c3660046157e9565b6112e2565b600554610531906001600160a01b031681565b604051601281526020016104be565b61055c6106813660046158dc565b611376565b61055c6106943660046157bb565b6113dc565b61055c6106a73660046157bb565b61164b565b61055c6106ba36600461590a565b611c4e565b6104d06106cd3660046157e9565b611e34565b6105317f000000000000000000000000000000000000000000000000000000000000000081565b6104b26107073660046157e9565b601c6020526000908152604090205460ff1681565b61055c61072a366004615854565b612136565b6104b261073d366004615806565b612151565b610755610750366004615832565b612166565b6040516104be919061592f565b600254610531906001600160a01b031681565b610788610783366004615832565b6121e4565b604080519283526020830191909152016104be565b60408051808201909152600e81526d06d6f64653d74696d657374616d760941b60208201526104fb565b6104d0601d5481565b6104d06107de36600461596e565b612561565b61080b6107f13660046157bb565b60216020526000908152604090205465ffffffffffff1681565b60405165ffffffffffff90911681526020016104be565b6104d0610830366004615832565b600b60209081526000928352604080842090915290825290205481565b6040805180820190915260058152640312e302e360dc1b60208201526104fb565b600454610531906001600160a01b031681565b6104b261088f3660046157e9565b612606565b61055c6108a236600461590a565b612638565b6105316108b53660046157bb565b612693565b6104d06108c83660046157e9565b6001600160a01b031660009081526010602052604090205490565b6109066108f13660046157bb565b60096020526000908152604090205460ff1681565b6040516104be91906159b9565b6104d06109213660046157e9565b60226020526000908152604090205481565b61055c6109413660046159e1565b61269e565b600354610531906001600160a01b031681565b6107556109673660046157bb565b6129df565b6104d061097a366004615806565b601460209081526000928352604080842090915290825290205481565b6104d06109a53660046157bb565b612a70565b6104b26109b83660046157bb565b601e6020526000908152604090205460ff1681565b6104d060165481565b4261080b565b61055c6109ea3660046157e9565b612a7b565b61055c6109fd366004615832565b612bca565b61055c610a103660046158dc565b612d9e565b610531610a233660046157bb565b600d602052600090815260409020546001600160a01b031681565b6104b2610a4c3660046157bb565b600c6020526000908152604090205460ff1681565b6104d0610a6f3660046157bb565b6000908152601f602052604090205490565b61055c610a8f366004615832565b612e49565b610af5610aa23660046157bb565b6040805160608082018352600080835260208084018290529284018190529384526018825292829020825193840183528054600f0b84526001810154918401919091526002015460ff1615159082015290565b604080518251600f0b815260208084015190820152918101511515908201526060016104be565b6104d0610b2a366004615832565b612e85565b61055c610b3d366004615ab5565b612ead565b600154610531906001600160a01b031681565b61055c612fd0565b6104fb610b6b3660046157bb565b613022565b61055c610b7e366004615832565b6130c5565b61055c610b91366004615832565b613524565b6104d0610ba4366004615832565b613556565b61055c610bb7366004615832565b613562565b6104d0610bca3660046157bb565b601a6020526000908152604090205481565b61055c610bea3660046157bb565b613a1f565b6104d07f9947d5709c1682eaa3946b2d84115c9c0d1c946b149d76e69b457458b42ea29e81565b6104d0610c243660046157bb565b613c4e565b6104b2610c37366004615895565b6001600160a01b03918216600090815260126020908152604080832093909416825291909152205460ff1690565b6104d0610c73366004615b64565b613c76565b610c8b610c86366004615b9d565b613c97565b6040516104be9190815181526020808301516001600160a01b031690820152604080830151908201526060918201519181019190915260800190565b610cea610cd53660046157bb565b601b60205260009081526040902054600f0b81565b604051600f9190910b81526020016104be565b6105317f000000000000000000000000000000000000000000000000000000000000000081565b6105317f000000000000000000000000000000000000000000000000000000000000000081565b6003546001600160a01b0316610d5f613d28565b6001600160a01b031614610d8657604051633a7cfa5d60e21b815260040160405180910390fd5b6001600160a01b038116610dad5760405163d92e233d60e01b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000610dd9613d28565b90506000610de683613d4a565b90506001600160a01b038116610e0f5760405163d92e233d60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031603610e415760405163367558c360e01b815260040160405180910390fd5b6000826001600160a01b0316610e5685613d4a565b6001600160a01b0384811660009081526012602090815260408083208985168452909152902054911691909114915060ff16811582610e93575080155b15610eb15760405163390cdd9b60e21b815260040160405180910390fd5b60008581526011602052604080822080546001600160a01b0319166001600160a01b038a811691821790925591518893918716917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050505050565b610f18613d65565b600260008381526009602052604090205460ff166002811115610f3d57610f3d6159a3565b148015610f6557506001546001600160a01b0316610f59613d28565b6001600160a01b031614155b15610f835760405163385296d560e01b815260040160405180910390fd5b610f8f82826000613dc3565b610f996001600055565b5050565b6000610fa84261400c565b905090565b610fc0838383610fbb613d28565b61409c565b505050565b6002546001600160a01b0316610fd9613d28565b6001600160a01b0316146110005760405163c18384c160e01b815260040160405180910390fd5b600280546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055565b611036613d65565b6000611040613d28565b905061104c81836141b8565b6110695760405163390cdd9b60e21b815260040160405180910390fd5b6000828152601e602052604090205460ff161561109957604051637c9a1cf960e01b815260040160405180910390fd5b60008281526009602052604081205460ff1660028111156110bc576110bc6159a3565b146110da576040516317a66f3760e01b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff161580159282019290925290611136576040516334d10f9560e11b815260040160405180910390fd5b806020015142101561115b5760405163342ad40160e11b815260040160405180910390fd5b600061116d8260000151600f0b614222565b90506111788461424e565b6040805160608101825260008082526020808301828152838501838152898452601890925293909120915182546001600160801b0319166001600160801b039091161782559151600182015590516002909101805460ff19169115159190911790556017546111e78282615be3565b601755604080516060810182526000808252602082018190529181019190915261121490869085906142ec565b6112486001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168584614ab5565b6040805183815242602082015286916001600160a01b038716917f02f25270a4d87bea75db541cdfe559334a275b4a233520ed6c0a2429667cca94910160405180910390a37f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c816112b98482615be3565b6040805192835260208301919091520160405180910390a1505050506112df6001600055565b50565b6003546001600160a01b03166112f6613d28565b6001600160a01b03161461131d57604051633a7cfa5d60e21b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b038316179055604080516000815260001960208201527f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c910160405180910390a150565b6003546001600160a01b031661138a613d28565b6001600160a01b0316146113b157604051633a7cfa5d60e21b815260040160405180910390fd5b6001600160a01b03919091166000908152601c60205260409020805460ff1916911515919091179055565b60006113e6613d28565b90506113f281836141b8565b61140f5760405163390cdd9b60e21b815260040160405180910390fd5b60008281526009602052604081205460ff166002811115611432576114326159a3565b14611450576040516317a66f3760e01b815260040160405180910390fd5b6000828152601e602052604090205460ff161561148057604051637c9a1cf960e01b815260040160405180910390fd5b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff161515918101829052906114da57604051632188f8ab60e01b815260040160405180910390fd5b60006114ec8260000151600f0b614222565b905080601d60008282546115009190615be3565b9091555062093a80905080611519630784ce0042615bf6565b6115239190615c1f565b61152d9190615c33565b6020830152600060408301819052611546908590614b0b565b60008481526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff1615159181019190915261158f908590846142ec565b600084815260186020908152604091829020845181546001600160801b0319166001600160801b03909116178155848201516001820155848301516002909101805460ff19169115159190911790558151838152429181019190915285916001600160a01b038616917f668d293c0a181c1f163fd0d3c757239a9c17bd26c5e483150e374455433b27fa91015b60405180910390a3604051848152600080516020615f5a8339815191529060200160405180910390a150505050565b611653613d65565b6000818152600a60205260409020546002546001600160a01b0316611676613d28565b6001600160a01b03161461169d5760405163c18384c160e01b815260040160405180910390fd5b806000036116be5760405163d7caa26160e01b815260040160405180910390fd5b600160008381526009602052604090205460ff1660028111156116e3576116e36159a3565b1461170157604051630fd82f7760e11b815260040160405180910390fd5b6000818152600d6020908152604080832054600e835281842054868552600b8452828520868652909352818420549151633e491d4760e01b81526001600160a01b039182169491909316928490633e491d4790611784907f0000000000000000000000000000000000000000000000000000000000000000908a90600401615c4a565b602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c59190615c63565b905060006117d38284615bf6565b9050600062093a80806117ea630784ce0042615bf6565b6117f49190615c1f565b6117fe9190615c33565b60408051600180825281830190925291925060009190602080830190803683370190505090507f00000000000000000000000000000000000000000000000000000000000000008160008151811061185857611858615c7c565b6001600160a01b03928316602091820292909201015260405163f5f8d36560e01b81529088169063f5f8d36590611895908c908590600401615c92565b600060405180830381600087803b1580156118af57600080fd5b505af11580156118c3573d6000803e3d6000fd5b50505050600060405180606001604052806118dd86614c73565b600f90810b82526020808301879052600060409384018190528e8152601882528390208351606081018552815490930b83526001810154918301919091526002015460ff1615159181019190915290915061193a908b90836142ec565b60008a8152601860209081526040808320845181546001600160801b0319166001600160801b0390911617815584830151600180830191909155858301516002928301805460ff19169115159190911790558d85529382902082516060810184528154600f0b8082529582015494810194909452015460ff16151590820152906119c386614c73565b600f0b126119d25780516119db565b6119db85614c73565b815182906119ea908390615ceb565b600f0b905250601d548510611a0157601d54611a03565b845b601d6000828254611a149190615be3565b909155505060008a8152601f6020526040812054611a33918790614ca1565b60008a81526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff16151591810191909152611a7c908b90836142ec565b60008a815260186020908152604091829020835181546001600160801b0319166001600160801b03909116178155908301516001820155828201516002909101805460ff19169115159190911790555163278afc8b60e21b815260048101889052602481018c90526001600160a01b038a1690639e2bf22c90604401600060405180830381600087803b158015611b1257600080fd5b505af1158015611b26573d6000803e3d6000fd5b505060405163278afc8b60e21b8152600481018a9052602481018e90526001600160a01b038b169250639e2bf22c9150604401600060405180830381600087803b158015611b7357600080fd5b505af1158015611b87573d6000803e3d6000fd5b50505060008c8152600a60209081526040808320839055600b82528083208e845282528083208390558e835260099091529020805460ff1916905550898b611bce81613d4a565b6001600160a01b03167f5319474ec1e9d118585a40e615ea37be254007e6bb5b039756c3813c2d1354898842604051611c11929190918252602082015260400190565b60405180910390a46040518b8152600080516020615f5a8339815191529060200160405180910390a1505050505050505050506112df6001600055565b600260009054906101000a90046001600160a01b03166001600160a01b0316637778960e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc59190615d18565b6001600160a01b0316611cd6613d28565b6001600160a01b031614158015611d7c5750600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5f9190615d18565b6001600160a01b0316611d70613d28565b6001600160a01b031614155b15611d9a5760405163459d6a3f60e01b815260040160405180910390fd5b600260008381526009602052604090205460ff166002811115611dbf57611dbf6159a3565b14611ddd5760405163054b1e0160e51b815260040160405180910390fd5b6000828152600c602052604090205481151560ff909116151503611e1457604051631490ad1160e01b815260040160405180910390fd5b6000918252600c6020526040909120805460ff1916911515919091179055565b6000611e3e613d65565b6000611e48613d28565b6005549091506001600160a01b03808316911614801590611ef15750600260009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edb9190615d18565b6001600160a01b0316816001600160a01b031614155b15611f0f57604051633bc1d15f60e01b815260040160405180910390fd5b600860008154611f1e90615d35565b91829055509150611f2f8383614d1e565b50611f618260008060405180606001604052806000600f0b815260200160008152602001600115158152506001614d7b565b6000828152600960209081526040808320805460ff1916600217905580516301a15ccf60e31b8152905183926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692630d0ae67892600480830193928290030181865afa158015611fde573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120029190615d18565b60025460405163dabc8e8360e01b81526001600160a01b039283169263dabc8e8392612056927f00000000000000000000000000000000000000000000000000000000000000009290911690600401615d4e565b60408051808303816000875af1158015612074573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120989190615d68565b6000868152600d6020908152604080832080546001600160a01b038088166001600160a01b031992831617909255600e909352928190208054848616931692909217909155519294509092508481169186918816907fae65a147ec014982132ce8b32019735e3c5f41457848d2ce2e2c3e0cbc9df7bc9061211c9087908790615d4e565b60405180910390a45050506121316001600055565b919050565b610fc083838360405180602001604052806000815250612ead565b600061215d83836141b8565b90505b92915050565b61216e6156f0565b600083815260196020526040902082633b9aca00811061219057612190615c7c565b6040805160a081018252600492909202929092018054600f81810b8452600160801b909104900b60208301526001810154928201929092526002820154606082015260039091015460808201529392505050565b6000806121ef613d65565b60006121f9613d28565b9050600061220686613d4a565b90506001600160a01b03811661222f57604051632c2151ef60e11b815260040160405180910390fd5b6001600160a01b0381166000908152601c602052604090205460ff16158015612283575060008052601c6020527fb9c6de81004e18dedadca3e5eabaab449ca91dff6f58efc9461da635fe77f8495460ff16155b156122a157604051633df16fd960e21b815260040160405180910390fd5b60008681526009602052604081205460ff1660028111156122c4576122c46159a3565b146122e2576040516317a66f3760e01b815260040160405180910390fd5b6000868152601e602052604090205460ff161561231257604051637c9a1cf960e01b815260040160405180910390fd5b61231c82876141b8565b6123395760405163390cdd9b60e21b815260040160405180910390fd5b60008681526018602090815260409182902082516060810184528154600f0b8152600182015492810183905260029091015460ff16151592810192909252421080159061238857508060400151155b156123a6576040516307b7d7dd60e51b815260040160405180910390fd5b60006123b187614c73565b905080600f0b6000036123d757604051631f2a200560e01b815260040160405180910390fd5b80600f0b8260000151600f0b1361240157604051636b2f218360e01b815260040160405180910390fd5b61240a8861424e565b6040805160608082018352600080835260208084018281528486018381528e845260188352868420955186546001600160801b0319166001600160801b0390911617865590516001860155516002909401805460ff191694151594909417909355835191820184528082529181018290529182015261248c90899084906142ec565b808260000181815161249e9190615ceb565b600f0b9052506124ae8383614f40565b600f82900b835295506124c18383614f40565b600087815260186020526040902054909550859087908a907f8303de8187a6102fdc3fe20c756dddd68df0ae027b77e2391c19a855e0821f3390889061250990600f0b614222565b61251587600f0b614222565b6020808a0151604080516001600160a01b03909616865291850193909352830152606082015242608082015260a00160405180910390a45050505061255a6001600055565b9250929050565b6040516332b53f5360e11b815260216004820152602060248201526001600160a01b0384166044820152606481018390526084810182905260009073__$d6f092accc63e0bf8f1744f29529542834$$227f16069b523eeecbbbd0559d29a49482$__90637259b01990608401602060405180830381865af4158015614078573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121609190615c63565b600160008381526009602052604090205460ff1660028111156140c1576140c16159a3565b036140df57604051635eb32db160e11b815260040160405180910390fd5b6140e981836141b8565b6141065760405163390cdd9b60e21b815260040160405180910390fd5b836001600160a01b031661411983613d4a565b6001600160a01b031614614140576040516330cd747160e01b815260040160405180910390fd5b600082815260116020526040902080546001600160a01b0319169055614166848361527c565b614172826000856152fd565b61417c8383615367565b6000828152601360205260408082204390555183916001600160a01b038087169290881691600080516020615f3a83398151915291a450505050565b6000806141c483613d4a565b6000848152601160209081526040808320546001600160a01b0380861680865260128552838620828c1680885295529290942054949550908214939216149060ff16828061420f5750815b806142175750805b979650505050505050565b60008082600f0b12156142475760405162406f5d60e21b815260040160405180910390fd5b50600f0b90565b6000614258613d28565b905061426481836141b8565b6142815760405163390cdd9b60e21b815260040160405180910390fd5b600061428c83613d4a565b600084815260116020526040812080546001600160a01b03191690559091506142b7908490806152fd565b6142c1818461527c565b60405183906000906001600160a01b03841690600080516020615f3a833981519152908390a4505050565b6142f46156f0565b6142fc6156f0565b6016546000908190871561444f57856040015161431a576000614328565b855161432890600f0b614222565b6080850152602087015142108015614347575060008760000151600f0b135b1561439557865161435d90630784ce0090615e8c565b600f0b6020808701919091528701516143809061437b904290615be3565b614c73565b856020015161438f9190615eca565b600f0b85525b4286602001511180156143af575060008660000151600f0b135b156143f85785516143c590630784ce0090615e8c565b600f0b6020808601919091528601516143e39061437b904290615be3565b84602001516143f29190615eca565b600f0b84525b6020808801516000908152601b8252604090205490870151600f9190910b93501561444f5786602001518660200151036144345782915061444f565b6020808701516000908152601b9091526040902054600f0b91505b6040805160a0810182526000808252602082018190524292820192909252436060820152608081019190915281156144d85750600081815260066020908152604091829020825160a0810184528154600f81810b8352600160801b909104900b928101929092526001810154928201929092526002820154606082015260039091015460808201525b60008160400151905060006040518060a001604052808460000151600f0b81526020018460200151600f0b8152602001846040015181526020018460600151815260200184608001518152509050600083604001514211156145715760408401516145439042615be3565b60608501516145529043615be3565b61456490670de0b6b3a7640000615c33565b61456e9190615c1f565b90505b600062093a806145818186615c1f565b61458b9190615c33565b905060005b60ff81101561470a576145a662093a8083615bf6565b91506000428311156145ba574292506145ce565b506000828152601b6020526040902054600f0b5b6145db61437b8785615be3565b87602001516145ea9190615eca565b875188906145f9908390615ceb565b600f0b905250602087018051829190614613908390615e5f565b600f90810b90915288516000910b1215905061462e57600087525b60008760200151600f0b121561464657600060208801525b60408088018490528501519295508592670de0b6b3a76400009061466a9085615be3565b6146749086615c33565b61467e9190615c1f565b856060015161468d9190615bf6565b606088015261469d600189615bf6565b97504283036146b2575043606087015261470a565b6000888152600660209081526040918290208951918a01516001600160801b03908116600160801b02921691909117815590880151600182015560608801516002820155608088015160039091015550600101614590565b50508b1561479957886020015188602001516147269190615ceb565b846020018181516147379190615e5f565b600f0b9052508851885161474b9190615ceb565b8451859061475a908390615e5f565b600f90810b90915260208601516000910b1215905061477b57600060208501525b60008460000151600f0b121561479057600084525b601d5460808501525b846001141580156147c9575042600660006147b5600189615be3565b815260200190815260200160002060010154145b156148335783600660006147de600189615be3565b815260208082019290925260409081016000208351928401516001600160801b03908116600160801b029316929092178255820151600182015560608201516002820155608090910151600390910155614888565b60168590556000858152600660209081526040918290208651918701516001600160801b03908116600160801b0292169190911781559085015160018201556060850151600282015560808501516003909101555b8b15614aa757428b6020015111156148fa5760208901516148a99088615e5f565b96508a602001518a60200151036148cc5760208801516148c99088615ceb565b96505b60208b8101516000908152601b9091526040902080546001600160801b0319166001600160801b0389161790555b428a602001511115614955578a602001518a6020015111156149555760208801516149259087615ceb565b60208b8101516000908152601b9091526040902080546001600160801b0319166001600160801b03831617905595505b426040808a01919091524360608a015260008d8152601a602052205480158015906149a9575060008d8152601960205260409020429082633b9aca00811061499f5761499f615c7c565b6004020160010154145b15614a1f5760008d8152601960205260409020899082633b9aca0081106149d2576149d2615c7c565b825160208401516001600160801b03908116600160801b02911617600491909102919091019081556040820151600182015560608201516002820155608090910151600390910155614aa5565b614a2881615d35565b60008e8152601a6020908152604080832084905560199091529020909150899082633b9aca008110614a5c57614a5c615c7c565b825160208401516001600160801b03908116600160801b029116176004919091029190910190815560408201516001820155606082015160028201556080909101516003909101555b505b505050505050505050505050565b610fc08363a9059cbb60e01b8484604051602401614ad4929190615c4a565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526153f9565b60008281526018602090815260409182902082516060810184528154600f0b81526001820154928101929092526002015460ff16151591810182905290614b6557604051632188f8ab60e01b815260040160405180910390fd5b8115801590614b8557506000614b7a83613d4a565b6001600160a01b0316145b15614ba357604051634a1850bf60e11b815260040160405180910390fd5b600083815260136020526040902054439003614bd2576040516342d6fce760e01b815260040160405180910390fd5b828203614bde57600091505b6000838152601f6020526040902054828103614bfa5750505050565b6000614c0c8360000151600f0b614222565b9050614c218585614c1c88613d4a565b6152fd565b614c2d84826001614ca1565b8382614c37613d28565b6001600160a01b03167ff1aa2a9e40138176a3ee6099df056f5c175f8511a0d8b8275d94d1ea5de4677360405160405180910390a45050505050565b600060016001607f1b03821115614c9d576040516393dafdf160e01b815260040160405180910390fd5b5090565b6040516375f199b960e11b815260216004820152602060248201526044810184905260648101839052811515608482015273__$d6f092accc63e0bf8f1744f29529542834$__9063ebe333729060a4015b60006040518083038186803b158015614d0a57600080fd5b505af41580156129d6573d6000803e3d6000fd5b60006001600160a01b038316614d3657614d36615eea565b614d408383615367565b614d4c826000856152fd565b60405182906001600160a01b03851690600090600080516020615f3a833981519152908290a450600192915050565b601754614d888582615bf6565b6017556040805160608101825260008082526020808301828152838501928352875191880151948801511515909252929052600f9190910b8152614dcb86614c73565b81518290614dda908390615e5f565b600f0b9052508415614dee57602081018590525b600087815260186020908152604091829020835181546001600160801b0319166001600160801b03909116178155908301516001820155908201516002909101805460ff1916911515919091179055614e488785836142ec565b6000614e52613d28565b90508615614e8f57614e8f6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001682308a6154ce565b836003811115614ea157614ea16159a3565b602083810151604080518b8152928301919091524282820152518a916001600160a01b038516917f8835c22a0c751188de86681e15904223c054bedd5c68ec8858945b78312902739181900360600190a47f5e2aa66efd74cce82b21852e317e5490d9ecc9e6bb953ae24d90851258cc2f5c83614f1e8982615bf6565b6040805192835260208301919091520160405180910390a15050505050505050565b6000600860008154614f5190615d35565b91829055506000818152601860209081526040808320865181546001600160801b0319166001600160801b03909116178155868301516001820155868201516002909101805460ff19169115159190911790558051606081018252838152918201839052810191909152909150614fca908290846142ec565b614fd48382614d1e565b5092915050565b60008062093a8080614fed8642615bf6565b614ff79190615c1f565b6150019190615c33565b90508460000361502457604051631f2a200560e01b815260040160405180910390fd5b42811161504457604051638e6b5b6760e01b815260040160405180910390fd5b615052630784ce0042615bf6565b8111156150725760405163f761f1cd60e01b815260040160405180910390fd5b600060086000815461508390615d35565b918290555090506150948482614d1e565b5060008181526018602090815260409182902082516060810184528154600f0b81526001808301549382019390935260029091015460ff161515928101929092526150e491839189918691614d7b565b95945050505050565b604051637b29b3d160e01b8152601a600482015260196024820152604481018390526064810182905260009073__$227f16069b523eeecbbbd0559d29a49482$__90637b29b3d190608401602060405180830381865af4158015615155573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215d9190615c63565b8015806151f25750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906151af9030908690600401615d4e565b602060405180830381865afa1580156151cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906151f09190615c63565b155b61525d5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401613db3565b610fc08363095ea7b360e01b8484604051602401614ad4929190615c4a565b816001600160a01b031661528f82613d4a565b6001600160a01b0316146152a5576152a5615eea565b6000818152600f6020526040902080546001600160a01b03191690556152cb828261550c565b6001600160a01b03821660009081526010602052604081208054600192906152f4908490615be3565b90915550505050565b60405163690f66bf60e01b8152601860048201526021602482015260206044820152601f60648201526084810184905260a481018390526001600160a01b03821660c482015273__$d6f092accc63e0bf8f1744f29529542834$__9063690f66bf9060e401614cf2565b600061537282613d4a565b6001600160a01b03161461538857615388615eea565b6000818152600f6020908152604080832080546001600160a01b0319166001600160a01b0387169081179091558084526010808452828520805460148652848720818852865284872088905587875260158652938620939093559084529091528054600192906152f4908490615bf6565b600061544e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166155cb9092919063ffffffff16565b905080516000148061546f57508080602001905181019061546f9190615f00565b610fc05760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401613db3565b6040516001600160a01b03808516602483015283166044820152606481018290526155069085906323b872dd60e01b90608401614ad4565b50505050565b6001600160a01b03821660009081526010602052604081205461553190600190615be3565b600083815260156020526040902054909150808203615580576001600160a01b038416600090815260146020908152604080832085845282528083208390558583526015909152812055615506565b6001600160a01b039390931660009081526014602090815260408083209383529281528282208054868452848420819055835260159091528282209490945592839055908252812055565b60606125fc848460008585600080866001600160a01b031685876040516155f29190615f1d565b60006040518083038185875af1925050503d806000811461562f576040519150601f19603f3d011682016040523d82523d6000602084013e615634565b606091505b509150915061564587838387615652565b925050505b949350505050565b606083156156c15782516000036156ba576001600160a01b0385163b6156ba5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401613db3565b508161564a565b61564a83838151156156d65781518083602001fd5b8060405162461bcd60e51b8152600401613db391906157a8565b6040518060a001604052806000600f0b81526020016000600f0b81526020016000815260200160008152602001600081525090565b6001600160e01b0319811681146112df57600080fd5b60006020828403121561574d57600080fd5b81356125ff81615725565b60005b8381101561577357818101518382015260200161575b565b50506000910152565b60008151808452615794816020860160208601615758565b601f01601f19169290920160200192915050565b60208152600061215d602083018461577c565b6000602082840312156157cd57600080fd5b5035919050565b6001600160a01b03811681146112df57600080fd5b6000602082840312156157fb57600080fd5b81356125ff816157d4565b6000806040838503121561581957600080fd5b8235615824816157d4565b946020939093013593505050565b6000806040838503121561584557600080fd5b50508035926020909101359150565b60008060006060848603121561586957600080fd5b8335615874816157d4565b92506020840135615884816157d4565b929592945050506040919091013590565b600080604083850312156158a857600080fd5b82356158b3816157d4565b915060208301356158c3816157d4565b809150509250929050565b80151581146112df57600080fd5b600080604083850312156158ef57600080fd5b82356158fa816157d4565b915060208301356158c3816158ce565b6000806040838503121561591d57600080fd5b8235915060208301356158c3816158ce565b60a0810161216082848051600f0b82526020810151600f0b60208301526040810151604083015260608101516060830152608081015160808301525050565b60008060006060848603121561598357600080fd5b833561598e816157d4565b95602085013595506040909401359392505050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106159db57634e487b7160e01b600052602160045260246000fd5b91905290565b600080600080600080600060e0888a0312156159fc57600080fd5b87359650602088013595506040880135945060608801359350608088013560ff81168114615a2957600080fd5b9699959850939692959460a0840135945060c09093013592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715615a8557615a85615a46565b604052919050565b600067ffffffffffffffff821115615aa757615aa7615a46565b50601f01601f191660200190565b60008060008060808587031215615acb57600080fd5b8435615ad6816157d4565b93506020850135615ae6816157d4565b925060408501359150606085013567ffffffffffffffff811115615b0957600080fd5b8501601f81018713615b1a57600080fd5b8035615b2d615b2882615a8d565b615a5c565b818152886020838501011115615b4257600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b600080600060608486031215615b7957600080fd5b83359250602084013591506040840135615b92816157d4565b809150509250925092565b60008060408385031215615bb057600080fd5b82359150602083013565ffffffffffff811681146158c357600080fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561216057612160615bcd565b8082018082111561216057612160615bcd565b634e487b7160e01b600052601260045260246000fd5b600082615c2e57615c2e615c09565b500490565b808202811582820484141761216057612160615bcd565b6001600160a01b03929092168252602082015260400190565b600060208284031215615c7557600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006040820184835260206040602085015281855180845260608601915060208701935060005b81811015615cde5784516001600160a01b031683529383019391830191600101615cb9565b5090979650505050505050565b600f82810b9082900b0360016001607f1b0319811260016001607f1b038213171561216057612160615bcd565b600060208284031215615d2a57600080fd5b81516125ff816157d4565b600060018201615d4757615d47615bcd565b5060010190565b6001600160a01b0392831681529116602082015260400190565b60008060408385031215615d7b57600080fd5b8251615d86816157d4565b60208401519092506158c3816157d4565b600060208284031215615da957600080fd5b815167ffffffffffffffff811115615dc057600080fd5b8201601f81018413615dd157600080fd5b8051615ddf615b2882615a8d565b818152856020838501011115615df457600080fd5b6150e4826020830160208601615758565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090615e389083018461577c565b9695505050505050565b600060208284031215615e5457600080fd5b81516125ff81615725565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561216057612160615bcd565b600081600f0b83600f0b80615ea357615ea3615c09565b60016001607f1b0319821460001982141615615ec157615ec1615bcd565b90059392505050565b600082600f0b82600f0b0280600f0b9150808214614fd457614fd4615bcd565b634e487b7160e01b600052600160045260246000fd5b600060208284031215615f1257600080fd5b81516125ff816158ce565b60008251615f2f818460208701615758565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3eff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7a264697066735822122002bc500d1824937c5e80fdb1bb185d4e070baa28db46698f49c8ae5a8519eccc64736f6c63430008180033",
  "libraries": {
    "BalanceLogicLibrary": "0xf6a1CA09e39B32F2D090C0088510f15fcCE50648",
    "DelegationLogicLibrary": "0x5E9b95a2CD162382fDF7adb6D3Db03cfb708CbA1"
  },
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "DelegateChanged(address,uint256,uint256)": {
        "details": "Emitted when an account changes their delegate."
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "details": "Emitted when a token transfer or delegate change results in changes to a delegate's number of votes."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "CLOCK_MODE()": {
        "details": "Description of the clock"
      },
      "approve(address,uint256)": {
        "details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the number of tokens in ``owner``'s account."
      },
      "balanceOfNFT(uint256)": {
        "details": "Returns 0 if called in the same block as a transfer.",
        "params": {
          "_tokenId": "."
        },
        "returns": {
          "_0": "Voting power"
        }
      },
      "balanceOfNFTAt(uint256,uint256)": {
        "params": {
          "_t": "Timestamp to query voting power",
          "_tokenId": "."
        },
        "returns": {
          "_0": "Voting power"
        }
      },
      "checkpoints(uint256,uint48)": {
        "params": {
          "index": ".",
          "tokenId": "."
        },
        "returns": {
          "_0": "Checkpoint"
        }
      },
      "clock()": {
        "details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting)."
      },
      "createLock(uint256,uint256)": {
        "params": {
          "_lockDuration": "Number of seconds to lock tokens for (rounded down to nearest week)",
          "_value": "Amount to deposit"
        },
        "returns": {
          "_0": "TokenId of created veNFT"
        }
      },
      "createLockFor(uint256,uint256,address)": {
        "params": {
          "_lockDuration": "Number of seconds to lock tokens for (rounded down to nearest week)",
          "_to": "Address to deposit",
          "_value": "Amount to deposit"
        },
        "returns": {
          "_0": "TokenId of created veNFT"
        }
      },
      "createManagedLockFor(address)": {
        "details": "Throws if address already owns a managed NFT.",
        "returns": {
          "_mTokenId": "managed token id."
        }
      },
      "delegate(uint256,uint256)": {
        "details": "Delegates votes from the sender to `delegatee`."
      },
      "delegateBySig(uint256,uint256,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Delegates votes from `delegator` to `delegatee`. Signer must own `delegator`."
      },
      "delegates(uint256)": {
        "details": "Returns the delegate that `tokenId` has chosen. Can never be equal to the delegator's `tokenId`.      Returns 0 if not delegated."
      },
      "depositFor(uint256,uint256)": {
        "details": "Anyone (even a smart contract) can deposit for someone else, but      cannot extend their locktime and deposit for a brand new user",
        "params": {
          "_tokenId": "lock NFT",
          "_value": "Amount to add to user's lock"
        }
      },
      "depositManaged(uint256,uint256)": {
        "details": "Managed nft will remain max-locked as long as there is at least one      deposit or withdrawal per week.      Throws if deposit nft is managed.      Throws if recipient nft is not managed.      Throws if deposit nft is already locked.      Throws if not called by voter.",
        "params": {
          "_mTokenId": "tokenId of managed NFT that will receive the deposit",
          "_tokenId": "tokenId of NFT being deposited"
        }
      },
      "getApproved(uint256)": {
        "details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "getPastTotalSupply(uint256)": {
        "details": "Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote."
      },
      "getPastVotes(address,uint256,uint256)": {
        "details": "Returns the amount of votes that `tokenId` had at a specific moment in the past.      If the account passed in is not the owner, returns 0."
      },
      "increaseAmount(uint256,uint256)": {
        "params": {
          "_value": "Amount of tokens to deposit and add to the lock"
        }
      },
      "increaseUnlockTime(uint256,uint256)": {
        "params": {
          "_lockDuration": "New number of seconds until tokens unlock"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
      },
      "isApprovedOrOwner(address,uint256)": {
        "params": {
          "_spender": ".",
          "_tokenId": "."
        }
      },
      "lockPermanent(uint256)": {
        "details": "Only callable by unlocked normal veNFTs.",
        "params": {
          "_tokenId": "tokenId to lock."
        }
      },
      "locked(uint256)": {
        "params": {
          "_tokenId": "."
        },
        "returns": {
          "_0": "LockedBalance of _tokenId"
        }
      },
      "merge(uint256,uint256)": {
        "details": "Cannot merge `_from` locks that are permanent or have already voted this epoch.      Cannot merge `_to` locks that have already expired.      This will burn the veNFT. Any rebases or rewards that are unclaimed      will no longer be claimable. Claim all rebases and rewards prior to calling this.",
        "params": {
          "_from": "VeNFT to merge from.",
          "_to": "VeNFT to merge into."
        }
      },
      "name()": {
        "details": "Returns the token collection name."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."
      },
      "setManagedState(uint256,bool)": {
        "params": {
          "_mTokenId": "managed nft state to set",
          "_state": "true => inactive, false => active"
        }
      },
      "setVoterAndDistributor(address,address)": {
        "details": "This is only called once, at setup"
      },
      "split(uint256,uint256)": {
        "details": "This burns the tokenId of the target veNFT         Callable by approved or owner         If this is called by approved, approved will not have permissions to manipulate the newly created veNFTs         Returns the two new split veNFTs to owner         If `from` is permanent, will automatically dedelegate.         This will burn the veNFT. Any rebases or rewards that are unclaimed         will no longer be claimable. Claim all rebases and rewards prior to calling this.",
        "params": {
          "_amount": "Amount to split from veNFT.",
          "_from": "VeNFT to split."
        },
        "returns": {
          "_tokenId1": "Return tokenId of veNFT with oldLocked.amount - `_amount`.",
          "_tokenId2": "Return tokenId of veNFT with `_amount`."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "symbol()": {
        "details": "Returns the token collection symbol."
      },
      "toggleSplit(address,bool)": {
        "details": "Toggle split for address(0) to enable or disable for all.",
        "params": {
          "_account": "Address to toggle split permissions",
          "_bool": "True to allow, false to disallow"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
      },
      "totalSupply()": {
        "returns": {
          "_0": "Total voting power at current timestamp"
        }
      },
      "totalSupplyAt(uint256)": {
        "params": {
          "_t": "Timestamp to query total voting power"
        },
        "returns": {
          "_0": "Total voting power at given timestamp"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
      },
      "unlockPermanent(uint256)": {
        "details": "Only callable by permanently locked veNFTs.      Cannot unlock if already voted this epoch.",
        "params": {
          "_tokenId": "tokenId to unlock."
        }
      },
      "voting(uint256,bool)": {
        "details": "Only callable by voter",
        "params": {
          "_tokenId": ".",
          "_voted": "."
        }
      },
      "withdraw(uint256)": {
        "details": "Only possible if the lock is both expired and not permanent      This will burn the veNFT. Any rebases or rewards that are unclaimed      will no longer be claimable. Claim all rebases and rewards prior to calling this."
      },
      "withdrawManaged(uint256)": {
        "details": "Throws if NFT not locked.      Throws if not called by voter.",
        "params": {
          "_tokenId": "tokenId of NFT being deposited."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "artProxy()": {
        "notice": "Address of art proxy used for on-chain art generation"
      },
      "balanceOfNFT(uint256)": {
        "notice": "Get the voting power for _tokenId at the current timestamp"
      },
      "balanceOfNFTAt(uint256,uint256)": {
        "notice": "Get the voting power for _tokenId at a given timestamp"
      },
      "canSplit(address)": {
        "notice": "account -> can split"
      },
      "checkpoint()": {
        "notice": "Record global data to checkpoint"
      },
      "checkpoints(uint256,uint48)": {
        "notice": "A record of delegated token checkpoints for each account, by index"
      },
      "createLock(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `msg.sender` and lock for `_lockDuration`"
      },
      "createLockFor(uint256,uint256,address)": {
        "notice": "Deposit `_value` tokens for `_to` and lock for `_lockDuration`"
      },
      "createManagedLockFor(address)": {
        "notice": "Create managed NFT (a permanent lock) for use within ecosystem."
      },
      "depositFor(uint256,uint256)": {
        "notice": "Deposit `_value` tokens for `_tokenId` and add to the lock"
      },
      "depositManaged(uint256,uint256)": {
        "notice": "Delegates balance to managed nft         Note that NFTs deposited into a managed NFT will be re-locked         to the maximum lock time on withdrawal.         Permanent locks that are deposited will automatically unlock."
      },
      "distributor()": {
        "notice": "Address of RewardsDistributor.sol"
      },
      "epoch()": {
        "notice": "Total count of epochs witnessed since contract creation"
      },
      "factoryRegistry()": {
        "notice": "Address of FactoryRegistry.sol"
      },
      "forwarder()": {
        "notice": "Address of Meta-tx Forwarder"
      },
      "increaseAmount(uint256,uint256)": {
        "notice": "Deposit `_value` additional tokens for `_tokenId` without modifying the unlock time"
      },
      "increaseUnlockTime(uint256,uint256)": {
        "notice": "Extend the unlock time for `_tokenId`         Cannot extend lock time of permanent locks"
      },
      "isApprovedOrOwner(address,uint256)": {
        "notice": "Check whether spender is owner or an approved user for a given veNFT"
      },
      "lockPermanent(uint256)": {
        "notice": "Permanently lock a veNFT. Voting power will be equal to         `LockedBalance.amount` with no decay. Required to delegate."
      },
      "locked(uint256)": {
        "notice": "Get the LockedBalance (amount, end) of a _tokenId"
      },
      "merge(uint256,uint256)": {
        "notice": "Merges `_from` into `_to`."
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(uint256)": {
        "notice": "The number of checkpoints for each tokenId"
      },
      "permanentLockBalance()": {
        "notice": "Aggregate permanent locked balances"
      },
      "pointHistory(uint256)": {
        "notice": "Global point history at a given index"
      },
      "setAllowedManager(address)": {
        "notice": "Permit one address to call createManagedLockFor() that is not Voter.governor()"
      },
      "setManagedState(uint256,bool)": {
        "notice": "Set Managed NFT state. Inactive NFTs cannot be deposited into."
      },
      "setVoterAndDistributor(address,address)": {
        "notice": "Set the global state voter and distributor"
      },
      "slopeChanges(uint256)": {
        "notice": "time -> signed slope change"
      },
      "split(uint256,uint256)": {
        "notice": "Splits veNFT into two new veNFTS - one with oldLocked.amount - `_amount`, and the second with `_amount`"
      },
      "supply()": {
        "notice": "Total amount of token() deposited"
      },
      "team()": {
        "notice": "Address of Protocol Team multisig"
      },
      "toggleSplit(address,bool)": {
        "notice": "Toggle split for a specific address."
      },
      "token()": {
        "notice": "Address of token used to create a veNFT"
      },
      "totalSupply()": {
        "notice": "Calculate total voting power at current timestamp"
      },
      "totalSupplyAt(uint256)": {
        "notice": "Calculate total voting power at a given timestamp"
      },
      "unlockPermanent(uint256)": {
        "notice": "Unlock a permanently locked veNFT. Voting power will decay.         Will automatically dedelegate if delegated."
      },
      "userPointHistory(uint256,uint256)": {
        "notice": "User -> UserPoint[userEpoch]"
      },
      "voted(uint256)": {
        "notice": "See if a queried _tokenId has actively voted"
      },
      "voter()": {
        "notice": "Address of Voter.sol"
      },
      "voting(uint256,bool)": {
        "notice": "Set `voted` for _tokenId to true or false"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw all tokens for `_tokenId`"
      },
      "withdrawManaged(uint256)": {
        "notice": "Retrieves locked rewards and withdraws balance from managed nft.         Note that the NFT withdrawn is re-locked to the maximum lock time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 739,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 17857,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "distributor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 17860,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "voter",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17863,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "team",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17866,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "artProxy",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17869,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "allowedManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 17874,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "_pointHistory",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(GlobalPoint)31122_storage)"
      },
      {
        "astId": 17879,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "supportedInterfaces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 17902,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "tokenId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 18014,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "escrowType",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_enum(EscrowType)31142)"
      },
      {
        "astId": 18019,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "idToManaged",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 18026,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "weights",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 18031,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "deactivated",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 18036,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "managedToLocked",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 18041,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "managedToFree",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 18780,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "idToOwner",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 18785,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "ownerToNFTokenCount",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18828,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "idToApprovals",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 18835,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "ownerToOperators",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 18839,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "ownershipChange",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19262,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "ownerToNFTokenIdList",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 19267,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "tokenToOwnerIndex",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19569,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "epoch",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 19572,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "supply",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 19577,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "_locked",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(LockedBalance)31100_storage)"
      },
      {
        "astId": 19584,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "_userPointHistory",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_array(t_struct(UserPoint)31111_storage)1000000000_storage)"
      },
      {
        "astId": 19588,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "userPointEpoch",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 19593,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "slopeChanges",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 19598,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "canSplit",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19601,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "permanentLockBalance",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 21716,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "voted",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 21781,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "_delegates",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 21789,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "_checkpoints",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_mapping(t_uint48,t_struct(Checkpoint)31132_storage))"
      },
      {
        "astId": 21794,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "33",
        "type": "t_mapping(t_uint256,t_uint48)"
      },
      {
        "astId": 21799,
        "contract": "contracts/VeBTC.sol:VeBTC",
        "label": "nonces",
        "offset": 0,
        "slot": "34",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(UserPoint)31111_storage)1000000000_storage": {
        "base": "t_struct(UserPoint)31111_storage",
        "encoding": "inplace",
        "label": "struct IVotingEscrow.UserPoint[1000000000]",
        "numberOfBytes": "128000000000"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(EscrowType)31142": {
        "encoding": "inplace",
        "label": "enum IVotingEscrow.EscrowType",
        "numberOfBytes": "1"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(UserPoint)31111_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVotingEscrow.UserPoint[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(UserPoint)31111_storage)1000000000_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(EscrowType)31142)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum IVotingEscrow.EscrowType)",
        "numberOfBytes": "32",
        "value": "t_enum(EscrowType)31142"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint48,t_struct(Checkpoint)31132_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint48 => struct IVotingEscrow.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint48,t_struct(Checkpoint)31132_storage)"
      },
      "t_mapping(t_uint256,t_struct(GlobalPoint)31122_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVotingEscrow.GlobalPoint)",
        "numberOfBytes": "32",
        "value": "t_struct(GlobalPoint)31122_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedBalance)31100_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IVotingEscrow.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)31100_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint48)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint48)",
        "numberOfBytes": "32",
        "value": "t_uint48"
      },
      "t_mapping(t_uint48,t_struct(Checkpoint)31132_storage)": {
        "encoding": "mapping",
        "key": "t_uint48",
        "label": "mapping(uint48 => struct IVotingEscrow.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)31132_storage"
      },
      "t_struct(Checkpoint)31132_storage": {
        "encoding": "inplace",
        "label": "struct IVotingEscrow.Checkpoint",
        "members": [
          {
            "astId": 31125,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "fromTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 31127,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 31129,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "delegatedBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31131,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "delegatee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(GlobalPoint)31122_storage": {
        "encoding": "inplace",
        "label": "struct IVotingEscrow.GlobalPoint",
        "members": [
          {
            "astId": 31113,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 31115,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 31117,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31119,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31121,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "permanentLockBalance",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LockedBalance)31100_storage": {
        "encoding": "inplace",
        "label": "struct IVotingEscrow.LockedBalance",
        "members": [
          {
            "astId": 31095,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 31097,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31099,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "isPermanent",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserPoint)31111_storage": {
        "encoding": "inplace",
        "label": "struct IVotingEscrow.UserPoint",
        "members": [
          {
            "astId": 31102,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 31104,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 31106,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 31108,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 31110,
            "contract": "contracts/VeBTC.sol:VeBTC",
            "label": "permanent",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}
